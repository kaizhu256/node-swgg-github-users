{"basePath":"/","definitions":{"BuiltinFile":{"properties":{"_id":{"readOnly":true,"type":"string"},"_timeCreated":{"format":"date-time","readOnly":true,"type":"string"},"_timeUpdated":{"format":"date-time","readOnly":true,"type":"string"},"fileBlob":{"format":"byte","type":"string"},"fileContentType":{"type":"string"},"fileDescription":{"type":"string"},"fileFilename":{"type":"string"},"fileInputName":{"type":"string"},"fileSize":{"minimum":0,"type":"integer"},"fileUrl":{"type":"string"},"id":{"type":"string"}}},"BuiltinJsonapiResponse":{"properties":{"data":{"items":{"type":"object"},"type":"array"},"errors":{"items":{"type":"object"},"type":"array"},"meta":{"type":"object"}}},"BuiltinUser":{"properties":{"_id":{"readOnly":true,"type":"string"},"_timeCreated":{"format":"date-time","readOnly":true,"type":"string"},"_timeUpdated":{"format":"date-time","readOnly":true,"type":"string"},"id":{"type":"string"},"jwtEncrypted":{"type":"string"},"password":{"format":"password","type":"string"},"username":{"type":"string"}}},"_2Fuser_20PATCH.body":{"properties":{"bio":{"default":"There once...","description":"The new short biography of the user.","type":"string","x-swgg-descriptionLineList":["The new short biography of the user."]},"blog":{"default":"https://github.com/blog","description":"The new blog URL of the user.","type":"string","x-swgg-descriptionLineList":["The new blog URL of the user."]},"company":{"default":"GitHub","description":"The new company of the user.","type":"string","x-swgg-descriptionLineList":["The new company of the user."]},"email":{"default":"octocat@github.com","description":"The publicly visible email address of the user.","type":"string","x-swgg-descriptionLineList":["The publicly visible email address of the user."]},"hireable":{"default":true,"description":"The new hiring availability of the user.","type":"boolean","x-swgg-descriptionLineList":["The new hiring availability of the user."]},"location":{"default":"San Francisco","description":"The new location of the user.","type":"string","x-swgg-descriptionLineList":["The new location of the user."]},"name":{"default":"monalisa octocat","description":"The new name of the user.","type":"string","x-swgg-descriptionLineList":["The new name of the user."]}},"x-swgg-tags0":"github-users"},"_2Fuser_2Femail_2Fvisibility_20PATCH.body":{"properties":{"email":{"default":"octocat@github.com","description":"**Required**. Specify the primary email address that needs a visibility change.","type":"string","x-swgg-descriptionLineList":["**Required**. Specify the primary email address that needs a visibility change."]},"visibility":{"default":"public","description":"**Required**.  Use ```public``` to enable an authenticated user to view the specified email address, or use ```private``` so this primary email address cannot be seen publicly.","type":"string","x-swgg-descriptionLineList":["**Required**.  Use ```public``` to enable an authenticated user to view the specified email address, or use ```private``` so this primary email address cannot be seen publicly."]}},"required":["email","visibility"],"x-swgg-tags0":"github-users"},"_2Fuser_2Fgpg_keys_20POST.body":{"properties":{"armored_public_key":{"default":"-----BEGIN PGP PUBLIC KEY BLOCK-----\n...\n-----END PGP PUBLIC KEY BLOCK-----","description":"no description","type":"string"}},"x-swgg-tags0":"github-users"},"_2Fuser_2Fkeys_20POST.body":{"properties":{"key":{"default":"ssh-rsa AAA...","description":"no description","type":"string"},"title":{"default":"octocat@octomac","description":"no description","type":"string"}},"x-swgg-tags0":"github-users"}},"description":"# [Users](https://developer.github.com/v3/users/)\n\nMany of the resources on the users API provide a shortcut for getting information about the currently authenticated user. If a request URL does not include a ```:username``` parameter then the response will be for the logged in user (and you must pass [authentication information](https://developer.github.com/v3/#authentication) with your request). Additional private information, such as whether a user has two-factor authentication enabled, is included when authenticated through basic auth or OAuth with the ```user``` scope.\n\n**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.jean-grey-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).\n\n# [Block Another User](https://developer.github.com/v3/users/blocking/)\n\n**Note:** The User Blocking API on GitHub is currently available for developers to preview. To access the API, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.giant-sentry-fist-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).\n\n# [User Emails](https://developer.github.com/v3/users/emails/)\n\nManagement of email addresses via the API requires that you authenticate through basic auth or OAuth with the ```user:email``` scope.\n\n# [User Followers](https://developer.github.com/v3/users/followers/)\n\nno description\n\n# [User GPG Keys](https://developer.github.com/v3/users/gpg_keys/)\n\nThe data returned in the ```public_key``` response field is not a GPG formatted key. When a user uploads a GPG key, it is parsed and the cryptographic public key is extracted and stored. This cryptographic key is what is returned by the APIs on this page. This key is not suitable to be used directly by programs like GPG.\n\n# [User Public Keys](https://developer.github.com/v3/users/keys/)\n\nno description","info":{"title":"swgg-github-users","version":"2018.4.21","x-swgg-description":"this zero-dependency package will provide a (nodejs-compatible) swagger-client for github-users's web-apis, with a working web-demo","x-swgg-homepage":"https://github.com/kaizhu256/node-swgg-github-users"},"parameters":{"github-all.key":{"default":"xxxxxxxx","description":"https://developer.github.com/v3/#authentication\n\nOAuth2 token (sent as a parameter)","in":"query","name":"access_token","type":"string","x-swgg-apiKey":true,"x-swgg-descriptionLineList":["https://developer.github.com/v3/#authentication","","OAuth2 token (sent as a parameter)"]},"github-all.user-agent":{"default":"Awesome-Octocat-App","description":"https://developer.github.com/v3/index.html#user-agent-required\n\nAll API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems.","in":"header","name":"user-agent","required":true,"type":"string","x-swgg-descriptionLineList":["https://developer.github.com/v3/index.html#user-agent-required","","All API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems."]}},"paths":{"/user":{"get":{"consumes":[],"description":"[Users](https://developer.github.com/v3/users/#get-the-authenticated-user) - Get the authenticated user","operationId":"_2Fuser_20GET","parameters":[{"default":"xxxxxxxx","description":"https://developer.github.com/v3/#authentication\n\nOAuth2 token (sent as a parameter)","in":"query","name":"access_token","type":"string","x-swgg-apiKey":true,"x-swgg-descriptionLineList":["https://developer.github.com/v3/#authentication","","OAuth2 token (sent as a parameter)"]},{"default":"Awesome-Octocat-App","description":"https://developer.github.com/v3/index.html#user-agent-required\n\nAll API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems.","in":"header","name":"user-agent","required":true,"type":"string","x-swgg-descriptionLineList":["https://developer.github.com/v3/index.html#user-agent-required","","All API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems."]},{"collectionFormat":"csv","default":["application/vnd.github.hagar-preview+json"],"description":"https://developer.github.com/v3/media/\n\nCustom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't.","enum":["application/vnd.github.jean-grey-preview+json","application/vnd.github.hagar-preview+json","application/vnd.github.v3+json"],"in":"header","items":{"type":"string"},"name":"accept","required":true,"type":"array","x-swgg-descriptionLineList":["https://developer.github.com/v3/media/","","Custom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't."]}],"responses":{"default":{"description":"default response"}},"tags":["github-users"],"x-swgg-descriptionLineList":["[Users](https://developer.github.com/v3/users/#get-the-authenticated-user) - Get the authenticated user"],"x-swgg-host":"api.github.com","x-swgg-schemes":["https"],"x-swgg-sortValue":"[Users](https://developer.github.com/v3/users/#get-the-authenticated-user) - Get the authenticated user","x-swgg-tags0":"github-users"},"patch":{"consumes":[],"description":"[Users](https://developer.github.com/v3/users/#update-the-authenticated-user) - Update the authenticated user","operationId":"_2Fuser_20PATCH","parameters":[{"default":"xxxxxxxx","description":"https://developer.github.com/v3/#authentication\n\nOAuth2 token (sent as a parameter)","in":"query","name":"access_token","type":"string","x-swgg-apiKey":true,"x-swgg-descriptionLineList":["https://developer.github.com/v3/#authentication","","OAuth2 token (sent as a parameter)"]},{"default":"Awesome-Octocat-App","description":"https://developer.github.com/v3/index.html#user-agent-required\n\nAll API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems.","in":"header","name":"user-agent","required":true,"type":"string","x-swgg-descriptionLineList":["https://developer.github.com/v3/index.html#user-agent-required","","All API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems."]},{"collectionFormat":"csv","default":["application/vnd.github.hagar-preview+json"],"description":"https://developer.github.com/v3/media/\n\nCustom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't.","enum":["application/vnd.github.jean-grey-preview+json","application/vnd.github.hagar-preview+json","application/vnd.github.v3+json"],"in":"header","items":{"type":"string"},"name":"accept","required":true,"type":"array","x-swgg-descriptionLineList":["https://developer.github.com/v3/media/","","Custom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't."]},{"description":"no description","in":"body","name":"body","schema":{"$ref":"#/definitions/_2Fuser_20PATCH.body"}}],"responses":{"default":{"description":"default response"}},"tags":["github-users"],"x-swgg-descriptionLineList":["[Users](https://developer.github.com/v3/users/#update-the-authenticated-user) - Update the authenticated user"],"x-swgg-host":"api.github.com","x-swgg-schemes":["https"],"x-swgg-sortValue":"[Users](https://developer.github.com/v3/users/#update-the-authenticated-user) - Update the authenticated user","x-swgg-tags0":"github-users"}},"/user/blocks":{"get":{"consumes":[],"description":"[Block Another User](https://developer.github.com/v3/users/blocking/#list-blocked-users) - List blocked users\n\nList the users you've blocked on your personal account.","operationId":"_2Fuser_2Fblocks_20GET","parameters":[{"default":"xxxxxxxx","description":"https://developer.github.com/v3/#authentication\n\nOAuth2 token (sent as a parameter)","in":"query","name":"access_token","type":"string","x-swgg-apiKey":true,"x-swgg-descriptionLineList":["https://developer.github.com/v3/#authentication","","OAuth2 token (sent as a parameter)"]},{"default":"Awesome-Octocat-App","description":"https://developer.github.com/v3/index.html#user-agent-required\n\nAll API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems.","in":"header","name":"user-agent","required":true,"type":"string","x-swgg-descriptionLineList":["https://developer.github.com/v3/index.html#user-agent-required","","All API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems."]},{"collectionFormat":"csv","default":["application/vnd.github.giant-sentry-fist-preview+json"],"description":"https://developer.github.com/v3/media/\n\nCustom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't.","enum":["application/vnd.github.giant-sentry-fist-preview+json","application/vnd.github.v3+json"],"in":"header","items":{"type":"string"},"name":"accept","required":true,"type":"array","x-swgg-descriptionLineList":["https://developer.github.com/v3/media/","","Custom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't."]}],"responses":{"default":{"description":"default response"}},"tags":["github-users"],"x-swgg-descriptionLineList":["[Block Another User](https://developer.github.com/v3/users/blocking/#list-blocked-users) - List blocked users","","List the users you've blocked on your personal account."],"x-swgg-host":"api.github.com","x-swgg-schemes":["https"],"x-swgg-sortValue":"[Block Another User](https://developer.github.com/v3/users/blocking/#list-blocked-users) - List blocked users","x-swgg-tags0":"github-users"}},"/user/blocks/{username}":{"delete":{"consumes":[],"description":"[Block Another User](https://developer.github.com/v3/users/blocking/#unblock-a-user) - Unblock a user","operationId":"_2Fuser_2Fblocks_2F_7Busername_7D_20DELETE","parameters":[{"default":"xxxxxxxx","description":"https://developer.github.com/v3/#authentication\n\nOAuth2 token (sent as a parameter)","in":"query","name":"access_token","type":"string","x-swgg-apiKey":true,"x-swgg-descriptionLineList":["https://developer.github.com/v3/#authentication","","OAuth2 token (sent as a parameter)"]},{"default":"Awesome-Octocat-App","description":"https://developer.github.com/v3/index.html#user-agent-required\n\nAll API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems.","in":"header","name":"user-agent","required":true,"type":"string","x-swgg-descriptionLineList":["https://developer.github.com/v3/index.html#user-agent-required","","All API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems."]},{"collectionFormat":"csv","default":["application/vnd.github.giant-sentry-fist-preview+json"],"description":"https://developer.github.com/v3/media/\n\nCustom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't.","enum":["application/vnd.github.giant-sentry-fist-preview+json","application/vnd.github.v3+json"],"in":"header","items":{"type":"string"},"name":"accept","required":true,"type":"array","x-swgg-descriptionLineList":["https://developer.github.com/v3/media/","","Custom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't."]},{"default":"username","description":"no description","in":"path","name":"username","required":true,"type":"string"}],"responses":{"default":{"description":"default response"}},"tags":["github-users"],"x-swgg-descriptionLineList":["[Block Another User](https://developer.github.com/v3/users/blocking/#unblock-a-user) - Unblock a user"],"x-swgg-host":"api.github.com","x-swgg-schemes":["https"],"x-swgg-sortValue":"[Block Another User](https://developer.github.com/v3/users/blocking/#unblock-a-user) - Unblock a user","x-swgg-tags0":"github-users"},"get":{"consumes":[],"description":"[Block Another User](https://developer.github.com/v3/users/blocking/#check-whether-youve-blocked-a-user) - Check whether you've blocked a user","operationId":"_2Fuser_2Fblocks_2F_7Busername_7D_20GET","parameters":[{"default":"xxxxxxxx","description":"https://developer.github.com/v3/#authentication\n\nOAuth2 token (sent as a parameter)","in":"query","name":"access_token","type":"string","x-swgg-apiKey":true,"x-swgg-descriptionLineList":["https://developer.github.com/v3/#authentication","","OAuth2 token (sent as a parameter)"]},{"default":"Awesome-Octocat-App","description":"https://developer.github.com/v3/index.html#user-agent-required\n\nAll API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems.","in":"header","name":"user-agent","required":true,"type":"string","x-swgg-descriptionLineList":["https://developer.github.com/v3/index.html#user-agent-required","","All API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems."]},{"collectionFormat":"csv","default":["application/vnd.github.giant-sentry-fist-preview+json"],"description":"https://developer.github.com/v3/media/\n\nCustom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't.","enum":["application/vnd.github.giant-sentry-fist-preview+json","application/vnd.github.v3+json"],"in":"header","items":{"type":"string"},"name":"accept","required":true,"type":"array","x-swgg-descriptionLineList":["https://developer.github.com/v3/media/","","Custom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't."]},{"default":"username","description":"no description","in":"path","name":"username","required":true,"type":"string"}],"responses":{"default":{"description":"default response"}},"tags":["github-users"],"x-swgg-descriptionLineList":["[Block Another User](https://developer.github.com/v3/users/blocking/#check-whether-youve-blocked-a-user) - Check whether you've blocked a user"],"x-swgg-host":"api.github.com","x-swgg-schemes":["https"],"x-swgg-sortValue":"[Block Another User](https://developer.github.com/v3/users/blocking/#check-whether-youve-blocked-a-user) - Check whether you've blocked a user","x-swgg-tags0":"github-users"},"put":{"consumes":[],"description":"[Block Another User](https://developer.github.com/v3/users/blocking/#block-a-user) - Block a user","operationId":"_2Fuser_2Fblocks_2F_7Busername_7D_20PUT","parameters":[{"default":"xxxxxxxx","description":"https://developer.github.com/v3/#authentication\n\nOAuth2 token (sent as a parameter)","in":"query","name":"access_token","type":"string","x-swgg-apiKey":true,"x-swgg-descriptionLineList":["https://developer.github.com/v3/#authentication","","OAuth2 token (sent as a parameter)"]},{"default":"Awesome-Octocat-App","description":"https://developer.github.com/v3/index.html#user-agent-required\n\nAll API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems.","in":"header","name":"user-agent","required":true,"type":"string","x-swgg-descriptionLineList":["https://developer.github.com/v3/index.html#user-agent-required","","All API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems."]},{"collectionFormat":"csv","default":["application/vnd.github.giant-sentry-fist-preview+json"],"description":"https://developer.github.com/v3/media/\n\nCustom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't.","enum":["application/vnd.github.giant-sentry-fist-preview+json","application/vnd.github.v3+json"],"in":"header","items":{"type":"string"},"name":"accept","required":true,"type":"array","x-swgg-descriptionLineList":["https://developer.github.com/v3/media/","","Custom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't."]},{"default":"username","description":"no description","in":"path","name":"username","required":true,"type":"string"}],"responses":{"default":{"description":"default response"}},"tags":["github-users"],"x-swgg-descriptionLineList":["[Block Another User](https://developer.github.com/v3/users/blocking/#block-a-user) - Block a user"],"x-swgg-host":"api.github.com","x-swgg-schemes":["https"],"x-swgg-sortValue":"[Block Another User](https://developer.github.com/v3/users/blocking/#block-a-user) - Block a user","x-swgg-tags0":"github-users"}},"/user/email/visibility":{"patch":{"consumes":[],"description":"[User Emails](https://developer.github.com/v3/users/emails/#toggle-primary-email-visibility) - Toggle primary email visibility\n\nSets the visibility for your primary email addresses.","operationId":"_2Fuser_2Femail_2Fvisibility_20PATCH","parameters":[{"default":"xxxxxxxx","description":"https://developer.github.com/v3/#authentication\n\nOAuth2 token (sent as a parameter)","in":"query","name":"access_token","type":"string","x-swgg-apiKey":true,"x-swgg-descriptionLineList":["https://developer.github.com/v3/#authentication","","OAuth2 token (sent as a parameter)"]},{"default":"Awesome-Octocat-App","description":"https://developer.github.com/v3/index.html#user-agent-required\n\nAll API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems.","in":"header","name":"user-agent","required":true,"type":"string","x-swgg-descriptionLineList":["https://developer.github.com/v3/index.html#user-agent-required","","All API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems."]},{"collectionFormat":"csv","description":"https://developer.github.com/v3/media/\n\nCustom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't.","enum":["application/vnd.github.v3+json"],"in":"header","items":{"type":"string"},"name":"accept","type":"array","x-swgg-descriptionLineList":["https://developer.github.com/v3/media/","","Custom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't."]},{"description":"no description","in":"body","name":"body","schema":{"$ref":"#/definitions/_2Fuser_2Femail_2Fvisibility_20PATCH.body"}}],"responses":{"default":{"description":"default response"}},"tags":["github-users"],"x-swgg-descriptionLineList":["[User Emails](https://developer.github.com/v3/users/emails/#toggle-primary-email-visibility) - Toggle primary email visibility","","Sets the visibility for your primary email addresses."],"x-swgg-host":"api.github.com","x-swgg-schemes":["https"],"x-swgg-sortValue":"[User Emails](https://developer.github.com/v3/users/emails/#toggle-primary-email-visibility) - Toggle primary email visibility","x-swgg-tags0":"github-users"}},"/user/emails":{"delete":{"consumes":[],"description":"[User Emails](https://developer.github.com/v3/users/emails/#delete-email-addresses) - Delete email address(es)","operationId":"_2Fuser_2Femails_20DELETE","parameters":[{"default":"xxxxxxxx","description":"https://developer.github.com/v3/#authentication\n\nOAuth2 token (sent as a parameter)","in":"query","name":"access_token","type":"string","x-swgg-apiKey":true,"x-swgg-descriptionLineList":["https://developer.github.com/v3/#authentication","","OAuth2 token (sent as a parameter)"]},{"default":"Awesome-Octocat-App","description":"https://developer.github.com/v3/index.html#user-agent-required\n\nAll API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems.","in":"header","name":"user-agent","required":true,"type":"string","x-swgg-descriptionLineList":["https://developer.github.com/v3/index.html#user-agent-required","","All API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems."]},{"collectionFormat":"csv","description":"https://developer.github.com/v3/media/\n\nCustom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't.","enum":["application/vnd.github.v3+json"],"in":"header","items":{"type":"string"},"name":"accept","type":"array","x-swgg-descriptionLineList":["https://developer.github.com/v3/media/","","Custom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't."]}],"responses":{"default":{"description":"default response"}},"tags":["github-users"],"x-swgg-descriptionLineList":["[User Emails](https://developer.github.com/v3/users/emails/#delete-email-addresses) - Delete email address(es)"],"x-swgg-host":"api.github.com","x-swgg-schemes":["https"],"x-swgg-sortValue":"[User Emails](https://developer.github.com/v3/users/emails/#delete-email-addresses) - Delete email address(es)","x-swgg-tags0":"github-users"},"get":{"consumes":[],"description":"[User Emails](https://developer.github.com/v3/users/emails/#list-email-addresses-for-a-user) - List email addresses for a user\n\nLists all of your email addresses, and specifies which one is visible to the public. This endpoint is accessible with the ```user:email``` scope.","operationId":"_2Fuser_2Femails_20GET","parameters":[{"default":"xxxxxxxx","description":"https://developer.github.com/v3/#authentication\n\nOAuth2 token (sent as a parameter)","in":"query","name":"access_token","type":"string","x-swgg-apiKey":true,"x-swgg-descriptionLineList":["https://developer.github.com/v3/#authentication","","OAuth2 token (sent as a parameter)"]},{"default":"Awesome-Octocat-App","description":"https://developer.github.com/v3/index.html#user-agent-required\n\nAll API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems.","in":"header","name":"user-agent","required":true,"type":"string","x-swgg-descriptionLineList":["https://developer.github.com/v3/index.html#user-agent-required","","All API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems."]},{"collectionFormat":"csv","description":"https://developer.github.com/v3/media/\n\nCustom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't.","enum":["application/vnd.github.v3+json"],"in":"header","items":{"type":"string"},"name":"accept","type":"array","x-swgg-descriptionLineList":["https://developer.github.com/v3/media/","","Custom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't."]}],"responses":{"default":{"description":"default response"}},"tags":["github-users"],"x-swgg-descriptionLineList":["[User Emails](https://developer.github.com/v3/users/emails/#list-email-addresses-for-a-user) - List email addresses for a user","","Lists all of your email addresses, and specifies which one is visible to the public. This endpoint is accessible with the ```user:email``` scope."],"x-swgg-host":"api.github.com","x-swgg-schemes":["https"],"x-swgg-sortValue":"[User Emails](https://developer.github.com/v3/users/emails/#list-email-addresses-for-a-user) - List email addresses for a user","x-swgg-tags0":"github-users"},"post":{"consumes":[],"description":"[User Emails](https://developer.github.com/v3/users/emails/#add-email-addresses) - Add email address(es)","operationId":"_2Fuser_2Femails_20POST","parameters":[{"default":"xxxxxxxx","description":"https://developer.github.com/v3/#authentication\n\nOAuth2 token (sent as a parameter)","in":"query","name":"access_token","type":"string","x-swgg-apiKey":true,"x-swgg-descriptionLineList":["https://developer.github.com/v3/#authentication","","OAuth2 token (sent as a parameter)"]},{"default":"Awesome-Octocat-App","description":"https://developer.github.com/v3/index.html#user-agent-required\n\nAll API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems.","in":"header","name":"user-agent","required":true,"type":"string","x-swgg-descriptionLineList":["https://developer.github.com/v3/index.html#user-agent-required","","All API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems."]},{"collectionFormat":"csv","description":"https://developer.github.com/v3/media/\n\nCustom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't.","enum":["application/vnd.github.v3+json"],"in":"header","items":{"type":"string"},"name":"accept","type":"array","x-swgg-descriptionLineList":["https://developer.github.com/v3/media/","","Custom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't."]}],"responses":{"default":{"description":"default response"}},"tags":["github-users"],"x-swgg-descriptionLineList":["[User Emails](https://developer.github.com/v3/users/emails/#add-email-addresses) - Add email address(es)"],"x-swgg-host":"api.github.com","x-swgg-schemes":["https"],"x-swgg-sortValue":"[User Emails](https://developer.github.com/v3/users/emails/#add-email-addresses) - Add email address(es)","x-swgg-tags0":"github-users"}},"/user/following/{username}":{"delete":{"consumes":[],"description":"[User Followers](https://developer.github.com/v3/users/followers/#unfollow-a-user) - Unfollow a user","operationId":"_2Fuser_2Ffollowing_2F_7Busername_7D_20DELETE","parameters":[{"default":"xxxxxxxx","description":"https://developer.github.com/v3/#authentication\n\nOAuth2 token (sent as a parameter)","in":"query","name":"access_token","type":"string","x-swgg-apiKey":true,"x-swgg-descriptionLineList":["https://developer.github.com/v3/#authentication","","OAuth2 token (sent as a parameter)"]},{"default":"Awesome-Octocat-App","description":"https://developer.github.com/v3/index.html#user-agent-required\n\nAll API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems.","in":"header","name":"user-agent","required":true,"type":"string","x-swgg-descriptionLineList":["https://developer.github.com/v3/index.html#user-agent-required","","All API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems."]},{"collectionFormat":"csv","description":"https://developer.github.com/v3/media/\n\nCustom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't.","enum":["application/vnd.github.v3+json"],"in":"header","items":{"type":"string"},"name":"accept","type":"array","x-swgg-descriptionLineList":["https://developer.github.com/v3/media/","","Custom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't."]},{"default":"username","description":"no description","in":"path","name":"username","required":true,"type":"string"}],"responses":{"default":{"description":"default response"}},"tags":["github-users"],"x-swgg-descriptionLineList":["[User Followers](https://developer.github.com/v3/users/followers/#unfollow-a-user) - Unfollow a user"],"x-swgg-host":"api.github.com","x-swgg-schemes":["https"],"x-swgg-sortValue":"[User Followers](https://developer.github.com/v3/users/followers/#unfollow-a-user) - Unfollow a user","x-swgg-tags0":"github-users"},"get":{"consumes":[],"description":"[User Followers](https://developer.github.com/v3/users/followers/#check-if-you-are-following-a-user) - Check if you are following a user","operationId":"_2Fuser_2Ffollowing_2F_7Busername_7D_20GET","parameters":[{"default":"xxxxxxxx","description":"https://developer.github.com/v3/#authentication\n\nOAuth2 token (sent as a parameter)","in":"query","name":"access_token","type":"string","x-swgg-apiKey":true,"x-swgg-descriptionLineList":["https://developer.github.com/v3/#authentication","","OAuth2 token (sent as a parameter)"]},{"default":"Awesome-Octocat-App","description":"https://developer.github.com/v3/index.html#user-agent-required\n\nAll API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems.","in":"header","name":"user-agent","required":true,"type":"string","x-swgg-descriptionLineList":["https://developer.github.com/v3/index.html#user-agent-required","","All API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems."]},{"collectionFormat":"csv","description":"https://developer.github.com/v3/media/\n\nCustom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't.","enum":["application/vnd.github.v3+json"],"in":"header","items":{"type":"string"},"name":"accept","type":"array","x-swgg-descriptionLineList":["https://developer.github.com/v3/media/","","Custom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't."]},{"default":"username","description":"no description","in":"path","name":"username","required":true,"type":"string"}],"responses":{"default":{"description":"default response"}},"tags":["github-users"],"x-swgg-descriptionLineList":["[User Followers](https://developer.github.com/v3/users/followers/#check-if-you-are-following-a-user) - Check if you are following a user"],"x-swgg-host":"api.github.com","x-swgg-schemes":["https"],"x-swgg-sortValue":"[User Followers](https://developer.github.com/v3/users/followers/#check-if-you-are-following-a-user) - Check if you are following a user","x-swgg-tags0":"github-users"},"put":{"consumes":[],"description":"[User Followers](https://developer.github.com/v3/users/followers/#follow-a-user) - Follow a user","operationId":"_2Fuser_2Ffollowing_2F_7Busername_7D_20PUT","parameters":[{"default":"xxxxxxxx","description":"https://developer.github.com/v3/#authentication\n\nOAuth2 token (sent as a parameter)","in":"query","name":"access_token","type":"string","x-swgg-apiKey":true,"x-swgg-descriptionLineList":["https://developer.github.com/v3/#authentication","","OAuth2 token (sent as a parameter)"]},{"default":"Awesome-Octocat-App","description":"https://developer.github.com/v3/index.html#user-agent-required\n\nAll API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems.","in":"header","name":"user-agent","required":true,"type":"string","x-swgg-descriptionLineList":["https://developer.github.com/v3/index.html#user-agent-required","","All API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems."]},{"collectionFormat":"csv","description":"https://developer.github.com/v3/media/\n\nCustom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't.","enum":["application/vnd.github.v3+json"],"in":"header","items":{"type":"string"},"name":"accept","type":"array","x-swgg-descriptionLineList":["https://developer.github.com/v3/media/","","Custom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't."]},{"default":"username","description":"no description","in":"path","name":"username","required":true,"type":"string"}],"responses":{"default":{"description":"default response"}},"tags":["github-users"],"x-swgg-descriptionLineList":["[User Followers](https://developer.github.com/v3/users/followers/#follow-a-user) - Follow a user"],"x-swgg-host":"api.github.com","x-swgg-schemes":["https"],"x-swgg-sortValue":"[User Followers](https://developer.github.com/v3/users/followers/#follow-a-user) - Follow a user","x-swgg-tags0":"github-users"}},"/user/gpg_keys":{"get":{"consumes":[],"description":"[User GPG Keys](https://developer.github.com/v3/users/gpg_keys/#list-your-gpg-keys) - List your GPG keys","operationId":"_2Fuser_2Fgpg_keys_20GET","parameters":[{"default":"xxxxxxxx","description":"https://developer.github.com/v3/#authentication\n\nOAuth2 token (sent as a parameter)","in":"query","name":"access_token","type":"string","x-swgg-apiKey":true,"x-swgg-descriptionLineList":["https://developer.github.com/v3/#authentication","","OAuth2 token (sent as a parameter)"]},{"default":"Awesome-Octocat-App","description":"https://developer.github.com/v3/index.html#user-agent-required\n\nAll API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems.","in":"header","name":"user-agent","required":true,"type":"string","x-swgg-descriptionLineList":["https://developer.github.com/v3/index.html#user-agent-required","","All API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems."]},{"collectionFormat":"csv","description":"https://developer.github.com/v3/media/\n\nCustom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't.","enum":["application/vnd.github.v3+json"],"in":"header","items":{"type":"string"},"name":"accept","type":"array","x-swgg-descriptionLineList":["https://developer.github.com/v3/media/","","Custom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't."]}],"responses":{"default":{"description":"default response"}},"tags":["github-users"],"x-swgg-descriptionLineList":["[User GPG Keys](https://developer.github.com/v3/users/gpg_keys/#list-your-gpg-keys) - List your GPG keys"],"x-swgg-host":"api.github.com","x-swgg-schemes":["https"],"x-swgg-sortValue":"[User GPG Keys](https://developer.github.com/v3/users/gpg_keys/#list-your-gpg-keys) - List your GPG keys","x-swgg-tags0":"github-users"},"post":{"consumes":[],"description":"[User GPG Keys](https://developer.github.com/v3/users/gpg_keys/#create-a-gpg-key) - Create a GPG key\n\nCreates a GPG key. Requires that you are authenticated via Basic Auth, or OAuth with at least ```write:gpg_key``` [scope](https://developer.github.com/apps/building-integrations/setting-up-and-registering-oauth-apps/about-scopes-for-oauth-apps/).","operationId":"_2Fuser_2Fgpg_keys_20POST","parameters":[{"default":"xxxxxxxx","description":"https://developer.github.com/v3/#authentication\n\nOAuth2 token (sent as a parameter)","in":"query","name":"access_token","type":"string","x-swgg-apiKey":true,"x-swgg-descriptionLineList":["https://developer.github.com/v3/#authentication","","OAuth2 token (sent as a parameter)"]},{"default":"Awesome-Octocat-App","description":"https://developer.github.com/v3/index.html#user-agent-required\n\nAll API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems.","in":"header","name":"user-agent","required":true,"type":"string","x-swgg-descriptionLineList":["https://developer.github.com/v3/index.html#user-agent-required","","All API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems."]},{"collectionFormat":"csv","description":"https://developer.github.com/v3/media/\n\nCustom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't.","enum":["application/vnd.github.v3+json"],"in":"header","items":{"type":"string"},"name":"accept","type":"array","x-swgg-descriptionLineList":["https://developer.github.com/v3/media/","","Custom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't."]},{"description":"no description","in":"body","name":"body","schema":{"$ref":"#/definitions/_2Fuser_2Fgpg_keys_20POST.body"}}],"responses":{"default":{"description":"default response"}},"tags":["github-users"],"x-swgg-descriptionLineList":["[User GPG Keys](https://developer.github.com/v3/users/gpg_keys/#create-a-gpg-key) - Create a GPG key","","Creates a GPG key. Requires that you are authenticated via Basic Auth, or OAuth with at least ```write:gpg_key``` [scope](https://developer.github.com/apps/building-integrations/setting-up-and-registering-oauth-apps/about-scopes-for-oauth-apps/)."],"x-swgg-host":"api.github.com","x-swgg-schemes":["https"],"x-swgg-sortValue":"[User GPG Keys](https://developer.github.com/v3/users/gpg_keys/#create-a-gpg-key) - Create a GPG key","x-swgg-tags0":"github-users"}},"/user/gpg_keys/{id}":{"delete":{"consumes":[],"description":"[User GPG Keys](https://developer.github.com/v3/users/gpg_keys/#delete-a-gpg-key) - Delete a GPG key\n\nRemoves a GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least ```admin:gpg_key``` [scope](https://developer.github.com/apps/building-integrations/setting-up-and-registering-oauth-apps/about-scopes-for-oauth-apps/).","operationId":"_2Fuser_2Fgpg_keys_2F_7Bid_7D_20DELETE","parameters":[{"default":"xxxxxxxx","description":"https://developer.github.com/v3/#authentication\n\nOAuth2 token (sent as a parameter)","in":"query","name":"access_token","type":"string","x-swgg-apiKey":true,"x-swgg-descriptionLineList":["https://developer.github.com/v3/#authentication","","OAuth2 token (sent as a parameter)"]},{"default":"Awesome-Octocat-App","description":"https://developer.github.com/v3/index.html#user-agent-required\n\nAll API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems.","in":"header","name":"user-agent","required":true,"type":"string","x-swgg-descriptionLineList":["https://developer.github.com/v3/index.html#user-agent-required","","All API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems."]},{"collectionFormat":"csv","description":"https://developer.github.com/v3/media/\n\nCustom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't.","enum":["application/vnd.github.v3+json"],"in":"header","items":{"type":"string"},"name":"accept","type":"array","x-swgg-descriptionLineList":["https://developer.github.com/v3/media/","","Custom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't."]},{"default":"id","description":"no description","in":"path","name":"id","required":true,"type":"string"}],"responses":{"default":{"description":"default response"}},"tags":["github-users"],"x-swgg-descriptionLineList":["[User GPG Keys](https://developer.github.com/v3/users/gpg_keys/#delete-a-gpg-key) - Delete a GPG key","","Removes a GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least ```admin:gpg_key``` [scope](https://developer.github.com/apps/building-integrations/setting-up-and-registering-oauth-apps/about-scopes-for-oauth-apps/)."],"x-swgg-host":"api.github.com","x-swgg-schemes":["https"],"x-swgg-sortValue":"[User GPG Keys](https://developer.github.com/v3/users/gpg_keys/#delete-a-gpg-key) - Delete a GPG key","x-swgg-tags0":"github-users"},"get":{"consumes":[],"description":"[User GPG Keys](https://developer.github.com/v3/users/gpg_keys/#get-a-single-gpg-key) - Get a single GPG key\n\nView extended details for a single GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least ```read:gpg_key``` [scope](https://developer.github.com/apps/building-integrations/setting-up-and-registering-oauth-apps/about-scopes-for-oauth-apps/).","operationId":"_2Fuser_2Fgpg_keys_2F_7Bid_7D_20GET","parameters":[{"default":"xxxxxxxx","description":"https://developer.github.com/v3/#authentication\n\nOAuth2 token (sent as a parameter)","in":"query","name":"access_token","type":"string","x-swgg-apiKey":true,"x-swgg-descriptionLineList":["https://developer.github.com/v3/#authentication","","OAuth2 token (sent as a parameter)"]},{"default":"Awesome-Octocat-App","description":"https://developer.github.com/v3/index.html#user-agent-required\n\nAll API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems.","in":"header","name":"user-agent","required":true,"type":"string","x-swgg-descriptionLineList":["https://developer.github.com/v3/index.html#user-agent-required","","All API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems."]},{"collectionFormat":"csv","description":"https://developer.github.com/v3/media/\n\nCustom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't.","enum":["application/vnd.github.v3+json"],"in":"header","items":{"type":"string"},"name":"accept","type":"array","x-swgg-descriptionLineList":["https://developer.github.com/v3/media/","","Custom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't."]},{"default":"id","description":"no description","in":"path","name":"id","required":true,"type":"string"}],"responses":{"default":{"description":"default response"}},"tags":["github-users"],"x-swgg-descriptionLineList":["[User GPG Keys](https://developer.github.com/v3/users/gpg_keys/#get-a-single-gpg-key) - Get a single GPG key","","View extended details for a single GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least ```read:gpg_key``` [scope](https://developer.github.com/apps/building-integrations/setting-up-and-registering-oauth-apps/about-scopes-for-oauth-apps/)."],"x-swgg-host":"api.github.com","x-swgg-schemes":["https"],"x-swgg-sortValue":"[User GPG Keys](https://developer.github.com/v3/users/gpg_keys/#get-a-single-gpg-key) - Get a single GPG key","x-swgg-tags0":"github-users"}},"/user/keys":{"get":{"consumes":[],"description":"[User Public Keys](https://developer.github.com/v3/users/keys/#list-your-public-keys) - List your public keys","operationId":"_2Fuser_2Fkeys_20GET","parameters":[{"default":"xxxxxxxx","description":"https://developer.github.com/v3/#authentication\n\nOAuth2 token (sent as a parameter)","in":"query","name":"access_token","type":"string","x-swgg-apiKey":true,"x-swgg-descriptionLineList":["https://developer.github.com/v3/#authentication","","OAuth2 token (sent as a parameter)"]},{"default":"Awesome-Octocat-App","description":"https://developer.github.com/v3/index.html#user-agent-required\n\nAll API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems.","in":"header","name":"user-agent","required":true,"type":"string","x-swgg-descriptionLineList":["https://developer.github.com/v3/index.html#user-agent-required","","All API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems."]},{"collectionFormat":"csv","description":"https://developer.github.com/v3/media/\n\nCustom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't.","enum":["application/vnd.github.v3+json"],"in":"header","items":{"type":"string"},"name":"accept","type":"array","x-swgg-descriptionLineList":["https://developer.github.com/v3/media/","","Custom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't."]}],"responses":{"default":{"description":"default response"}},"tags":["github-users"],"x-swgg-descriptionLineList":["[User Public Keys](https://developer.github.com/v3/users/keys/#list-your-public-keys) - List your public keys"],"x-swgg-host":"api.github.com","x-swgg-schemes":["https"],"x-swgg-sortValue":"[User Public Keys](https://developer.github.com/v3/users/keys/#list-your-public-keys) - List your public keys","x-swgg-tags0":"github-users"},"post":{"consumes":[],"description":"[User Public Keys](https://developer.github.com/v3/users/keys/#create-a-public-key) - Create a public key\n\nCreates a public key. Requires that you are authenticated via Basic Auth, or OAuth with at least ```write:public_key``` [scope](https://developer.github.com/apps/building-integrations/setting-up-and-registering-oauth-apps/about-scopes-for-oauth-apps/).","operationId":"_2Fuser_2Fkeys_20POST","parameters":[{"default":"xxxxxxxx","description":"https://developer.github.com/v3/#authentication\n\nOAuth2 token (sent as a parameter)","in":"query","name":"access_token","type":"string","x-swgg-apiKey":true,"x-swgg-descriptionLineList":["https://developer.github.com/v3/#authentication","","OAuth2 token (sent as a parameter)"]},{"default":"Awesome-Octocat-App","description":"https://developer.github.com/v3/index.html#user-agent-required\n\nAll API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems.","in":"header","name":"user-agent","required":true,"type":"string","x-swgg-descriptionLineList":["https://developer.github.com/v3/index.html#user-agent-required","","All API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems."]},{"collectionFormat":"csv","description":"https://developer.github.com/v3/media/\n\nCustom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't.","enum":["application/vnd.github.v3+json"],"in":"header","items":{"type":"string"},"name":"accept","type":"array","x-swgg-descriptionLineList":["https://developer.github.com/v3/media/","","Custom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't."]},{"description":"no description","in":"body","name":"body","schema":{"$ref":"#/definitions/_2Fuser_2Fkeys_20POST.body"}}],"responses":{"default":{"description":"default response"}},"tags":["github-users"],"x-swgg-descriptionLineList":["[User Public Keys](https://developer.github.com/v3/users/keys/#create-a-public-key) - Create a public key","","Creates a public key. Requires that you are authenticated via Basic Auth, or OAuth with at least ```write:public_key``` [scope](https://developer.github.com/apps/building-integrations/setting-up-and-registering-oauth-apps/about-scopes-for-oauth-apps/)."],"x-swgg-host":"api.github.com","x-swgg-schemes":["https"],"x-swgg-sortValue":"[User Public Keys](https://developer.github.com/v3/users/keys/#create-a-public-key) - Create a public key","x-swgg-tags0":"github-users"}},"/user/keys/{id}":{"delete":{"consumes":[],"description":"[User Public Keys](https://developer.github.com/v3/users/keys/#delete-a-public-key) - Delete a public key\n\nRemoves a public key. Requires that you are authenticated via Basic Auth or via OAuth with at least ```admin:public_key``` [scope](https://developer.github.com/apps/building-integrations/setting-up-and-registering-oauth-apps/about-scopes-for-oauth-apps/).","operationId":"_2Fuser_2Fkeys_2F_7Bid_7D_20DELETE","parameters":[{"default":"xxxxxxxx","description":"https://developer.github.com/v3/#authentication\n\nOAuth2 token (sent as a parameter)","in":"query","name":"access_token","type":"string","x-swgg-apiKey":true,"x-swgg-descriptionLineList":["https://developer.github.com/v3/#authentication","","OAuth2 token (sent as a parameter)"]},{"default":"Awesome-Octocat-App","description":"https://developer.github.com/v3/index.html#user-agent-required\n\nAll API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems.","in":"header","name":"user-agent","required":true,"type":"string","x-swgg-descriptionLineList":["https://developer.github.com/v3/index.html#user-agent-required","","All API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems."]},{"collectionFormat":"csv","description":"https://developer.github.com/v3/media/\n\nCustom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't.","enum":["application/vnd.github.v3+json"],"in":"header","items":{"type":"string"},"name":"accept","type":"array","x-swgg-descriptionLineList":["https://developer.github.com/v3/media/","","Custom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't."]},{"default":"id","description":"no description","in":"path","name":"id","required":true,"type":"string"}],"responses":{"default":{"description":"default response"}},"tags":["github-users"],"x-swgg-descriptionLineList":["[User Public Keys](https://developer.github.com/v3/users/keys/#delete-a-public-key) - Delete a public key","","Removes a public key. Requires that you are authenticated via Basic Auth or via OAuth with at least ```admin:public_key``` [scope](https://developer.github.com/apps/building-integrations/setting-up-and-registering-oauth-apps/about-scopes-for-oauth-apps/)."],"x-swgg-host":"api.github.com","x-swgg-schemes":["https"],"x-swgg-sortValue":"[User Public Keys](https://developer.github.com/v3/users/keys/#delete-a-public-key) - Delete a public key","x-swgg-tags0":"github-users"},"get":{"consumes":[],"description":"[User Public Keys](https://developer.github.com/v3/users/keys/#get-a-single-public-key) - Get a single public key\n\nView extended details for a single public key. Requires that you are authenticated via Basic Auth or via OAuth with at least ```read:public_key``` [scope](https://developer.github.com/apps/building-integrations/setting-up-and-registering-oauth-apps/about-scopes-for-oauth-apps/).","operationId":"_2Fuser_2Fkeys_2F_7Bid_7D_20GET","parameters":[{"default":"xxxxxxxx","description":"https://developer.github.com/v3/#authentication\n\nOAuth2 token (sent as a parameter)","in":"query","name":"access_token","type":"string","x-swgg-apiKey":true,"x-swgg-descriptionLineList":["https://developer.github.com/v3/#authentication","","OAuth2 token (sent as a parameter)"]},{"default":"Awesome-Octocat-App","description":"https://developer.github.com/v3/index.html#user-agent-required\n\nAll API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems.","in":"header","name":"user-agent","required":true,"type":"string","x-swgg-descriptionLineList":["https://developer.github.com/v3/index.html#user-agent-required","","All API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems."]},{"collectionFormat":"csv","description":"https://developer.github.com/v3/media/\n\nCustom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't.","enum":["application/vnd.github.v3+json"],"in":"header","items":{"type":"string"},"name":"accept","type":"array","x-swgg-descriptionLineList":["https://developer.github.com/v3/media/","","Custom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't."]},{"default":"id","description":"no description","in":"path","name":"id","required":true,"type":"string"}],"responses":{"default":{"description":"default response"}},"tags":["github-users"],"x-swgg-descriptionLineList":["[User Public Keys](https://developer.github.com/v3/users/keys/#get-a-single-public-key) - Get a single public key","","View extended details for a single public key. Requires that you are authenticated via Basic Auth or via OAuth with at least ```read:public_key``` [scope](https://developer.github.com/apps/building-integrations/setting-up-and-registering-oauth-apps/about-scopes-for-oauth-apps/)."],"x-swgg-host":"api.github.com","x-swgg-schemes":["https"],"x-swgg-sortValue":"[User Public Keys](https://developer.github.com/v3/users/keys/#get-a-single-public-key) - Get a single public key","x-swgg-tags0":"github-users"}},"/user/public_emails":{"get":{"consumes":[],"description":"[User Emails](https://developer.github.com/v3/users/emails/#list-public-email-addresses-for-a-user) - List public email addresses for a user\n\nLists your publicly visible email address, which you can set with the [Toggle primary email visibility](https://developer.github.com/v3/users/emails/#toggle-primary-email-visibility) endpoint. This endpoint is accessible with the ```user:email``` scope.","operationId":"_2Fuser_2Fpublic_emails_20GET","parameters":[{"default":"xxxxxxxx","description":"https://developer.github.com/v3/#authentication\n\nOAuth2 token (sent as a parameter)","in":"query","name":"access_token","type":"string","x-swgg-apiKey":true,"x-swgg-descriptionLineList":["https://developer.github.com/v3/#authentication","","OAuth2 token (sent as a parameter)"]},{"default":"Awesome-Octocat-App","description":"https://developer.github.com/v3/index.html#user-agent-required\n\nAll API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems.","in":"header","name":"user-agent","required":true,"type":"string","x-swgg-descriptionLineList":["https://developer.github.com/v3/index.html#user-agent-required","","All API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems."]},{"collectionFormat":"csv","description":"https://developer.github.com/v3/media/\n\nCustom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't.","enum":["application/vnd.github.v3+json"],"in":"header","items":{"type":"string"},"name":"accept","type":"array","x-swgg-descriptionLineList":["https://developer.github.com/v3/media/","","Custom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't."]}],"responses":{"default":{"description":"default response"}},"tags":["github-users"],"x-swgg-descriptionLineList":["[User Emails](https://developer.github.com/v3/users/emails/#list-public-email-addresses-for-a-user) - List public email addresses for a user","","Lists your publicly visible email address, which you can set with the [Toggle primary email visibility](https://developer.github.com/v3/users/emails/#toggle-primary-email-visibility) endpoint. This endpoint is accessible with the ```user:email``` scope."],"x-swgg-host":"api.github.com","x-swgg-schemes":["https"],"x-swgg-sortValue":"[User Emails](https://developer.github.com/v3/users/emails/#list-public-email-addresses-for-a-user) - List public email addresses for a user","x-swgg-tags0":"github-users"}},"/users":{"get":{"consumes":[],"description":"[Users](https://developer.github.com/v3/users/#get-all-users) - Get all users\n\nLists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.\n\nNote: Pagination is powered exclusively by the ```since``` parameter. Use the [Link header](https://developer.github.com/v3/#link-header) to get the URL for the next page of users.","operationId":"_2Fusers_20GET","parameters":[{"default":"xxxxxxxx","description":"https://developer.github.com/v3/#authentication\n\nOAuth2 token (sent as a parameter)","in":"query","name":"access_token","type":"string","x-swgg-apiKey":true,"x-swgg-descriptionLineList":["https://developer.github.com/v3/#authentication","","OAuth2 token (sent as a parameter)"]},{"default":"Awesome-Octocat-App","description":"https://developer.github.com/v3/index.html#user-agent-required\n\nAll API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems.","in":"header","name":"user-agent","required":true,"type":"string","x-swgg-descriptionLineList":["https://developer.github.com/v3/index.html#user-agent-required","","All API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems."]},{"collectionFormat":"csv","default":["application/vnd.github.hagar-preview+json"],"description":"https://developer.github.com/v3/media/\n\nCustom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't.","enum":["application/vnd.github.jean-grey-preview+json","application/vnd.github.hagar-preview+json","application/vnd.github.v3+json"],"in":"header","items":{"type":"string"},"name":"accept","required":true,"type":"array","x-swgg-descriptionLineList":["https://developer.github.com/v3/media/","","Custom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't."]},{"description":"The integer ID of the last User that you've seen.","in":"query","name":"since","type":"string","x-swgg-descriptionLineList":["The integer ID of the last User that you've seen."]}],"responses":{"default":{"description":"default response"}},"tags":["github-users"],"x-swgg-descriptionLineList":["[Users](https://developer.github.com/v3/users/#get-all-users) - Get all users","","Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.","","Note: Pagination is powered exclusively by the ```since``` parameter. Use the [Link header](https://developer.github.com/v3/#link-header) to get the URL for the next page of users."],"x-swgg-host":"api.github.com","x-swgg-schemes":["https"],"x-swgg-sortValue":"[Users](https://developer.github.com/v3/users/#get-all-users) - Get all users","x-swgg-tags0":"github-users"}},"/users/{username}":{"get":{"consumes":[],"description":"[Users](https://developer.github.com/v3/users/#get-a-single-user) - Get a single user\n\nProvides publicly available information about someone with a GitHub account.\n\nThe ```email``` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for ```email```, then it will have a value of ```null```. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://developer.github.com/v3/#authentication).\n\nThe Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see \"[Emails API](https://developer.github.com/v3/users/emails/)\".","operationId":"_2Fusers_2F_7Busername_7D_20GET","parameters":[{"default":"xxxxxxxx","description":"https://developer.github.com/v3/#authentication\n\nOAuth2 token (sent as a parameter)","in":"query","name":"access_token","type":"string","x-swgg-apiKey":true,"x-swgg-descriptionLineList":["https://developer.github.com/v3/#authentication","","OAuth2 token (sent as a parameter)"]},{"default":"Awesome-Octocat-App","description":"https://developer.github.com/v3/index.html#user-agent-required\n\nAll API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems.","in":"header","name":"user-agent","required":true,"type":"string","x-swgg-descriptionLineList":["https://developer.github.com/v3/index.html#user-agent-required","","All API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems."]},{"collectionFormat":"csv","default":["application/vnd.github.hagar-preview+json"],"description":"https://developer.github.com/v3/media/\n\nCustom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't.","enum":["application/vnd.github.jean-grey-preview+json","application/vnd.github.hagar-preview+json","application/vnd.github.v3+json"],"in":"header","items":{"type":"string"},"name":"accept","required":true,"type":"array","x-swgg-descriptionLineList":["https://developer.github.com/v3/media/","","Custom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't."]},{"default":"username","description":"no description","in":"path","name":"username","required":true,"type":"string"}],"responses":{"default":{"description":"default response"}},"tags":["github-users"],"x-swgg-descriptionLineList":["[Users](https://developer.github.com/v3/users/#get-a-single-user) - Get a single user","","Provides publicly available information about someone with a GitHub account.","","The ```email``` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for ```email```, then it will have a value of ```null```. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://developer.github.com/v3/#authentication).","","The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see \"[Emails API](https://developer.github.com/v3/users/emails/)\"."],"x-swgg-host":"api.github.com","x-swgg-schemes":["https"],"x-swgg-sortValue":"[Users](https://developer.github.com/v3/users/#get-a-single-user) - Get a single user","x-swgg-tags0":"github-users"}},"/users/{username}/followers":{"get":{"consumes":[],"description":"[User Followers](https://developer.github.com/v3/users/followers/#list-followers-of-a-user) - List followers of a user\n\nList a user's followers:","operationId":"_2Fusers_2F_7Busername_7D_2Ffollowers_20GET","parameters":[{"default":"xxxxxxxx","description":"https://developer.github.com/v3/#authentication\n\nOAuth2 token (sent as a parameter)","in":"query","name":"access_token","type":"string","x-swgg-apiKey":true,"x-swgg-descriptionLineList":["https://developer.github.com/v3/#authentication","","OAuth2 token (sent as a parameter)"]},{"default":"Awesome-Octocat-App","description":"https://developer.github.com/v3/index.html#user-agent-required\n\nAll API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems.","in":"header","name":"user-agent","required":true,"type":"string","x-swgg-descriptionLineList":["https://developer.github.com/v3/index.html#user-agent-required","","All API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems."]},{"collectionFormat":"csv","description":"https://developer.github.com/v3/media/\n\nCustom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't.","enum":["application/vnd.github.v3+json"],"in":"header","items":{"type":"string"},"name":"accept","type":"array","x-swgg-descriptionLineList":["https://developer.github.com/v3/media/","","Custom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't."]},{"default":"username","description":"no description","in":"path","name":"username","required":true,"type":"string"}],"responses":{"default":{"description":"default response"}},"tags":["github-users"],"x-swgg-descriptionLineList":["[User Followers](https://developer.github.com/v3/users/followers/#list-followers-of-a-user) - List followers of a user","","List a user's followers:"],"x-swgg-host":"api.github.com","x-swgg-schemes":["https"],"x-swgg-sortValue":"[User Followers](https://developer.github.com/v3/users/followers/#list-followers-of-a-user) - List followers of a user","x-swgg-tags0":"github-users"}},"/users/{username}/following":{"get":{"consumes":[],"description":"[User Followers](https://developer.github.com/v3/users/followers/#list-users-followed-by-another-user) - List users followed by another user\n\nList who a user is following:","operationId":"_2Fusers_2F_7Busername_7D_2Ffollowing_20GET","parameters":[{"default":"xxxxxxxx","description":"https://developer.github.com/v3/#authentication\n\nOAuth2 token (sent as a parameter)","in":"query","name":"access_token","type":"string","x-swgg-apiKey":true,"x-swgg-descriptionLineList":["https://developer.github.com/v3/#authentication","","OAuth2 token (sent as a parameter)"]},{"default":"Awesome-Octocat-App","description":"https://developer.github.com/v3/index.html#user-agent-required\n\nAll API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems.","in":"header","name":"user-agent","required":true,"type":"string","x-swgg-descriptionLineList":["https://developer.github.com/v3/index.html#user-agent-required","","All API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems."]},{"collectionFormat":"csv","description":"https://developer.github.com/v3/media/\n\nCustom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't.","enum":["application/vnd.github.v3+json"],"in":"header","items":{"type":"string"},"name":"accept","type":"array","x-swgg-descriptionLineList":["https://developer.github.com/v3/media/","","Custom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't."]},{"default":"username","description":"no description","in":"path","name":"username","required":true,"type":"string"}],"responses":{"default":{"description":"default response"}},"tags":["github-users"],"x-swgg-descriptionLineList":["[User Followers](https://developer.github.com/v3/users/followers/#list-users-followed-by-another-user) - List users followed by another user","","List who a user is following:"],"x-swgg-host":"api.github.com","x-swgg-schemes":["https"],"x-swgg-sortValue":"[User Followers](https://developer.github.com/v3/users/followers/#list-users-followed-by-another-user) - List users followed by another user","x-swgg-tags0":"github-users"}},"/users/{username}/following/{target_user}":{"get":{"consumes":[],"description":"[User Followers](https://developer.github.com/v3/users/followers/#check-if-one-user-follows-another) - Check if one user follows another","operationId":"_2Fusers_2F_7Busername_7D_2Ffollowing_2F_7Btarget_user_7D_20GET","parameters":[{"default":"xxxxxxxx","description":"https://developer.github.com/v3/#authentication\n\nOAuth2 token (sent as a parameter)","in":"query","name":"access_token","type":"string","x-swgg-apiKey":true,"x-swgg-descriptionLineList":["https://developer.github.com/v3/#authentication","","OAuth2 token (sent as a parameter)"]},{"default":"Awesome-Octocat-App","description":"https://developer.github.com/v3/index.html#user-agent-required\n\nAll API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems.","in":"header","name":"user-agent","required":true,"type":"string","x-swgg-descriptionLineList":["https://developer.github.com/v3/index.html#user-agent-required","","All API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems."]},{"collectionFormat":"csv","description":"https://developer.github.com/v3/media/\n\nCustom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't.","enum":["application/vnd.github.v3+json"],"in":"header","items":{"type":"string"},"name":"accept","type":"array","x-swgg-descriptionLineList":["https://developer.github.com/v3/media/","","Custom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't."]},{"default":"username","description":"no description","in":"path","name":"username","required":true,"type":"string"},{"default":"target_user","description":"no description","in":"path","name":"target_user","required":true,"type":"string"}],"responses":{"default":{"description":"default response"}},"tags":["github-users"],"x-swgg-descriptionLineList":["[User Followers](https://developer.github.com/v3/users/followers/#check-if-one-user-follows-another) - Check if one user follows another"],"x-swgg-host":"api.github.com","x-swgg-schemes":["https"],"x-swgg-sortValue":"[User Followers](https://developer.github.com/v3/users/followers/#check-if-one-user-follows-another) - Check if one user follows another","x-swgg-tags0":"github-users"}},"/users/{username}/gpg_keys":{"get":{"consumes":[],"description":"[User GPG Keys](https://developer.github.com/v3/users/gpg_keys/#list-gpg-keys-for-a-user) - List GPG keys for a user","operationId":"_2Fusers_2F_7Busername_7D_2Fgpg_keys_20GET","parameters":[{"default":"xxxxxxxx","description":"https://developer.github.com/v3/#authentication\n\nOAuth2 token (sent as a parameter)","in":"query","name":"access_token","type":"string","x-swgg-apiKey":true,"x-swgg-descriptionLineList":["https://developer.github.com/v3/#authentication","","OAuth2 token (sent as a parameter)"]},{"default":"Awesome-Octocat-App","description":"https://developer.github.com/v3/index.html#user-agent-required\n\nAll API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems.","in":"header","name":"user-agent","required":true,"type":"string","x-swgg-descriptionLineList":["https://developer.github.com/v3/index.html#user-agent-required","","All API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems."]},{"collectionFormat":"csv","description":"https://developer.github.com/v3/media/\n\nCustom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't.","enum":["application/vnd.github.v3+json"],"in":"header","items":{"type":"string"},"name":"accept","type":"array","x-swgg-descriptionLineList":["https://developer.github.com/v3/media/","","Custom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't."]},{"default":"username","description":"no description","in":"path","name":"username","required":true,"type":"string"}],"responses":{"default":{"description":"default response"}},"tags":["github-users"],"x-swgg-descriptionLineList":["[User GPG Keys](https://developer.github.com/v3/users/gpg_keys/#list-gpg-keys-for-a-user) - List GPG keys for a user"],"x-swgg-host":"api.github.com","x-swgg-schemes":["https"],"x-swgg-sortValue":"[User GPG Keys](https://developer.github.com/v3/users/gpg_keys/#list-gpg-keys-for-a-user) - List GPG keys for a user","x-swgg-tags0":"github-users"}},"/users/{username}/hovercard":{"get":{"consumes":[],"description":"[Users](https://developer.github.com/v3/users/#get-contextual-information-about-a-user) - Get contextual information about a user\n\n**Note:** You can now retrieve someone's hovercard information in different contexts using the Hovercard API. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-03-21-hovercard-api-preview) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.hagar-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).\n\nProvides hovercard information when authenticated through basic auth or OAuth with the ```repo``` scope. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.","operationId":"_2Fusers_2F_7Busername_7D_2Fhovercard_20GET","parameters":[{"default":"xxxxxxxx","description":"https://developer.github.com/v3/#authentication\n\nOAuth2 token (sent as a parameter)","in":"query","name":"access_token","type":"string","x-swgg-apiKey":true,"x-swgg-descriptionLineList":["https://developer.github.com/v3/#authentication","","OAuth2 token (sent as a parameter)"]},{"default":"Awesome-Octocat-App","description":"https://developer.github.com/v3/index.html#user-agent-required\n\nAll API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems.","in":"header","name":"user-agent","required":true,"type":"string","x-swgg-descriptionLineList":["https://developer.github.com/v3/index.html#user-agent-required","","All API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems."]},{"collectionFormat":"csv","default":["application/vnd.github.hagar-preview+json"],"description":"https://developer.github.com/v3/media/\n\nCustom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't.","enum":["application/vnd.github.jean-grey-preview+json","application/vnd.github.hagar-preview+json","application/vnd.github.v3+json"],"in":"header","items":{"type":"string"},"name":"accept","required":true,"type":"array","x-swgg-descriptionLineList":["https://developer.github.com/v3/media/","","Custom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't."]},{"default":"username","description":"no description","in":"path","name":"username","required":true,"type":"string"},{"description":"Identifies which additional information you'd like to receive about the person's hovercard. Can be ```organization```, ```repository```, ```issue```, ```pull_request```. **Required** when using ```subject_id```.","in":"query","name":"subject_type","required":true,"type":"string","x-swgg-descriptionLineList":["Identifies which additional information you'd like to receive about the person's hovercard. Can be ```organization```, ```repository```, ```issue```, ```pull_request```. **Required** when using ```subject_id```."]},{"description":"Uses the ID for the ```subject_type``` you specified. **Required** when using ```subject_type```.","in":"query","name":"subject_id","required":true,"type":"string","x-swgg-descriptionLineList":["Uses the ID for the ```subject_type``` you specified. **Required** when using ```subject_type```."]}],"responses":{"default":{"description":"default response"}},"tags":["github-users"],"x-swgg-descriptionLineList":["[Users](https://developer.github.com/v3/users/#get-contextual-information-about-a-user) - Get contextual information about a user","","**Note:** You can now retrieve someone's hovercard information in different contexts using the Hovercard API. This feature is currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2018-03-21-hovercard-api-preview) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.hagar-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","","Provides hovercard information when authenticated through basic auth or OAuth with the ```repo``` scope. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations."],"x-swgg-host":"api.github.com","x-swgg-schemes":["https"],"x-swgg-sortValue":"[Users](https://developer.github.com/v3/users/#get-contextual-information-about-a-user) - Get contextual information about a user","x-swgg-tags0":"github-users"}},"/users/{username}/keys":{"get":{"consumes":[],"description":"[User Public Keys](https://developer.github.com/v3/users/keys/#list-public-keys-for-a-user) - List public keys for a user","operationId":"_2Fusers_2F_7Busername_7D_2Fkeys_20GET","parameters":[{"default":"xxxxxxxx","description":"https://developer.github.com/v3/#authentication\n\nOAuth2 token (sent as a parameter)","in":"query","name":"access_token","type":"string","x-swgg-apiKey":true,"x-swgg-descriptionLineList":["https://developer.github.com/v3/#authentication","","OAuth2 token (sent as a parameter)"]},{"default":"Awesome-Octocat-App","description":"https://developer.github.com/v3/index.html#user-agent-required\n\nAll API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems.","in":"header","name":"user-agent","required":true,"type":"string","x-swgg-descriptionLineList":["https://developer.github.com/v3/index.html#user-agent-required","","All API requests MUST include a valid ```User-Agent``` header. Requests with no ```User-Agent``` header will be rejected. We request that you use your GitHub username, or the name of your application, for the ```User-Agent``` header value. This allows us to contact you if there are problems."]},{"collectionFormat":"csv","description":"https://developer.github.com/v3/media/\n\nCustom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't.","enum":["application/vnd.github.v3+json"],"in":"header","items":{"type":"string"},"name":"accept","type":"array","x-swgg-descriptionLineList":["https://developer.github.com/v3/media/","","Custom media types are used in the API to let consumers choose the format of the data they wish to receive. This is done by adding one or more of the following types to the ```Accept``` header when you make a request. Media types are specific to resources, allowing them to change independently and support formats that other resources don't."]},{"default":"username","description":"no description","in":"path","name":"username","required":true,"type":"string"}],"responses":{"default":{"description":"default response"}},"tags":["github-users"],"x-swgg-descriptionLineList":["[User Public Keys](https://developer.github.com/v3/users/keys/#list-public-keys-for-a-user) - List public keys for a user"],"x-swgg-host":"api.github.com","x-swgg-schemes":["https"],"x-swgg-sortValue":"[User Public Keys](https://developer.github.com/v3/users/keys/#list-public-keys-for-a-user) - List public keys for a user","x-swgg-tags0":"github-users"}}},"schemes":["https"],"securityDefinitions":{},"swagger":"2.0","tags":[{"description":"# [Activity](https://developer.github.com/v3/activity/)\n\nServing up the 'social' in Social Coding, the Activity APIs provide access to notifications, subscriptions, and timelines.\n\n# [Event Types & Payloads](https://developer.github.com/v3/activity/events/types/)\n\nEach event has a similar JSON schema, but a unique ```payload``` object that is determined by its event type.\n\nEvent names are used by [repository webhooks](https://developer.github.com/v3/repos/hooks/) to specify which events the webhook should receive. The included payloads below are from webhook deliveries but match events returned by the [Events API](https://developer.github.com/v3/activity/events/) (except where noted). The Events API uses the CamelCased name (e.g. ```CommitCommentEvent```) in the ```type``` field of an event object and does not include the ```repository``` or ```sender``` fields in the event payload object.\n\n**Note:** Some of these events may not be rendered in timelines, they're only created for various internal and webhook purposes.\n- [CommitCommentEvent](https://developer.github.com/v3/activity/events/types/#commitcommentevent)\n- [CreateEvent](https://developer.github.com/v3/activity/events/types/#createevent)\n- [DeleteEvent](https://developer.github.com/v3/activity/events/types/#deleteevent)\n- [DeploymentEvent](https://developer.github.com/v3/activity/events/types/#deploymentevent)\n- [DeploymentStatusEvent](https://developer.github.com/v3/activity/events/types/#deploymentstatusevent)\n- [DownloadEvent](https://developer.github.com/v3/activity/events/types/#downloadevent)\n- [FollowEvent](https://developer.github.com/v3/activity/events/types/#followevent)\n- [ForkEvent](https://developer.github.com/v3/activity/events/types/#forkevent)\n- [ForkApplyEvent](https://developer.github.com/v3/activity/events/types/#forkapplyevent)\n- [GistEvent](https://developer.github.com/v3/activity/events/types/#gistevent)\n- [GollumEvent](https://developer.github.com/v3/activity/events/types/#gollumevent)\n- [InstallationEvent](https://developer.github.com/v3/activity/events/types/#installationevent)\n- [InstallationRepositoriesEvent](https://developer.github.com/v3/activity/events/types/#installationrepositoriesevent)\n- [IssueCommentEvent](https://developer.github.com/v3/activity/events/types/#issuecommentevent)\n- [IssuesEvent](https://developer.github.com/v3/activity/events/types/#issuesevent)\n- [LabelEvent](https://developer.github.com/v3/activity/events/types/#labelevent)\n- [MarketplacePurchaseEvent](https://developer.github.com/v3/activity/events/types/#marketplacepurchaseevent)\n- [MemberEvent](https://developer.github.com/v3/activity/events/types/#memberevent)\n- [MembershipEvent](https://developer.github.com/v3/activity/events/types/#membershipevent)\n- [MilestoneEvent](https://developer.github.com/v3/activity/events/types/#milestoneevent)\n- [OrganizationEvent](https://developer.github.com/v3/activity/events/types/#organizationevent)\n- [OrgBlockEvent](https://developer.github.com/v3/activity/events/types/#orgblockevent)\n- [PageBuildEvent](https://developer.github.com/v3/activity/events/types/#pagebuildevent)\n- [ProjectCardEvent](https://developer.github.com/v3/activity/events/types/#projectcardevent)\n- [ProjectColumnEvent](https://developer.github.com/v3/activity/events/types/#projectcolumnevent)\n- [ProjectEvent](https://developer.github.com/v3/activity/events/types/#projectevent)\n- [PublicEvent](https://developer.github.com/v3/activity/events/types/#publicevent)\n- [PullRequestEvent](https://developer.github.com/v3/activity/events/types/#pullrequestevent)\n- [PullRequestReviewEvent](https://developer.github.com/v3/activity/events/types/#pullrequestreviewevent)\n- [PullRequestReviewCommentEvent](https://developer.github.com/v3/activity/events/types/#pullrequestreviewcommentevent)\n- [PushEvent](https://developer.github.com/v3/activity/events/types/#pushevent)\n- [ReleaseEvent](https://developer.github.com/v3/activity/events/types/#releaseevent)\n- [RepositoryEvent](https://developer.github.com/v3/activity/events/types/#repositoryevent)\n- [StatusEvent](https://developer.github.com/v3/activity/events/types/#statusevent)\n- [TeamEvent](https://developer.github.com/v3/activity/events/types/#teamevent)\n- [TeamAddEvent](https://developer.github.com/v3/activity/events/types/#teamaddevent)\n- [WatchEvent](https://developer.github.com/v3/activity/events/types/#watchevent)\n\n# [Events](https://developer.github.com/v3/activity/events/)\n\nThis is a read-only API to the GitHub events. These events power the various activity streams on the site.\n- [List public events](https://developer.github.com/v3/activity/events/#list-public-events)\n- [List repository events](https://developer.github.com/v3/activity/events/#list-repository-events)\n- [List issue events for a repository](https://developer.github.com/v3/activity/events/#list-issue-events-for-a-repository)\n- [List public events for a network of repositories](https://developer.github.com/v3/activity/events/#list-public-events-for-a-network-of-repositories)\n- [List public events for an organization](https://developer.github.com/v3/activity/events/#list-public-events-for-an-organization)\n- [List events that a user has received](https://developer.github.com/v3/activity/events/#list-events-that-a-user-has-received)\n- [List public events that a user has received](https://developer.github.com/v3/activity/events/#list-public-events-that-a-user-has-received)\n- [List events performed by a user](https://developer.github.com/v3/activity/events/#list-events-performed-by-a-user)\n- [List public events performed by a user](https://developer.github.com/v3/activity/events/#list-public-events-performed-by-a-user)\n- [List events for an organization](https://developer.github.com/v3/activity/events/#list-events-for-an-organization)\n\nEvents are optimized for polling with the \"ETag\" header.  If no new events have been triggered, you will see a \"304 Not Modified\" response, and your current rate limit will be untouched.  There is also an \"X-Poll-Interval\" header that specifies how often (in seconds) you are allowed to poll.  In times of high server load, the time may increase.  Please obey the header.\n```\ncurl -I https://api.github.com/users/tater/events\nHTTP/1.1 200 OK\nX-Poll-Interval: 60\nETag: \"a18c3bded88eb5dbb5c849a489412bf3\"\n# The quotes around the ETag value are important\ncurl -I https://api.github.com/users/tater/events \\\n   -H 'If-None-Match: \"a18c3bded88eb5dbb5c849a489412bf3\"'\nHTTP/1.1 304 Not Modified\nX-Poll-Interval: 60\n```\n\n\nEvents support [pagination](https://developer.github.com/v3/#pagination), however the ```per_page``` option is unsupported. The fixed page size is 30 items. Fetching up to ten pages is supported, for a total of 300 events.\n\nOnly events created within the past 90 days will be included in timelines. Events older than 90 days will not be included (even if the total number of events in the timeline is less than 300).\n\nAll Events have the same response format:\n```\nStatus: 200 OK\nLink: &lt;https://api.github.com/resource?page=2&gt;; rel=\"next\",\n      &lt;https://api.github.com/resource?page=5&gt;; rel=\"last\"\n```\n\n```\n[\n  {\n    \"type\": \"Event\",\n    \"public\": true,\n    \"payload\": {\n    },\n    \"repo\": {\n      \"id\": 3,\n      \"name\": \"octocat/Hello-World\",\n      \"url\": \"https://api.github.com/repos/octocat/Hello-World\"\n    },\n    \"actor\": {\n      \"id\": 1,\n      \"login\": \"octocat\",\n      \"gravatar_id\": \"\",\n      \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n      \"url\": \"https://api.github.com/users/octocat\"\n    },\n    \"org\": {\n      \"id\": 1,\n      \"login\": \"github\",\n      \"gravatar_id\": \"\",\n      \"url\": \"https://api.github.com/orgs/github\",\n      \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\"\n    },\n    \"created_at\": \"2011-09-06T17:26:27Z\",\n    \"id\": \"12345\"\n  }\n]\n```\n\n# [Feeds](https://developer.github.com/v3/activity/feeds/)\n\nno description\n\n# [Notifications](https://developer.github.com/v3/activity/notifications/)\n\nUsers receive notifications for conversations in repositories they watch including:\n- Issues and their comments\n- Pull Requests and their comments\n- Comments on any commits\n\nNotifications are also sent for conversations in unwatched repositories when the user is involved including:\n- **@mentions**\n- Issue assignments\n- Commits the user authors or commits\n- Any discussion in which the user actively participates\n\nAll Notification API calls require the ```notifications``` or ```repo``` API scopes.  Doing this will give read-only access to some Issue/Commit content. You will still need the \"repo\" scope to access Issues and Commits from their respective endpoints.\n\nNotifications come back as \"threads\".  A Thread contains information about the current discussion of an Issue/PullRequest/Commit.\n\nNotifications are optimized for polling with the \"Last-Modified\" header.  If there are no new notifications, you will see a \"304 Not Modified\" response, leaving your current rate limit untouched.  There is an \"X-Poll-Interval\" header that specifies how often (in seconds) you are allowed to poll.  In times of high server load, the time may increase.  Please obey the header.\n```\n# Add authentication to your requests\ncurl -I https://api.github.com/notifications\nHTTP/1.1 200 OK\nLast-Modified: Thu, 25 Oct 2012 15:16:27 GMT\nX-Poll-Interval: 60\n# Pass the Last-Modified header exactly\ncurl -I https://api.github.com/notifications\n   -H \"If-Modified-Since: Thu, 25 Oct 2012 15:16:27 GMT\"\nHTTP/1.1 304 Not Modified\nX-Poll-Interval: 60\n```\n\n# [Starring](https://developer.github.com/v3/activity/starring/)\n\nRepository Starring is a feature that lets users bookmark repositories.  Stars are shown next to repositories to show an approximate level of interest.  Stars have no effect on notifications or the activity feed.  For that, see [Repository Watching](https://developer.github.com/v3/activity/watching).\n\n####  Starring vs. Watching\n\nIn August 2012, we [changed the way watching works](https://github.com/blog/1204-notifications-stars) on GitHub.  Many API client applications may be using the original \"watcher\" endpoints for accessing this data. You can now start using the \"star\" endpoints instead (described below). Check out the [Watcher API Change post](https://developer.github.com/changes/2012-09-05-watcher-api/) for more details.\n\n# [Watching](https://developer.github.com/v3/activity/watching/)\n\nWatching a Repository registers the user to receive notifications on new discussions, as well as events in the user's activity feed.  See [Repository Starring](https://developer.github.com/v3/activity/starring) for simple repository bookmarks.\n\n####  Watching vs. Starring\n\nIn August 2012, we [changed the way watching works](https://github.com/blog/1204-notifications-stars) on GitHub.  At the time of that change, many API clients were already using the existing \"watcher\" endpoints to access starring data. To avoid breaking those applications, the legacy \"watcher\" endpoints continue to provide starring data.\n\nTo provide access to watching data, the v3 Watcher API uses the \"subscription\" endpoints described below. Check out the [Watcher API Change post](https://developer.github.com/changes/2012-09-05-watcher-api/) for more details.","name":"github-activity","x-swgg-descriptionLineList":["# [Activity](https://developer.github.com/v3/activity/)","","Serving up the 'social' in Social Coding, the Activity APIs provide access to notifications, subscriptions, and timelines.","","# [Event Types & Payloads](https://developer.github.com/v3/activity/events/types/)","","Each event has a similar JSON schema, but a unique ```payload``` object that is determined by its event type.","","Event names are used by [repository webhooks](https://developer.github.com/v3/repos/hooks/) to specify which events the webhook should receive. The included payloads below are from webhook deliveries but match events returned by the [Events API](https://developer.github.com/v3/activity/events/) (except where noted). The Events API uses the CamelCased name (e.g. ```CommitCommentEvent```) in the ```type``` field of an event object and does not include the ```repository``` or ```sender``` fields in the event payload object.","","**Note:** Some of these events may not be rendered in timelines, they're only created for various internal and webhook purposes.","- [CommitCommentEvent](https://developer.github.com/v3/activity/events/types/#commitcommentevent)","- [CreateEvent](https://developer.github.com/v3/activity/events/types/#createevent)","- [DeleteEvent](https://developer.github.com/v3/activity/events/types/#deleteevent)","- [DeploymentEvent](https://developer.github.com/v3/activity/events/types/#deploymentevent)","- [DeploymentStatusEvent](https://developer.github.com/v3/activity/events/types/#deploymentstatusevent)","- [DownloadEvent](https://developer.github.com/v3/activity/events/types/#downloadevent)","- [FollowEvent](https://developer.github.com/v3/activity/events/types/#followevent)","- [ForkEvent](https://developer.github.com/v3/activity/events/types/#forkevent)","- [ForkApplyEvent](https://developer.github.com/v3/activity/events/types/#forkapplyevent)","- [GistEvent](https://developer.github.com/v3/activity/events/types/#gistevent)","- [GollumEvent](https://developer.github.com/v3/activity/events/types/#gollumevent)","- [InstallationEvent](https://developer.github.com/v3/activity/events/types/#installationevent)","- [InstallationRepositoriesEvent](https://developer.github.com/v3/activity/events/types/#installationrepositoriesevent)","- [IssueCommentEvent](https://developer.github.com/v3/activity/events/types/#issuecommentevent)","- [IssuesEvent](https://developer.github.com/v3/activity/events/types/#issuesevent)","- [LabelEvent](https://developer.github.com/v3/activity/events/types/#labelevent)","- [MarketplacePurchaseEvent](https://developer.github.com/v3/activity/events/types/#marketplacepurchaseevent)","- [MemberEvent](https://developer.github.com/v3/activity/events/types/#memberevent)","- [MembershipEvent](https://developer.github.com/v3/activity/events/types/#membershipevent)","- [MilestoneEvent](https://developer.github.com/v3/activity/events/types/#milestoneevent)","- [OrganizationEvent](https://developer.github.com/v3/activity/events/types/#organizationevent)","- [OrgBlockEvent](https://developer.github.com/v3/activity/events/types/#orgblockevent)","- [PageBuildEvent](https://developer.github.com/v3/activity/events/types/#pagebuildevent)","- [ProjectCardEvent](https://developer.github.com/v3/activity/events/types/#projectcardevent)","- [ProjectColumnEvent](https://developer.github.com/v3/activity/events/types/#projectcolumnevent)","- [ProjectEvent](https://developer.github.com/v3/activity/events/types/#projectevent)","- [PublicEvent](https://developer.github.com/v3/activity/events/types/#publicevent)","- [PullRequestEvent](https://developer.github.com/v3/activity/events/types/#pullrequestevent)","- [PullRequestReviewEvent](https://developer.github.com/v3/activity/events/types/#pullrequestreviewevent)","- [PullRequestReviewCommentEvent](https://developer.github.com/v3/activity/events/types/#pullrequestreviewcommentevent)","- [PushEvent](https://developer.github.com/v3/activity/events/types/#pushevent)","- [ReleaseEvent](https://developer.github.com/v3/activity/events/types/#releaseevent)","- [RepositoryEvent](https://developer.github.com/v3/activity/events/types/#repositoryevent)","- [StatusEvent](https://developer.github.com/v3/activity/events/types/#statusevent)","- [TeamEvent](https://developer.github.com/v3/activity/events/types/#teamevent)","- [TeamAddEvent](https://developer.github.com/v3/activity/events/types/#teamaddevent)","- [WatchEvent](https://developer.github.com/v3/activity/events/types/#watchevent)","","# [Events](https://developer.github.com/v3/activity/events/)","","This is a read-only API to the GitHub events. These events power the various activity streams on the site.","- [List public events](https://developer.github.com/v3/activity/events/#list-public-events)","- [List repository events](https://developer.github.com/v3/activity/events/#list-repository-events)","- [List issue events for a repository](https://developer.github.com/v3/activity/events/#list-issue-events-for-a-repository)","- [List public events for a network of repositories](https://developer.github.com/v3/activity/events/#list-public-events-for-a-network-of-repositories)","- [List public events for an organization](https://developer.github.com/v3/activity/events/#list-public-events-for-an-organization)","- [List events that a user has received](https://developer.github.com/v3/activity/events/#list-events-that-a-user-has-received)","- [List public events that a user has received](https://developer.github.com/v3/activity/events/#list-public-events-that-a-user-has-received)","- [List events performed by a user](https://developer.github.com/v3/activity/events/#list-events-performed-by-a-user)","- [List public events performed by a user](https://developer.github.com/v3/activity/events/#list-public-events-performed-by-a-user)","- [List events for an organization](https://developer.github.com/v3/activity/events/#list-events-for-an-organization)","","Events are optimized for polling with the \"ETag\" header.  If no new events have been triggered, you will see a \"304 Not Modified\" response, and your current rate limit will be untouched.  There is also an \"X-Poll-Interval\" header that specifies how often (in seconds) you are allowed to poll.  In times of high server load, the time may increase.  Please obey the header.","```","curl -I https://api.github.com/users/tater/events","HTTP/1.1 200 OK","X-Poll-Interval: 60","ETag: \"a18c3bded88eb5dbb5c849a489412bf3\"","# The quotes around the ETag value are important","curl -I https://api.github.com/users/tater/events \\","   -H 'If-None-Match: \"a18c3bded88eb5dbb5c849a489412bf3\"'","HTTP/1.1 304 Not Modified","X-Poll-Interval: 60","```","","","Events support [pagination](https://developer.github.com/v3/#pagination), however the ```per_page``` option is unsupported. The fixed page size is 30 items. Fetching up to ten pages is supported, for a total of 300 events.","","Only events created within the past 90 days will be included in timelines. Events older than 90 days will not be included (even if the total number of events in the timeline is less than 300).","","All Events have the same response format:","```","Status: 200 OK","Link: &lt;https://api.github.com/resource?page=2&gt;; rel=\"next\",","      &lt;https://api.github.com/resource?page=5&gt;; rel=\"last\"","```","","```","[","  {","    \"type\": \"Event\",","    \"public\": true,","    \"payload\": {","    },","    \"repo\": {","      \"id\": 3,","      \"name\": \"octocat/Hello-World\",","      \"url\": \"https://api.github.com/repos/octocat/Hello-World\"","    },","    \"actor\": {","      \"id\": 1,","      \"login\": \"octocat\",","      \"gravatar_id\": \"\",","      \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",","      \"url\": \"https://api.github.com/users/octocat\"","    },","    \"org\": {","      \"id\": 1,","      \"login\": \"github\",","      \"gravatar_id\": \"\",","      \"url\": \"https://api.github.com/orgs/github\",","      \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\"","    },","    \"created_at\": \"2011-09-06T17:26:27Z\",","    \"id\": \"12345\"","  }","]","```","","# [Feeds](https://developer.github.com/v3/activity/feeds/)","","no description","","# [Notifications](https://developer.github.com/v3/activity/notifications/)","","Users receive notifications for conversations in repositories they watch including:","- Issues and their comments","- Pull Requests and their comments","- Comments on any commits","","Notifications are also sent for conversations in unwatched repositories when the user is involved including:","- **@mentions**","- Issue assignments","- Commits the user authors or commits","- Any discussion in which the user actively participates","","All Notification API calls require the ```notifications``` or ```repo``` API scopes.  Doing this will give read-only access to some Issue/Commit content. You will still need the \"repo\" scope to access Issues and Commits from their respective endpoints.","","Notifications come back as \"threads\".  A Thread contains information about the current discussion of an Issue/PullRequest/Commit.","","Notifications are optimized for polling with the \"Last-Modified\" header.  If there are no new notifications, you will see a \"304 Not Modified\" response, leaving your current rate limit untouched.  There is an \"X-Poll-Interval\" header that specifies how often (in seconds) you are allowed to poll.  In times of high server load, the time may increase.  Please obey the header.","```","# Add authentication to your requests","curl -I https://api.github.com/notifications","HTTP/1.1 200 OK","Last-Modified: Thu, 25 Oct 2012 15:16:27 GMT","X-Poll-Interval: 60","# Pass the Last-Modified header exactly","curl -I https://api.github.com/notifications","   -H \"If-Modified-Since: Thu, 25 Oct 2012 15:16:27 GMT\"","HTTP/1.1 304 Not Modified","X-Poll-Interval: 60","```","","# [Starring](https://developer.github.com/v3/activity/starring/)","","Repository Starring is a feature that lets users bookmark repositories.  Stars are shown next to repositories to show an approximate level of interest.  Stars have no effect on notifications or the activity feed.  For that, see [Repository Watching](https://developer.github.com/v3/activity/watching).","","####  Starring vs. Watching","","In August 2012, we [changed the way watching works](https://github.com/blog/1204-notifications-stars) on GitHub.  Many API client applications may be using the original \"watcher\" endpoints for accessing this data. You can now start using the \"star\" endpoints instead (described below). Check out the [Watcher API Change post](https://developer.github.com/changes/2012-09-05-watcher-api/) for more details.","","# [Watching](https://developer.github.com/v3/activity/watching/)","","Watching a Repository registers the user to receive notifications on new discussions, as well as events in the user's activity feed.  See [Repository Starring](https://developer.github.com/v3/activity/starring) for simple repository bookmarks.","","####  Watching vs. Starring","","In August 2012, we [changed the way watching works](https://github.com/blog/1204-notifications-stars) on GitHub.  At the time of that change, many API clients were already using the existing \"watcher\" endpoints to access starring data. To avoid breaking those applications, the legacy \"watcher\" endpoints continue to provide starring data.","","To provide access to watching data, the v3 Watcher API uses the \"subscription\" endpoints described below. Check out the [Watcher API Change post](https://developer.github.com/changes/2012-09-05-watcher-api/) for more details."]},{"description":"# [GitHub Apps](https://developer.github.com/v3/apps/)\n\nFor information on how to authenticate as a GitHub App, see \"[Authentication Options for GitHub Apps](https://developer.github.com/apps/building-github-apps/authentication-options-for-github-apps#authenticating-as-a-github-app).\"\n\n**Note:** To access the API with your integration, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` Header for your requests.\n\n```\napplication/vnd.github.machine-man-preview+json\n```\n\n# [GitHub App Permissions](https://developer.github.com/v3/apps/permissions/)\n\n**Note:** To access the API with your integration, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` Header for your requests.\n\n```\napplication/vnd.github.machine-man-preview+json\n```\n\nGitHub Apps are created with a set of permissions. These define what resources the GitHub App can access via the API. For more information, see \"[Permissions for GitHub Apps](https://developer.github.com/apps/building-github-apps/permissions-for-github-apps/).\"\n\n# [GitHub Apps: Available Endpoints](https://developer.github.com/v3/apps/available-endpoints/)\n\n**Note:** To access the API with your integration, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` Header for your requests.\n\n```\napplication/vnd.github.machine-man-preview+json\n```\n\nThe following endpoints are available for use by GitHub Apps. For more information, see \"[GitHub Apps](https://developer.github.com/apps/building-github-apps/).\"\n\n#### Users\n- [Get a single user](https://developer.github.com/v3/users/#get-a-single-user)\n- [Get all users](https://developer.github.com/v3/users/#get-all-users)\n\n#### Miscellaneous\n- [Emojis](https://developer.github.com/v3/misc/#emojis)\n\n#### Rate Limit\n- [Get your current rate limit status](https://developer.github.com/v3/rate_limit/#get-your-current-rate-limit-status)\n\n#### Public Keys\n- [List public keys for a user](https://developer.github.com/v3/users/keys/#list-public-keys-for-a-user)\n\n#### GPG Keys\n- [List GPG keys for a user](https://developer.github.com/v3/users/gpg_keys/#list-gpg-keys-for-a-user)\n\n#### Followers\n- [List followers of a user](https://developer.github.com/v3/users/followers/#list-followers-of-a-user)\n- [List users followed by another user](https://developer.github.com/v3/users/followers/#list-users-followed-by-another-user)\n- [Check if one user follows another](https://developer.github.com/v3/users/followers/#check-if-one-user-follows-another)\n\n#### Reactions\n- [List reactions for a commit comment](https://developer.github.com/v3/reactions/#list-reactions-for-a-commit-comment)\n- [List reactions for an issue](https://developer.github.com/v3/reactions/#list-reactions-for-an-issue)\n- [List reactions for an issue comment](https://developer.github.com/v3/reactions/#list-reactions-for-an-issue-comment)\n- [List reactions for a pull request review comment](https://developer.github.com/v3/reactions/#list-reactions-for-a-pull-request-review-comment)\n- [List reactions for a team discussion](https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion)\n- [List reactions for a team discussion comment](https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-comment)\n\n#### Codes of Conduct\n- [List all codes of conduct](https://developer.github.com/v3/codes_of_conduct/#list-all-codes-of-conduct)\n- [Get an individual code of conduct](https://developer.github.com/v3/codes_of_conduct/#get-an-individual-code-of-conduct)\n- [Get a repository's code of conduct](https://developer.github.com/v3/codes_of_conduct/#get-a-repositorys-code-of-conduct)\n- [Get the contents of a repository's code of conduct](https://developer.github.com/v3/codes_of_conduct/#get-the-contents-of-a-repositorys-code-of-conduct)\n\n#### Watching\n- [List watchers](https://developer.github.com/v3/activity/watching/#list-watchers)\n\n#### Feeds\n- [List Feeds](https://developer.github.com/v3/activity/feeds/#list-feeds)\n\n#### Starring\n- [List Stargazers](https://developer.github.com/v3/activity/starring/#list-stargazers)\n\n#### Events\n- [List public events](https://developer.github.com/v3/activity/events/#list-public-events)\n- [List repository events](https://developer.github.com/v3/activity/events/#list-repository-events)\n- [List public events for a network of repositories](https://developer.github.com/v3/activity/events/#list-public-events-for-a-network-of-repositories)\n- [List public events for an organization](https://developer.github.com/v3/activity/events/#list-public-events-for-an-organization)\n- [List events that a user has received](https://developer.github.com/v3/activity/events/#list-events-that-a-user-has-received)\n- [List public events that a user has received](https://developer.github.com/v3/activity/events/#list-public-events-that-a-user-has-received)\n- [List events performed by a user](https://developer.github.com/v3/activity/events/#list-events-performed-by-a-user)\n- [List public events performed by a user](https://developer.github.com/v3/activity/events/#list-public-events-performed-by-a-user)\n- [List events for an issue](https://developer.github.com/v3/issues/events/#list-events-for-an-issue)\n- [List events for a repository](https://developer.github.com/v3/issues/events/#list-events-for-a-repository)\n- [Get a single event](https://developer.github.com/v3/issues/events/#get-a-single-event)\n\n#### Overview\n- [Root endpoint](https://developer.github.com/v3/#root-endpoint)\n\n#### Pull Requests\n- [List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests)\n- [Get a single pull request](https://developer.github.com/v3/pulls/#get-a-single-pull-request)\n- [Create a pull request](https://developer.github.com/v3/pulls/#create-a-pull-request)\n- [Update a pull request](https://developer.github.com/v3/pulls/#update-a-pull-request)\n- [List commits on a pull request](https://developer.github.com/v3/pulls/#list-commits-on-a-pull-request)\n- [List pull requests files](https://developer.github.com/v3/pulls/#list-pull-requests-files)\n- [Get if a pull request has been merged](https://developer.github.com/v3/pulls/#get-if-a-pull-request-has-been-merged)\n- [Merge a pull request (Merge Button)](https://developer.github.com/v3/pulls/#merge-a-pull-request-merge-button)\n\n#### Emojis\n- [Emojis](https://developer.github.com/v3/emojis/#emojis)\n\n#### Milestones\n- [List milestones for a repository](https://developer.github.com/v3/issues/milestones/#list-milestones-for-a-repository)\n- [Get a single milestone](https://developer.github.com/v3/issues/milestones/#get-a-single-milestone)\n- [Create a milestone](https://developer.github.com/v3/issues/milestones/#create-a-milestone)\n- [Update a milestone](https://developer.github.com/v3/issues/milestones/#update-a-milestone)\n- [Delete a milestone](https://developer.github.com/v3/issues/milestones/#delete-a-milestone)\n\n#### Assignees\n- [List assignees](https://developer.github.com/v3/issues/assignees/#list-assignees)\n- [Check assignee](https://developer.github.com/v3/issues/assignees/#check-assignee)\n- [Add assignees to an issue](https://developer.github.com/v3/issues/assignees/#add-assignees-to-an-issue)\n- [Remove assignees from an issue](https://developer.github.com/v3/issues/assignees/#remove-assignees-from-an-issue)\n\n#### Timeline\n- [List events for an issue](https://developer.github.com/v3/issues/timeline/#list-events-for-an-issue)\n\n#### Comments\n- [List comments on an issue](https://developer.github.com/v3/issues/comments/#list-comments-on-an-issue)\n- [List comments in a repository](https://developer.github.com/v3/issues/comments/#list-comments-in-a-repository)\n- [Get a single comment](https://developer.github.com/v3/issues/comments/#get-a-single-comment)\n- [Create a comment](https://developer.github.com/v3/issues/comments/#create-a-comment)\n- [Edit a comment](https://developer.github.com/v3/issues/comments/#edit-a-comment)\n- [Delete a comment](https://developer.github.com/v3/issues/comments/#delete-a-comment)\n- [List commit comments for a repository](https://developer.github.com/v3/repos/comments/#list-commit-comments-for-a-repository)\n- [List comments for a single commit](https://developer.github.com/v3/repos/comments/#list-comments-for-a-single-commit)\n- [Create a commit comment](https://developer.github.com/v3/repos/comments/#create-a-commit-comment)\n- [Get a single commit comment](https://developer.github.com/v3/repos/comments/#get-a-single-commit-comment)\n- [Update a commit comment](https://developer.github.com/v3/repos/comments/#update-a-commit-comment)\n- [Delete a commit comment](https://developer.github.com/v3/repos/comments/#delete-a-commit-comment)\n\n#### Labels\n- [List all labels for this repository](https://developer.github.com/v3/issues/labels/#list-all-labels-for-this-repository)\n- [Get a single label](https://developer.github.com/v3/issues/labels/#get-a-single-label)\n- [Create a label](https://developer.github.com/v3/issues/labels/#create-a-label)\n- [Update a label](https://developer.github.com/v3/issues/labels/#update-a-label)\n- [Delete a label](https://developer.github.com/v3/issues/labels/#delete-a-label)\n- [List labels on an issue](https://developer.github.com/v3/issues/labels/#list-labels-on-an-issue)\n- [Add labels to an issue](https://developer.github.com/v3/issues/labels/#add-labels-to-an-issue)\n- [Remove a label from an issue](https://developer.github.com/v3/issues/labels/#remove-a-label-from-an-issue)\n- [Replace all labels for an issue](https://developer.github.com/v3/issues/labels/#replace-all-labels-for-an-issue)\n- [Remove all labels from an issue](https://developer.github.com/v3/issues/labels/#remove-all-labels-from-an-issue)\n- [Get labels for every issue in a milestone](https://developer.github.com/v3/issues/labels/#get-labels-for-every-issue-in-a-milestone)\n\n#### Source Imports\n- [Start an import](https://developer.github.com/v3/migration/source_imports/#start-an-import)\n- [Get import progress](https://developer.github.com/v3/migration/source_imports/#get-import-progress)\n- [Update existing import](https://developer.github.com/v3/migration/source_imports/#update-existing-import)\n- [Get commit authors](https://developer.github.com/v3/migration/source_imports/#get-commit-authors)\n- [Map a commit author](https://developer.github.com/v3/migration/source_imports/#map-a-commit-author)\n- [Set Git LFS preference](https://developer.github.com/v3/migration/source_imports/#set-git-lfs-preference)\n- [Get large files](https://developer.github.com/v3/migration/source_imports/#get-large-files)\n- [Cancel an import](https://developer.github.com/v3/migration/source_imports/#cancel-an-import)\n\n#### Teams\n- [List teams](https://developer.github.com/v3/teams/#list-teams)\n- [Get team](https://developer.github.com/v3/teams/#get-team)\n- [Create team](https://developer.github.com/v3/teams/#create-team)\n- [Edit team](https://developer.github.com/v3/teams/#edit-team)\n- [Delete team](https://developer.github.com/v3/teams/#delete-team)\n- [List child teams](https://developer.github.com/v3/teams/#list-child-teams)\n- [List team repos](https://developer.github.com/v3/teams/#list-team-repos)\n- [Check if a team manages a repository](https://developer.github.com/v3/teams/#check-if-a-team-manages-a-repository)\n\n#### Markdown\n- [Render an arbitrary Markdown document](https://developer.github.com/v3/markdown/#render-an-arbitrary-markdown-document)\n- [Render a Markdown document in raw mode](https://developer.github.com/v3/markdown/#render-a-markdown-document-in-raw-mode)\n\n#### Meta\n- [Meta](https://developer.github.com/v3/meta/#meta)\n\n#### Review Requests\n- [List review requests](https://developer.github.com/v3/pulls/review_requests/#list-review-requests)\n- [Create a review request](https://developer.github.com/v3/pulls/review_requests/#create-a-review-request)\n- [Delete a review request](https://developer.github.com/v3/pulls/review_requests/#delete-a-review-request)\n\n#### Reviews\n- [List reviews on a pull request](https://developer.github.com/v3/pulls/reviews/#list-reviews-on-a-pull-request)\n- [Get a single review](https://developer.github.com/v3/pulls/reviews/#get-a-single-review)\n- [Delete a pending review](https://developer.github.com/v3/pulls/reviews/#delete-a-pending-review)\n- [Get comments for a single review](https://developer.github.com/v3/pulls/reviews/#get-comments-for-a-single-review)\n- [Create a pull request review](https://developer.github.com/v3/pulls/reviews/#create-a-pull-request-review)\n- [Submit a pull request review](https://developer.github.com/v3/pulls/reviews/#submit-a-pull-request-review)\n- [Dismiss a pull request review](https://developer.github.com/v3/pulls/reviews/#dismiss-a-pull-request-review)\n\n#### Review Comments\n- [List comments on a pull request](https://developer.github.com/v3/pulls/comments/#list-comments-on-a-pull-request)\n- [List comments in a repository](https://developer.github.com/v3/pulls/comments/#list-comments-in-a-repository)\n- [Get a single comment](https://developer.github.com/v3/pulls/comments/#get-a-single-comment)\n- [Create a comment](https://developer.github.com/v3/pulls/comments/#create-a-comment)\n- [Edit a comment](https://developer.github.com/v3/pulls/comments/#edit-a-comment)\n- [Delete a comment](https://developer.github.com/v3/pulls/comments/#delete-a-comment)\n\n#### GitHub Apps\n- [Get a single GitHub App](https://developer.github.com/v3/apps/#get-a-single-github-app)\n- [Get the authenticated GitHub App](https://developer.github.com/v3/apps/#get-the-authenticated-github-app)\n- [Find installations](https://developer.github.com/v3/apps/#find-installations)\n- [Get a single installation](https://developer.github.com/v3/apps/#get-a-single-installation)\n- [Create a new installation token](https://developer.github.com/v3/apps/#create-a-new-installation-token)\n\n#### Installations\n- [List repositories](https://developer.github.com/v3/apps/installations/#list-repositories)\n\n#### Repositories\n- [List user repositories](https://developer.github.com/v3/repos/#list-user-repositories)\n- [List organization repositories](https://developer.github.com/v3/repos/#list-organization-repositories)\n- [List all public repositories](https://developer.github.com/v3/repos/#list-all-public-repositories)\n- [Create](https://developer.github.com/v3/repos/#create)\n- [Get](https://developer.github.com/v3/repos/#get)\n- [Edit](https://developer.github.com/v3/repos/#edit)\n- [List all topics for a repository](https://developer.github.com/v3/repos/#list-all-topics-for-a-repository)\n- [Replace all topics for a repository](https://developer.github.com/v3/repos/#replace-all-topics-for-a-repository)\n- [List contributors](https://developer.github.com/v3/repos/#list-contributors)\n- [List languages](https://developer.github.com/v3/repos/#list-languages)\n- [List teams](https://developer.github.com/v3/repos/#list-teams)\n- [List tags](https://developer.github.com/v3/repos/#list-tags)\n- [Delete a repository](https://developer.github.com/v3/repos/#delete-a-repository)\n\n#### Git Commits\n- [Get a commit](https://developer.github.com/v3/git/commits/#get-a-commit)\n- [Create a commit](https://developer.github.com/v3/git/commits/#create-a-commit)\n\n#### Git Blobs\n- [Get a blob](https://developer.github.com/v3/git/blobs/#get-a-blob)\n- [Create a blob](https://developer.github.com/v3/git/blobs/#create-a-blob)\n\n#### Git Tags\n- [Get a tag](https://developer.github.com/v3/git/tags/#get-a-tag)\n- [Create a tag object](https://developer.github.com/v3/git/tags/#create-a-tag-object)\n\n#### Git Trees\n- [Get a tree](https://developer.github.com/v3/git/trees/#get-a-tree)\n- [Create a tree](https://developer.github.com/v3/git/trees/#create-a-tree)\n\n#### Git References\n- [Get a reference](https://developer.github.com/v3/git/refs/#get-a-reference)\n- [Get all references](https://developer.github.com/v3/git/refs/#get-all-references)\n- [Create a reference](https://developer.github.com/v3/git/refs/#create-a-reference)\n- [Update a reference](https://developer.github.com/v3/git/refs/#update-a-reference)\n- [Delete a reference](https://developer.github.com/v3/git/refs/#delete-a-reference)\n\n#### Gitignore\n- [Listing available templates](https://developer.github.com/v3/gitignore/#listing-available-templates)\n- [Get a single template](https://developer.github.com/v3/gitignore/#get-a-single-template)\n\n#### Projects\n- [List repository projects](https://developer.github.com/v3/projects/#list-repository-projects)\n- [List organization projects](https://developer.github.com/v3/projects/#list-organization-projects)\n- [Get a project](https://developer.github.com/v3/projects/#get-a-project)\n- [Create a repository project](https://developer.github.com/v3/projects/#create-a-repository-project)\n- [Create an organization project](https://developer.github.com/v3/projects/#create-an-organization-project)\n- [Update a project](https://developer.github.com/v3/projects/#update-a-project)\n- [Delete a project](https://developer.github.com/v3/projects/#delete-a-project)\n\n#### Issues\n- [List issues for a repository](https://developer.github.com/v3/issues/#list-issues-for-a-repository)\n- [Get a single issue](https://developer.github.com/v3/issues/#get-a-single-issue)\n- [Create an issue](https://developer.github.com/v3/issues/#create-an-issue)\n- [Edit an issue](https://developer.github.com/v3/issues/#edit-an-issue)\n- [Lock an issue](https://developer.github.com/v3/issues/#lock-an-issue)\n- [Unlock an issue](https://developer.github.com/v3/issues/#unlock-an-issue)\n\n#### Members\n- [Members list](https://developer.github.com/v3/orgs/members/#members-list)\n- [Check membership](https://developer.github.com/v3/orgs/members/#check-membership)\n- [Remove a member](https://developer.github.com/v3/orgs/members/#remove-a-member)\n- [Public members list](https://developer.github.com/v3/orgs/members/#public-members-list)\n- [Check public membership](https://developer.github.com/v3/orgs/members/#check-public-membership)\n- [Get organization membership](https://developer.github.com/v3/orgs/members/#get-organization-membership)\n- [Add or update organization membership](https://developer.github.com/v3/orgs/members/#add-or-update-organization-membership)\n- [Remove organization membership](https://developer.github.com/v3/orgs/members/#remove-organization-membership)\n- [List pending organization invitations](https://developer.github.com/v3/orgs/members/#list-pending-organization-invitations)\n\n#### Outside Collaborators\n- [List outside collaborators](https://developer.github.com/v3/orgs/outside_collaborators/#list-outside-collaborators)\n- [Remove outside collaborator](https://developer.github.com/v3/orgs/outside_collaborators/#remove-outside-collaborator)\n- [Convert member to outside collaborator](https://developer.github.com/v3/orgs/outside_collaborators/#convert-member-to-outside-collaborator)\n\n#### Organizations\n- [List all organizations](https://developer.github.com/v3/orgs/#list-all-organizations)\n- [List user organizations](https://developer.github.com/v3/orgs/#list-user-organizations)\n- [Get an organization](https://developer.github.com/v3/orgs/#get-an-organization)\n\n#### Project cards\n- [List project cards](https://developer.github.com/v3/projects/cards/#list-project-cards)\n- [Get a project card](https://developer.github.com/v3/projects/cards/#get-a-project-card)\n- [Create a project card](https://developer.github.com/v3/projects/cards/#create-a-project-card)\n- [Update a project card](https://developer.github.com/v3/projects/cards/#update-a-project-card)\n- [Delete a project card](https://developer.github.com/v3/projects/cards/#delete-a-project-card)\n- [Move a project card](https://developer.github.com/v3/projects/cards/#move-a-project-card)\n\n#### Project columns\n- [List project columns](https://developer.github.com/v3/projects/columns/#list-project-columns)\n- [Get a project column](https://developer.github.com/v3/projects/columns/#get-a-project-column)\n- [Create a project column](https://developer.github.com/v3/projects/columns/#create-a-project-column)\n- [Update a project column](https://developer.github.com/v3/projects/columns/#update-a-project-column)\n- [Delete a project column](https://developer.github.com/v3/projects/columns/#delete-a-project-column)\n- [Move a project column](https://developer.github.com/v3/projects/columns/#move-a-project-column)\n\n#### Commits\n- [List commits on a repository](https://developer.github.com/v3/repos/commits/#list-commits-on-a-repository)\n- [Get a single commit](https://developer.github.com/v3/repos/commits/#get-a-single-commit)\n- [Get the SHA-1 of a commit reference](https://developer.github.com/v3/repos/commits/#get-the-sha-1-of-a-commit-reference)\n- [Compare two commits](https://developer.github.com/v3/repos/commits/#compare-two-commits)\n\n#### Deployments\n- [List deployments](https://developer.github.com/v3/repos/deployments/#list-deployments)\n- [Get a single deployment](https://developer.github.com/v3/repos/deployments/#get-a-single-deployment)\n- [Create a deployment](https://developer.github.com/v3/repos/deployments/#create-a-deployment)\n- [List deployment statuses](https://developer.github.com/v3/repos/deployments/#list-deployment-statuses)\n- [Get a single deployment status](https://developer.github.com/v3/repos/deployments/#get-a-single-deployment-status)\n- [Create a deployment status](https://developer.github.com/v3/repos/deployments/#create-a-deployment-status)\n\n#### Merging\n- [Perform a merge](https://developer.github.com/v3/repos/merging/#perform-a-merge)\n\n#### Downloads\n- [List downloads for a repository](https://developer.github.com/v3/repos/downloads/#list-downloads-for-a-repository)\n\n#### Statistics\n- [Get contributors list with additions, deletions, and commit counts](https://developer.github.com/v3/repos/statistics/#get-contributors-list-with-additions-deletions-and-commit-counts)\n- [Get the last year of commit activity data](https://developer.github.com/v3/repos/statistics/#get-the-last-year-of-commit-activity-data)\n- [Get the number of additions and deletions per week](https://developer.github.com/v3/repos/statistics/#get-the-number-of-additions-and-deletions-per-week)\n- [Get the weekly commit count for the repository owner and everyone else](https://developer.github.com/v3/repos/statistics/#get-the-weekly-commit-count-for-the-repository-owner-and-everyone-else)\n- [Get the number of commits per hour in each day](https://developer.github.com/v3/repos/statistics/#get-the-number-of-commits-per-hour-in-each-day)\n\n#### Releases\n- [List releases for a repository](https://developer.github.com/v3/repos/releases/#list-releases-for-a-repository)\n- [Get a single release](https://developer.github.com/v3/repos/releases/#get-a-single-release)\n- [Get the latest release](https://developer.github.com/v3/repos/releases/#get-the-latest-release)\n- [Get a release by tag name](https://developer.github.com/v3/repos/releases/#get-a-release-by-tag-name)\n- [Create a release](https://developer.github.com/v3/repos/releases/#create-a-release)\n- [Edit a release](https://developer.github.com/v3/repos/releases/#edit-a-release)\n- [Delete a release](https://developer.github.com/v3/repos/releases/#delete-a-release)\n- [List assets for a release](https://developer.github.com/v3/repos/releases/#list-assets-for-a-release)\n- [Upload a release asset](https://developer.github.com/v3/repos/releases/#upload-a-release-asset)\n- [Get a single release asset](https://developer.github.com/v3/repos/releases/#get-a-single-release-asset)\n- [Edit a release asset](https://developer.github.com/v3/repos/releases/#edit-a-release-asset)\n- [Delete a release asset](https://developer.github.com/v3/repos/releases/#delete-a-release-asset)\n\n#### Contents\n- [Get the README](https://developer.github.com/v3/repos/contents/#get-the-readme)\n- [Get contents](https://developer.github.com/v3/repos/contents/#get-contents)\n- [Create a file](https://developer.github.com/v3/repos/contents/#create-a-file)\n- [Update a file](https://developer.github.com/v3/repos/contents/#update-a-file)\n- [Delete a file](https://developer.github.com/v3/repos/contents/#delete-a-file)\n- [Get archive link](https://developer.github.com/v3/repos/contents/#get-archive-link)\n\n#### Repository Invitations\n- [List invitations for a repository](https://developer.github.com/v3/repos/invitations/#list-invitations-for-a-repository)\n- [Delete a repository invitation](https://developer.github.com/v3/repos/invitations/#delete-a-repository-invitation)\n- [Update a repository invitation](https://developer.github.com/v3/repos/invitations/#update-a-repository-invitation)\n\n#### Deploy Keys\n- [List deploy keys](https://developer.github.com/v3/repos/keys/#list-deploy-keys)\n- [Get a deploy key](https://developer.github.com/v3/repos/keys/#get-a-deploy-key)\n- [Add a new deploy key](https://developer.github.com/v3/repos/keys/#add-a-new-deploy-key)\n- [Remove a deploy key](https://developer.github.com/v3/repos/keys/#remove-a-deploy-key)\n\n#### Branches\n- [List branches](https://developer.github.com/v3/repos/branches/#list-branches)\n- [Get branch](https://developer.github.com/v3/repos/branches/#get-branch)\n- [Get branch protection](https://developer.github.com/v3/repos/branches/#get-branch-protection)\n- [Update branch protection](https://developer.github.com/v3/repos/branches/#update-branch-protection)\n- [Remove branch protection](https://developer.github.com/v3/repos/branches/#remove-branch-protection)\n- [Get required status checks of protected branch](https://developer.github.com/v3/repos/branches/#get-required-status-checks-of-protected-branch)\n- [Update required status checks of protected branch](https://developer.github.com/v3/repos/branches/#update-required-status-checks-of-protected-branch)\n- [Remove required status checks of protected branch](https://developer.github.com/v3/repos/branches/#remove-required-status-checks-of-protected-branch)\n- [List required status checks contexts of protected branch](https://developer.github.com/v3/repos/branches/#list-required-status-checks-contexts-of-protected-branch)\n- [Replace required status checks contexts of protected branch](https://developer.github.com/v3/repos/branches/#replace-required-status-checks-contexts-of-protected-branch)\n- [Add required status checks contexts of protected branch](https://developer.github.com/v3/repos/branches/#add-required-status-checks-contexts-of-protected-branch)\n- [Remove required status checks contexts of protected branch](https://developer.github.com/v3/repos/branches/#remove-required-status-checks-contexts-of-protected-branch)\n- [Get pull request review enforcement of protected branch](https://developer.github.com/v3/repos/branches/#get-pull-request-review-enforcement-of-protected-branch)\n- [Update pull request review enforcement of protected branch](https://developer.github.com/v3/repos/branches/#update-pull-request-review-enforcement-of-protected-branch)\n- [Remove pull request review enforcement of protected branch](https://developer.github.com/v3/repos/branches/#remove-pull-request-review-enforcement-of-protected-branch)\n- [Get required signatures of protected branch](https://developer.github.com/v3/repos/branches/#get-required-signatures-of-protected-branch)\n- [Add required signatures of protected branch](https://developer.github.com/v3/repos/branches/#add-required-signatures-of-protected-branch)\n- [Remove required signatures of protected branch](https://developer.github.com/v3/repos/branches/#remove-required-signatures-of-protected-branch)\n- [Get admin enforcement of protected branch](https://developer.github.com/v3/repos/branches/#get-admin-enforcement-of-protected-branch)\n- [Add admin enforcement of protected branch](https://developer.github.com/v3/repos/branches/#add-admin-enforcement-of-protected-branch)\n- [Remove admin enforcement of protected branch](https://developer.github.com/v3/repos/branches/#remove-admin-enforcement-of-protected-branch)\n- [Get restrictions of protected branch](https://developer.github.com/v3/repos/branches/#get-restrictions-of-protected-branch)\n- [Remove restrictions of protected branch](https://developer.github.com/v3/repos/branches/#remove-restrictions-of-protected-branch)\n- [List team restrictions of protected branch](https://developer.github.com/v3/repos/branches/#list-team-restrictions-of-protected-branch)\n- [Replace team restrictions of protected branch](https://developer.github.com/v3/repos/branches/#replace-team-restrictions-of-protected-branch)\n- [Add team restrictions of protected branch](https://developer.github.com/v3/repos/branches/#add-team-restrictions-of-protected-branch)\n- [Remove team restrictions of protected branch](https://developer.github.com/v3/repos/branches/#remove-team-restrictions-of-protected-branch)\n- [List user restrictions of protected branch](https://developer.github.com/v3/repos/branches/#list-user-restrictions-of-protected-branch)\n- [Replace user restrictions of protected branch](https://developer.github.com/v3/repos/branches/#replace-user-restrictions-of-protected-branch)\n- [Add user restrictions of protected branch](https://developer.github.com/v3/repos/branches/#add-user-restrictions-of-protected-branch)\n- [Remove user restrictions of protected branch](https://developer.github.com/v3/repos/branches/#remove-user-restrictions-of-protected-branch)\n\n#### Forks\n- [List forks](https://developer.github.com/v3/repos/forks/#list-forks)\n- [Create a fork](https://developer.github.com/v3/repos/forks/#create-a-fork)\n\n#### Statuses\n- [Create a status](https://developer.github.com/v3/repos/statuses/#create-a-status)\n- [List statuses for a specific ref](https://developer.github.com/v3/repos/statuses/#list-statuses-for-a-specific-ref)\n- [Get the combined status for a specific ref](https://developer.github.com/v3/repos/statuses/#get-the-combined-status-for-a-specific-ref)\n\n#### Community Profile\n- [Retrieve community profile metrics](https://developer.github.com/v3/repos/community/#retrieve-community-profile-metrics)\n\n#### Traffic\n- [List referrers](https://developer.github.com/v3/repos/traffic/#list-referrers)\n- [List paths](https://developer.github.com/v3/repos/traffic/#list-paths)\n- [Views](https://developer.github.com/v3/repos/traffic/#views)\n- [Clones](https://developer.github.com/v3/repos/traffic/#clones)\n\n#### Collaborators\n- [List collaborators](https://developer.github.com/v3/repos/collaborators/#list-collaborators)\n- [Check if a user is a collaborator](https://developer.github.com/v3/repos/collaborators/#check-if-a-user-is-a-collaborator)\n- [Review a user's permission level](https://developer.github.com/v3/repos/collaborators/#review-a-users-permission-level)\n- [Add user as a collaborator](https://developer.github.com/v3/repos/collaborators/#add-user-as-a-collaborator)\n- [Remove user as a collaborator](https://developer.github.com/v3/repos/collaborators/#remove-user-as-a-collaborator)\n\n#### Pages\n- [Get information about a Pages site](https://developer.github.com/v3/repos/pages/#get-information-about-a-pages-site)\n- [Request a page build](https://developer.github.com/v3/repos/pages/#request-a-page-build)\n- [List Pages builds](https://developer.github.com/v3/repos/pages/#list-pages-builds)\n- [Get latest Pages build](https://developer.github.com/v3/repos/pages/#get-latest-pages-build)\n- [Get a specific Pages build](https://developer.github.com/v3/repos/pages/#get-a-specific-pages-build)\n\n#### Licenses\n- [List all licenses](https://developer.github.com/v3/licenses/#list-all-licenses)\n- [Get an individual license](https://developer.github.com/v3/licenses/#get-an-individual-license)\n- [Get the contents of a repository's license](https://developer.github.com/v3/licenses/#get-the-contents-of-a-repositorys-license)\n\n#### Search\n- [Search repositories](https://developer.github.com/v3/search/#search-repositories)\n- [Search commits](https://developer.github.com/v3/search/#search-commits)\n- [Search code](https://developer.github.com/v3/search/#search-code)\n- [Search issues](https://developer.github.com/v3/search/#search-issues)\n- [Search users](https://developer.github.com/v3/search/#search-users)\n- [Search topics](https://developer.github.com/v3/search/#search-topics)\n- [Search labels](https://developer.github.com/v3/search/#search-labels)\n\n#### Team Discussions\n- [List discussions](https://developer.github.com/v3/teams/discussions/#list-discussions)\n- [Get a single discussion](https://developer.github.com/v3/teams/discussions/#get-a-single-discussion)\n- [Create a discussion](https://developer.github.com/v3/teams/discussions/#create-a-discussion)\n- [Edit a discussion](https://developer.github.com/v3/teams/discussions/#edit-a-discussion)\n- [Delete a discussion](https://developer.github.com/v3/teams/discussions/#delete-a-discussion)\n\n#### Team Members\n- [List team members](https://developer.github.com/v3/teams/members/#list-team-members)\n- [Get team member](https://developer.github.com/v3/teams/members/#get-team-member)\n- [Add team member](https://developer.github.com/v3/teams/members/#add-team-member)\n- [Remove team member](https://developer.github.com/v3/teams/members/#remove-team-member)\n- [Get team membership](https://developer.github.com/v3/teams/members/#get-team-membership)\n- [Add or update team membership](https://developer.github.com/v3/teams/members/#add-or-update-team-membership)\n- [Remove team membership](https://developer.github.com/v3/teams/members/#remove-team-membership)\n- [List pending team invitations](https://developer.github.com/v3/teams/members/#list-pending-team-invitations)\n\n#### Team Discussion Comments\n- [List comments](https://developer.github.com/v3/teams/discussion_comments/#list-comments)\n- [Get a single comment](https://developer.github.com/v3/teams/discussion_comments/#get-a-single-comment)\n- [Create a comment](https://developer.github.com/v3/teams/discussion_comments/#create-a-comment)\n- [Edit a comment](https://developer.github.com/v3/teams/discussion_comments/#edit-a-comment)\n- [Delete a comment](https://developer.github.com/v3/teams/discussion_comments/#delete-a-comment)\n\n# [GitHub Marketplace](https://developer.github.com/v3/apps/marketplace/)\n\n**Note:** The The GitHub Marketplace API on GitHub is currently available for developers to preview. To access the API, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.valkyrie-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).\n\nFor more information about GitHub Marketplace, see \"[GitHub Marketplace](https://developer.github.com/apps/marketplace/).\"\n\n**Note:** This preview includes methods for testing with **stubbed data**. Stubbed data is fake data that's useful for [testing your GitHub Apps](https://developer.github.com/apps/marketplace/testing-apps-apis-and-webhooks/). Stubbed data is hard-coded and will not change based on actual subscriptions.\n\nTo test with stubbed data, use a stubbed endpoint in place of its production counterpart. This allows you to test whether API logic succeeds before listing GitHub Apps on GitHub Marketplace.\n\nBe sure to replace stubbed endpoints with production endpoints before deploying your GitHub App.\n\nEndpoints for ```/marketplace_listing/*``` and ```/user/marketplace_purchases``` are only accessible by OAuth Apps using ```client_id``` and ```secret``` basic authentication or by [GitHub Apps using a JWT](https://developer.github.com/apps/building-github-apps/authentication-options-for-github-apps/#authenticating-as-a-github-app).\n-\n\nFor API authentication for GitHub Marketplace listings associated with an OAuth App, see \"[Authorization options for OAuth Apps](https://developer.github.com/apps/building-oauth-apps/authorization-options-for-oauth-apps/).\"\n-\n\nFor API authentication for GitHub Marketplace listings associated with a GitHub App, see \"[Authentication options for GitHub Apps](https://developer.github.com/apps/building-github-apps/authentication-options-for-github-apps/).\"\n\n# [Installations](https://developer.github.com/v3/apps/installations/)\n\nFor information on how to authenticate as an installation, see \"[Authentication Options for GitHub Apps](https://developer.github.com/apps/building-github-apps/authentication-options-for-github-apps#authenticating-as-an-installation).\"\n\n**Note:** To access the API with your integration, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` Header for your requests.\n\n```\napplication/vnd.github.machine-man-preview+json\n```","name":"github-apps","x-swgg-descriptionLineList":["# [GitHub Apps](https://developer.github.com/v3/apps/)","","For information on how to authenticate as a GitHub App, see \"[Authentication Options for GitHub Apps](https://developer.github.com/apps/building-github-apps/authentication-options-for-github-apps#authenticating-as-a-github-app).\"","","**Note:** To access the API with your integration, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` Header for your requests.","","```","application/vnd.github.machine-man-preview+json","```","","# [GitHub App Permissions](https://developer.github.com/v3/apps/permissions/)","","**Note:** To access the API with your integration, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` Header for your requests.","","```","application/vnd.github.machine-man-preview+json","```","","GitHub Apps are created with a set of permissions. These define what resources the GitHub App can access via the API. For more information, see \"[Permissions for GitHub Apps](https://developer.github.com/apps/building-github-apps/permissions-for-github-apps/).\"","","# [GitHub Apps: Available Endpoints](https://developer.github.com/v3/apps/available-endpoints/)","","**Note:** To access the API with your integration, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` Header for your requests.","","```","application/vnd.github.machine-man-preview+json","```","","The following endpoints are available for use by GitHub Apps. For more information, see \"[GitHub Apps](https://developer.github.com/apps/building-github-apps/).\"","","#### Users","- [Get a single user](https://developer.github.com/v3/users/#get-a-single-user)","- [Get all users](https://developer.github.com/v3/users/#get-all-users)","","#### Miscellaneous","- [Emojis](https://developer.github.com/v3/misc/#emojis)","","#### Rate Limit","- [Get your current rate limit status](https://developer.github.com/v3/rate_limit/#get-your-current-rate-limit-status)","","#### Public Keys","- [List public keys for a user](https://developer.github.com/v3/users/keys/#list-public-keys-for-a-user)","","#### GPG Keys","- [List GPG keys for a user](https://developer.github.com/v3/users/gpg_keys/#list-gpg-keys-for-a-user)","","#### Followers","- [List followers of a user](https://developer.github.com/v3/users/followers/#list-followers-of-a-user)","- [List users followed by another user](https://developer.github.com/v3/users/followers/#list-users-followed-by-another-user)","- [Check if one user follows another](https://developer.github.com/v3/users/followers/#check-if-one-user-follows-another)","","#### Reactions","- [List reactions for a commit comment](https://developer.github.com/v3/reactions/#list-reactions-for-a-commit-comment)","- [List reactions for an issue](https://developer.github.com/v3/reactions/#list-reactions-for-an-issue)","- [List reactions for an issue comment](https://developer.github.com/v3/reactions/#list-reactions-for-an-issue-comment)","- [List reactions for a pull request review comment](https://developer.github.com/v3/reactions/#list-reactions-for-a-pull-request-review-comment)","- [List reactions for a team discussion](https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion)","- [List reactions for a team discussion comment](https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-comment)","","#### Codes of Conduct","- [List all codes of conduct](https://developer.github.com/v3/codes_of_conduct/#list-all-codes-of-conduct)","- [Get an individual code of conduct](https://developer.github.com/v3/codes_of_conduct/#get-an-individual-code-of-conduct)","- [Get a repository's code of conduct](https://developer.github.com/v3/codes_of_conduct/#get-a-repositorys-code-of-conduct)","- [Get the contents of a repository's code of conduct](https://developer.github.com/v3/codes_of_conduct/#get-the-contents-of-a-repositorys-code-of-conduct)","","#### Watching","- [List watchers](https://developer.github.com/v3/activity/watching/#list-watchers)","","#### Feeds","- [List Feeds](https://developer.github.com/v3/activity/feeds/#list-feeds)","","#### Starring","- [List Stargazers](https://developer.github.com/v3/activity/starring/#list-stargazers)","","#### Events","- [List public events](https://developer.github.com/v3/activity/events/#list-public-events)","- [List repository events](https://developer.github.com/v3/activity/events/#list-repository-events)","- [List public events for a network of repositories](https://developer.github.com/v3/activity/events/#list-public-events-for-a-network-of-repositories)","- [List public events for an organization](https://developer.github.com/v3/activity/events/#list-public-events-for-an-organization)","- [List events that a user has received](https://developer.github.com/v3/activity/events/#list-events-that-a-user-has-received)","- [List public events that a user has received](https://developer.github.com/v3/activity/events/#list-public-events-that-a-user-has-received)","- [List events performed by a user](https://developer.github.com/v3/activity/events/#list-events-performed-by-a-user)","- [List public events performed by a user](https://developer.github.com/v3/activity/events/#list-public-events-performed-by-a-user)","- [List events for an issue](https://developer.github.com/v3/issues/events/#list-events-for-an-issue)","- [List events for a repository](https://developer.github.com/v3/issues/events/#list-events-for-a-repository)","- [Get a single event](https://developer.github.com/v3/issues/events/#get-a-single-event)","","#### Overview","- [Root endpoint](https://developer.github.com/v3/#root-endpoint)","","#### Pull Requests","- [List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests)","- [Get a single pull request](https://developer.github.com/v3/pulls/#get-a-single-pull-request)","- [Create a pull request](https://developer.github.com/v3/pulls/#create-a-pull-request)","- [Update a pull request](https://developer.github.com/v3/pulls/#update-a-pull-request)","- [List commits on a pull request](https://developer.github.com/v3/pulls/#list-commits-on-a-pull-request)","- [List pull requests files](https://developer.github.com/v3/pulls/#list-pull-requests-files)","- [Get if a pull request has been merged](https://developer.github.com/v3/pulls/#get-if-a-pull-request-has-been-merged)","- [Merge a pull request (Merge Button)](https://developer.github.com/v3/pulls/#merge-a-pull-request-merge-button)","","#### Emojis","- [Emojis](https://developer.github.com/v3/emojis/#emojis)","","#### Milestones","- [List milestones for a repository](https://developer.github.com/v3/issues/milestones/#list-milestones-for-a-repository)","- [Get a single milestone](https://developer.github.com/v3/issues/milestones/#get-a-single-milestone)","- [Create a milestone](https://developer.github.com/v3/issues/milestones/#create-a-milestone)","- [Update a milestone](https://developer.github.com/v3/issues/milestones/#update-a-milestone)","- [Delete a milestone](https://developer.github.com/v3/issues/milestones/#delete-a-milestone)","","#### Assignees","- [List assignees](https://developer.github.com/v3/issues/assignees/#list-assignees)","- [Check assignee](https://developer.github.com/v3/issues/assignees/#check-assignee)","- [Add assignees to an issue](https://developer.github.com/v3/issues/assignees/#add-assignees-to-an-issue)","- [Remove assignees from an issue](https://developer.github.com/v3/issues/assignees/#remove-assignees-from-an-issue)","","#### Timeline","- [List events for an issue](https://developer.github.com/v3/issues/timeline/#list-events-for-an-issue)","","#### Comments","- [List comments on an issue](https://developer.github.com/v3/issues/comments/#list-comments-on-an-issue)","- [List comments in a repository](https://developer.github.com/v3/issues/comments/#list-comments-in-a-repository)","- [Get a single comment](https://developer.github.com/v3/issues/comments/#get-a-single-comment)","- [Create a comment](https://developer.github.com/v3/issues/comments/#create-a-comment)","- [Edit a comment](https://developer.github.com/v3/issues/comments/#edit-a-comment)","- [Delete a comment](https://developer.github.com/v3/issues/comments/#delete-a-comment)","- [List commit comments for a repository](https://developer.github.com/v3/repos/comments/#list-commit-comments-for-a-repository)","- [List comments for a single commit](https://developer.github.com/v3/repos/comments/#list-comments-for-a-single-commit)","- [Create a commit comment](https://developer.github.com/v3/repos/comments/#create-a-commit-comment)","- [Get a single commit comment](https://developer.github.com/v3/repos/comments/#get-a-single-commit-comment)","- [Update a commit comment](https://developer.github.com/v3/repos/comments/#update-a-commit-comment)","- [Delete a commit comment](https://developer.github.com/v3/repos/comments/#delete-a-commit-comment)","","#### Labels","- [List all labels for this repository](https://developer.github.com/v3/issues/labels/#list-all-labels-for-this-repository)","- [Get a single label](https://developer.github.com/v3/issues/labels/#get-a-single-label)","- [Create a label](https://developer.github.com/v3/issues/labels/#create-a-label)","- [Update a label](https://developer.github.com/v3/issues/labels/#update-a-label)","- [Delete a label](https://developer.github.com/v3/issues/labels/#delete-a-label)","- [List labels on an issue](https://developer.github.com/v3/issues/labels/#list-labels-on-an-issue)","- [Add labels to an issue](https://developer.github.com/v3/issues/labels/#add-labels-to-an-issue)","- [Remove a label from an issue](https://developer.github.com/v3/issues/labels/#remove-a-label-from-an-issue)","- [Replace all labels for an issue](https://developer.github.com/v3/issues/labels/#replace-all-labels-for-an-issue)","- [Remove all labels from an issue](https://developer.github.com/v3/issues/labels/#remove-all-labels-from-an-issue)","- [Get labels for every issue in a milestone](https://developer.github.com/v3/issues/labels/#get-labels-for-every-issue-in-a-milestone)","","#### Source Imports","- [Start an import](https://developer.github.com/v3/migration/source_imports/#start-an-import)","- [Get import progress](https://developer.github.com/v3/migration/source_imports/#get-import-progress)","- [Update existing import](https://developer.github.com/v3/migration/source_imports/#update-existing-import)","- [Get commit authors](https://developer.github.com/v3/migration/source_imports/#get-commit-authors)","- [Map a commit author](https://developer.github.com/v3/migration/source_imports/#map-a-commit-author)","- [Set Git LFS preference](https://developer.github.com/v3/migration/source_imports/#set-git-lfs-preference)","- [Get large files](https://developer.github.com/v3/migration/source_imports/#get-large-files)","- [Cancel an import](https://developer.github.com/v3/migration/source_imports/#cancel-an-import)","","#### Teams","- [List teams](https://developer.github.com/v3/teams/#list-teams)","- [Get team](https://developer.github.com/v3/teams/#get-team)","- [Create team](https://developer.github.com/v3/teams/#create-team)","- [Edit team](https://developer.github.com/v3/teams/#edit-team)","- [Delete team](https://developer.github.com/v3/teams/#delete-team)","- [List child teams](https://developer.github.com/v3/teams/#list-child-teams)","- [List team repos](https://developer.github.com/v3/teams/#list-team-repos)","- [Check if a team manages a repository](https://developer.github.com/v3/teams/#check-if-a-team-manages-a-repository)","","#### Markdown","- [Render an arbitrary Markdown document](https://developer.github.com/v3/markdown/#render-an-arbitrary-markdown-document)","- [Render a Markdown document in raw mode](https://developer.github.com/v3/markdown/#render-a-markdown-document-in-raw-mode)","","#### Meta","- [Meta](https://developer.github.com/v3/meta/#meta)","","#### Review Requests","- [List review requests](https://developer.github.com/v3/pulls/review_requests/#list-review-requests)","- [Create a review request](https://developer.github.com/v3/pulls/review_requests/#create-a-review-request)","- [Delete a review request](https://developer.github.com/v3/pulls/review_requests/#delete-a-review-request)","","#### Reviews","- [List reviews on a pull request](https://developer.github.com/v3/pulls/reviews/#list-reviews-on-a-pull-request)","- [Get a single review](https://developer.github.com/v3/pulls/reviews/#get-a-single-review)","- [Delete a pending review](https://developer.github.com/v3/pulls/reviews/#delete-a-pending-review)","- [Get comments for a single review](https://developer.github.com/v3/pulls/reviews/#get-comments-for-a-single-review)","- [Create a pull request review](https://developer.github.com/v3/pulls/reviews/#create-a-pull-request-review)","- [Submit a pull request review](https://developer.github.com/v3/pulls/reviews/#submit-a-pull-request-review)","- [Dismiss a pull request review](https://developer.github.com/v3/pulls/reviews/#dismiss-a-pull-request-review)","","#### Review Comments","- [List comments on a pull request](https://developer.github.com/v3/pulls/comments/#list-comments-on-a-pull-request)","- [List comments in a repository](https://developer.github.com/v3/pulls/comments/#list-comments-in-a-repository)","- [Get a single comment](https://developer.github.com/v3/pulls/comments/#get-a-single-comment)","- [Create a comment](https://developer.github.com/v3/pulls/comments/#create-a-comment)","- [Edit a comment](https://developer.github.com/v3/pulls/comments/#edit-a-comment)","- [Delete a comment](https://developer.github.com/v3/pulls/comments/#delete-a-comment)","","#### GitHub Apps","- [Get a single GitHub App](https://developer.github.com/v3/apps/#get-a-single-github-app)","- [Get the authenticated GitHub App](https://developer.github.com/v3/apps/#get-the-authenticated-github-app)","- [Find installations](https://developer.github.com/v3/apps/#find-installations)","- [Get a single installation](https://developer.github.com/v3/apps/#get-a-single-installation)","- [Create a new installation token](https://developer.github.com/v3/apps/#create-a-new-installation-token)","","#### Installations","- [List repositories](https://developer.github.com/v3/apps/installations/#list-repositories)","","#### Repositories","- [List user repositories](https://developer.github.com/v3/repos/#list-user-repositories)","- [List organization repositories](https://developer.github.com/v3/repos/#list-organization-repositories)","- [List all public repositories](https://developer.github.com/v3/repos/#list-all-public-repositories)","- [Create](https://developer.github.com/v3/repos/#create)","- [Get](https://developer.github.com/v3/repos/#get)","- [Edit](https://developer.github.com/v3/repos/#edit)","- [List all topics for a repository](https://developer.github.com/v3/repos/#list-all-topics-for-a-repository)","- [Replace all topics for a repository](https://developer.github.com/v3/repos/#replace-all-topics-for-a-repository)","- [List contributors](https://developer.github.com/v3/repos/#list-contributors)","- [List languages](https://developer.github.com/v3/repos/#list-languages)","- [List teams](https://developer.github.com/v3/repos/#list-teams)","- [List tags](https://developer.github.com/v3/repos/#list-tags)","- [Delete a repository](https://developer.github.com/v3/repos/#delete-a-repository)","","#### Git Commits","- [Get a commit](https://developer.github.com/v3/git/commits/#get-a-commit)","- [Create a commit](https://developer.github.com/v3/git/commits/#create-a-commit)","","#### Git Blobs","- [Get a blob](https://developer.github.com/v3/git/blobs/#get-a-blob)","- [Create a blob](https://developer.github.com/v3/git/blobs/#create-a-blob)","","#### Git Tags","- [Get a tag](https://developer.github.com/v3/git/tags/#get-a-tag)","- [Create a tag object](https://developer.github.com/v3/git/tags/#create-a-tag-object)","","#### Git Trees","- [Get a tree](https://developer.github.com/v3/git/trees/#get-a-tree)","- [Create a tree](https://developer.github.com/v3/git/trees/#create-a-tree)","","#### Git References","- [Get a reference](https://developer.github.com/v3/git/refs/#get-a-reference)","- [Get all references](https://developer.github.com/v3/git/refs/#get-all-references)","- [Create a reference](https://developer.github.com/v3/git/refs/#create-a-reference)","- [Update a reference](https://developer.github.com/v3/git/refs/#update-a-reference)","- [Delete a reference](https://developer.github.com/v3/git/refs/#delete-a-reference)","","#### Gitignore","- [Listing available templates](https://developer.github.com/v3/gitignore/#listing-available-templates)","- [Get a single template](https://developer.github.com/v3/gitignore/#get-a-single-template)","","#### Projects","- [List repository projects](https://developer.github.com/v3/projects/#list-repository-projects)","- [List organization projects](https://developer.github.com/v3/projects/#list-organization-projects)","- [Get a project](https://developer.github.com/v3/projects/#get-a-project)","- [Create a repository project](https://developer.github.com/v3/projects/#create-a-repository-project)","- [Create an organization project](https://developer.github.com/v3/projects/#create-an-organization-project)","- [Update a project](https://developer.github.com/v3/projects/#update-a-project)","- [Delete a project](https://developer.github.com/v3/projects/#delete-a-project)","","#### Issues","- [List issues for a repository](https://developer.github.com/v3/issues/#list-issues-for-a-repository)","- [Get a single issue](https://developer.github.com/v3/issues/#get-a-single-issue)","- [Create an issue](https://developer.github.com/v3/issues/#create-an-issue)","- [Edit an issue](https://developer.github.com/v3/issues/#edit-an-issue)","- [Lock an issue](https://developer.github.com/v3/issues/#lock-an-issue)","- [Unlock an issue](https://developer.github.com/v3/issues/#unlock-an-issue)","","#### Members","- [Members list](https://developer.github.com/v3/orgs/members/#members-list)","- [Check membership](https://developer.github.com/v3/orgs/members/#check-membership)","- [Remove a member](https://developer.github.com/v3/orgs/members/#remove-a-member)","- [Public members list](https://developer.github.com/v3/orgs/members/#public-members-list)","- [Check public membership](https://developer.github.com/v3/orgs/members/#check-public-membership)","- [Get organization membership](https://developer.github.com/v3/orgs/members/#get-organization-membership)","- [Add or update organization membership](https://developer.github.com/v3/orgs/members/#add-or-update-organization-membership)","- [Remove organization membership](https://developer.github.com/v3/orgs/members/#remove-organization-membership)","- [List pending organization invitations](https://developer.github.com/v3/orgs/members/#list-pending-organization-invitations)","","#### Outside Collaborators","- [List outside collaborators](https://developer.github.com/v3/orgs/outside_collaborators/#list-outside-collaborators)","- [Remove outside collaborator](https://developer.github.com/v3/orgs/outside_collaborators/#remove-outside-collaborator)","- [Convert member to outside collaborator](https://developer.github.com/v3/orgs/outside_collaborators/#convert-member-to-outside-collaborator)","","#### Organizations","- [List all organizations](https://developer.github.com/v3/orgs/#list-all-organizations)","- [List user organizations](https://developer.github.com/v3/orgs/#list-user-organizations)","- [Get an organization](https://developer.github.com/v3/orgs/#get-an-organization)","","#### Project cards","- [List project cards](https://developer.github.com/v3/projects/cards/#list-project-cards)","- [Get a project card](https://developer.github.com/v3/projects/cards/#get-a-project-card)","- [Create a project card](https://developer.github.com/v3/projects/cards/#create-a-project-card)","- [Update a project card](https://developer.github.com/v3/projects/cards/#update-a-project-card)","- [Delete a project card](https://developer.github.com/v3/projects/cards/#delete-a-project-card)","- [Move a project card](https://developer.github.com/v3/projects/cards/#move-a-project-card)","","#### Project columns","- [List project columns](https://developer.github.com/v3/projects/columns/#list-project-columns)","- [Get a project column](https://developer.github.com/v3/projects/columns/#get-a-project-column)","- [Create a project column](https://developer.github.com/v3/projects/columns/#create-a-project-column)","- [Update a project column](https://developer.github.com/v3/projects/columns/#update-a-project-column)","- [Delete a project column](https://developer.github.com/v3/projects/columns/#delete-a-project-column)","- [Move a project column](https://developer.github.com/v3/projects/columns/#move-a-project-column)","","#### Commits","- [List commits on a repository](https://developer.github.com/v3/repos/commits/#list-commits-on-a-repository)","- [Get a single commit](https://developer.github.com/v3/repos/commits/#get-a-single-commit)","- [Get the SHA-1 of a commit reference](https://developer.github.com/v3/repos/commits/#get-the-sha-1-of-a-commit-reference)","- [Compare two commits](https://developer.github.com/v3/repos/commits/#compare-two-commits)","","#### Deployments","- [List deployments](https://developer.github.com/v3/repos/deployments/#list-deployments)","- [Get a single deployment](https://developer.github.com/v3/repos/deployments/#get-a-single-deployment)","- [Create a deployment](https://developer.github.com/v3/repos/deployments/#create-a-deployment)","- [List deployment statuses](https://developer.github.com/v3/repos/deployments/#list-deployment-statuses)","- [Get a single deployment status](https://developer.github.com/v3/repos/deployments/#get-a-single-deployment-status)","- [Create a deployment status](https://developer.github.com/v3/repos/deployments/#create-a-deployment-status)","","#### Merging","- [Perform a merge](https://developer.github.com/v3/repos/merging/#perform-a-merge)","","#### Downloads","- [List downloads for a repository](https://developer.github.com/v3/repos/downloads/#list-downloads-for-a-repository)","","#### Statistics","- [Get contributors list with additions, deletions, and commit counts](https://developer.github.com/v3/repos/statistics/#get-contributors-list-with-additions-deletions-and-commit-counts)","- [Get the last year of commit activity data](https://developer.github.com/v3/repos/statistics/#get-the-last-year-of-commit-activity-data)","- [Get the number of additions and deletions per week](https://developer.github.com/v3/repos/statistics/#get-the-number-of-additions-and-deletions-per-week)","- [Get the weekly commit count for the repository owner and everyone else](https://developer.github.com/v3/repos/statistics/#get-the-weekly-commit-count-for-the-repository-owner-and-everyone-else)","- [Get the number of commits per hour in each day](https://developer.github.com/v3/repos/statistics/#get-the-number-of-commits-per-hour-in-each-day)","","#### Releases","- [List releases for a repository](https://developer.github.com/v3/repos/releases/#list-releases-for-a-repository)","- [Get a single release](https://developer.github.com/v3/repos/releases/#get-a-single-release)","- [Get the latest release](https://developer.github.com/v3/repos/releases/#get-the-latest-release)","- [Get a release by tag name](https://developer.github.com/v3/repos/releases/#get-a-release-by-tag-name)","- [Create a release](https://developer.github.com/v3/repos/releases/#create-a-release)","- [Edit a release](https://developer.github.com/v3/repos/releases/#edit-a-release)","- [Delete a release](https://developer.github.com/v3/repos/releases/#delete-a-release)","- [List assets for a release](https://developer.github.com/v3/repos/releases/#list-assets-for-a-release)","- [Upload a release asset](https://developer.github.com/v3/repos/releases/#upload-a-release-asset)","- [Get a single release asset](https://developer.github.com/v3/repos/releases/#get-a-single-release-asset)","- [Edit a release asset](https://developer.github.com/v3/repos/releases/#edit-a-release-asset)","- [Delete a release asset](https://developer.github.com/v3/repos/releases/#delete-a-release-asset)","","#### Contents","- [Get the README](https://developer.github.com/v3/repos/contents/#get-the-readme)","- [Get contents](https://developer.github.com/v3/repos/contents/#get-contents)","- [Create a file](https://developer.github.com/v3/repos/contents/#create-a-file)","- [Update a file](https://developer.github.com/v3/repos/contents/#update-a-file)","- [Delete a file](https://developer.github.com/v3/repos/contents/#delete-a-file)","- [Get archive link](https://developer.github.com/v3/repos/contents/#get-archive-link)","","#### Repository Invitations","- [List invitations for a repository](https://developer.github.com/v3/repos/invitations/#list-invitations-for-a-repository)","- [Delete a repository invitation](https://developer.github.com/v3/repos/invitations/#delete-a-repository-invitation)","- [Update a repository invitation](https://developer.github.com/v3/repos/invitations/#update-a-repository-invitation)","","#### Deploy Keys","- [List deploy keys](https://developer.github.com/v3/repos/keys/#list-deploy-keys)","- [Get a deploy key](https://developer.github.com/v3/repos/keys/#get-a-deploy-key)","- [Add a new deploy key](https://developer.github.com/v3/repos/keys/#add-a-new-deploy-key)","- [Remove a deploy key](https://developer.github.com/v3/repos/keys/#remove-a-deploy-key)","","#### Branches","- [List branches](https://developer.github.com/v3/repos/branches/#list-branches)","- [Get branch](https://developer.github.com/v3/repos/branches/#get-branch)","- [Get branch protection](https://developer.github.com/v3/repos/branches/#get-branch-protection)","- [Update branch protection](https://developer.github.com/v3/repos/branches/#update-branch-protection)","- [Remove branch protection](https://developer.github.com/v3/repos/branches/#remove-branch-protection)","- [Get required status checks of protected branch](https://developer.github.com/v3/repos/branches/#get-required-status-checks-of-protected-branch)","- [Update required status checks of protected branch](https://developer.github.com/v3/repos/branches/#update-required-status-checks-of-protected-branch)","- [Remove required status checks of protected branch](https://developer.github.com/v3/repos/branches/#remove-required-status-checks-of-protected-branch)","- [List required status checks contexts of protected branch](https://developer.github.com/v3/repos/branches/#list-required-status-checks-contexts-of-protected-branch)","- [Replace required status checks contexts of protected branch](https://developer.github.com/v3/repos/branches/#replace-required-status-checks-contexts-of-protected-branch)","- [Add required status checks contexts of protected branch](https://developer.github.com/v3/repos/branches/#add-required-status-checks-contexts-of-protected-branch)","- [Remove required status checks contexts of protected branch](https://developer.github.com/v3/repos/branches/#remove-required-status-checks-contexts-of-protected-branch)","- [Get pull request review enforcement of protected branch](https://developer.github.com/v3/repos/branches/#get-pull-request-review-enforcement-of-protected-branch)","- [Update pull request review enforcement of protected branch](https://developer.github.com/v3/repos/branches/#update-pull-request-review-enforcement-of-protected-branch)","- [Remove pull request review enforcement of protected branch](https://developer.github.com/v3/repos/branches/#remove-pull-request-review-enforcement-of-protected-branch)","- [Get required signatures of protected branch](https://developer.github.com/v3/repos/branches/#get-required-signatures-of-protected-branch)","- [Add required signatures of protected branch](https://developer.github.com/v3/repos/branches/#add-required-signatures-of-protected-branch)","- [Remove required signatures of protected branch](https://developer.github.com/v3/repos/branches/#remove-required-signatures-of-protected-branch)","- [Get admin enforcement of protected branch](https://developer.github.com/v3/repos/branches/#get-admin-enforcement-of-protected-branch)","- [Add admin enforcement of protected branch](https://developer.github.com/v3/repos/branches/#add-admin-enforcement-of-protected-branch)","- [Remove admin enforcement of protected branch](https://developer.github.com/v3/repos/branches/#remove-admin-enforcement-of-protected-branch)","- [Get restrictions of protected branch](https://developer.github.com/v3/repos/branches/#get-restrictions-of-protected-branch)","- [Remove restrictions of protected branch](https://developer.github.com/v3/repos/branches/#remove-restrictions-of-protected-branch)","- [List team restrictions of protected branch](https://developer.github.com/v3/repos/branches/#list-team-restrictions-of-protected-branch)","- [Replace team restrictions of protected branch](https://developer.github.com/v3/repos/branches/#replace-team-restrictions-of-protected-branch)","- [Add team restrictions of protected branch](https://developer.github.com/v3/repos/branches/#add-team-restrictions-of-protected-branch)","- [Remove team restrictions of protected branch](https://developer.github.com/v3/repos/branches/#remove-team-restrictions-of-protected-branch)","- [List user restrictions of protected branch](https://developer.github.com/v3/repos/branches/#list-user-restrictions-of-protected-branch)","- [Replace user restrictions of protected branch](https://developer.github.com/v3/repos/branches/#replace-user-restrictions-of-protected-branch)","- [Add user restrictions of protected branch](https://developer.github.com/v3/repos/branches/#add-user-restrictions-of-protected-branch)","- [Remove user restrictions of protected branch](https://developer.github.com/v3/repos/branches/#remove-user-restrictions-of-protected-branch)","","#### Forks","- [List forks](https://developer.github.com/v3/repos/forks/#list-forks)","- [Create a fork](https://developer.github.com/v3/repos/forks/#create-a-fork)","","#### Statuses","- [Create a status](https://developer.github.com/v3/repos/statuses/#create-a-status)","- [List statuses for a specific ref](https://developer.github.com/v3/repos/statuses/#list-statuses-for-a-specific-ref)","- [Get the combined status for a specific ref](https://developer.github.com/v3/repos/statuses/#get-the-combined-status-for-a-specific-ref)","","#### Community Profile","- [Retrieve community profile metrics](https://developer.github.com/v3/repos/community/#retrieve-community-profile-metrics)","","#### Traffic","- [List referrers](https://developer.github.com/v3/repos/traffic/#list-referrers)","- [List paths](https://developer.github.com/v3/repos/traffic/#list-paths)","- [Views](https://developer.github.com/v3/repos/traffic/#views)","- [Clones](https://developer.github.com/v3/repos/traffic/#clones)","","#### Collaborators","- [List collaborators](https://developer.github.com/v3/repos/collaborators/#list-collaborators)","- [Check if a user is a collaborator](https://developer.github.com/v3/repos/collaborators/#check-if-a-user-is-a-collaborator)","- [Review a user's permission level](https://developer.github.com/v3/repos/collaborators/#review-a-users-permission-level)","- [Add user as a collaborator](https://developer.github.com/v3/repos/collaborators/#add-user-as-a-collaborator)","- [Remove user as a collaborator](https://developer.github.com/v3/repos/collaborators/#remove-user-as-a-collaborator)","","#### Pages","- [Get information about a Pages site](https://developer.github.com/v3/repos/pages/#get-information-about-a-pages-site)","- [Request a page build](https://developer.github.com/v3/repos/pages/#request-a-page-build)","- [List Pages builds](https://developer.github.com/v3/repos/pages/#list-pages-builds)","- [Get latest Pages build](https://developer.github.com/v3/repos/pages/#get-latest-pages-build)","- [Get a specific Pages build](https://developer.github.com/v3/repos/pages/#get-a-specific-pages-build)","","#### Licenses","- [List all licenses](https://developer.github.com/v3/licenses/#list-all-licenses)","- [Get an individual license](https://developer.github.com/v3/licenses/#get-an-individual-license)","- [Get the contents of a repository's license](https://developer.github.com/v3/licenses/#get-the-contents-of-a-repositorys-license)","","#### Search","- [Search repositories](https://developer.github.com/v3/search/#search-repositories)","- [Search commits](https://developer.github.com/v3/search/#search-commits)","- [Search code](https://developer.github.com/v3/search/#search-code)","- [Search issues](https://developer.github.com/v3/search/#search-issues)","- [Search users](https://developer.github.com/v3/search/#search-users)","- [Search topics](https://developer.github.com/v3/search/#search-topics)","- [Search labels](https://developer.github.com/v3/search/#search-labels)","","#### Team Discussions","- [List discussions](https://developer.github.com/v3/teams/discussions/#list-discussions)","- [Get a single discussion](https://developer.github.com/v3/teams/discussions/#get-a-single-discussion)","- [Create a discussion](https://developer.github.com/v3/teams/discussions/#create-a-discussion)","- [Edit a discussion](https://developer.github.com/v3/teams/discussions/#edit-a-discussion)","- [Delete a discussion](https://developer.github.com/v3/teams/discussions/#delete-a-discussion)","","#### Team Members","- [List team members](https://developer.github.com/v3/teams/members/#list-team-members)","- [Get team member](https://developer.github.com/v3/teams/members/#get-team-member)","- [Add team member](https://developer.github.com/v3/teams/members/#add-team-member)","- [Remove team member](https://developer.github.com/v3/teams/members/#remove-team-member)","- [Get team membership](https://developer.github.com/v3/teams/members/#get-team-membership)","- [Add or update team membership](https://developer.github.com/v3/teams/members/#add-or-update-team-membership)","- [Remove team membership](https://developer.github.com/v3/teams/members/#remove-team-membership)","- [List pending team invitations](https://developer.github.com/v3/teams/members/#list-pending-team-invitations)","","#### Team Discussion Comments","- [List comments](https://developer.github.com/v3/teams/discussion_comments/#list-comments)","- [Get a single comment](https://developer.github.com/v3/teams/discussion_comments/#get-a-single-comment)","- [Create a comment](https://developer.github.com/v3/teams/discussion_comments/#create-a-comment)","- [Edit a comment](https://developer.github.com/v3/teams/discussion_comments/#edit-a-comment)","- [Delete a comment](https://developer.github.com/v3/teams/discussion_comments/#delete-a-comment)","","# [GitHub Marketplace](https://developer.github.com/v3/apps/marketplace/)","","**Note:** The The GitHub Marketplace API on GitHub is currently available for developers to preview. To access the API, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.valkyrie-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","","For more information about GitHub Marketplace, see \"[GitHub Marketplace](https://developer.github.com/apps/marketplace/).\"","","**Note:** This preview includes methods for testing with **stubbed data**. Stubbed data is fake data that's useful for [testing your GitHub Apps](https://developer.github.com/apps/marketplace/testing-apps-apis-and-webhooks/). Stubbed data is hard-coded and will not change based on actual subscriptions.","","To test with stubbed data, use a stubbed endpoint in place of its production counterpart. This allows you to test whether API logic succeeds before listing GitHub Apps on GitHub Marketplace.","","Be sure to replace stubbed endpoints with production endpoints before deploying your GitHub App.","","Endpoints for ```/marketplace_listing/*``` and ```/user/marketplace_purchases``` are only accessible by OAuth Apps using ```client_id``` and ```secret``` basic authentication or by [GitHub Apps using a JWT](https://developer.github.com/apps/building-github-apps/authentication-options-for-github-apps/#authenticating-as-a-github-app).","-","","For API authentication for GitHub Marketplace listings associated with an OAuth App, see \"[Authorization options for OAuth Apps](https://developer.github.com/apps/building-oauth-apps/authorization-options-for-oauth-apps/).\"","-","","For API authentication for GitHub Marketplace listings associated with a GitHub App, see \"[Authentication options for GitHub Apps](https://developer.github.com/apps/building-github-apps/authentication-options-for-github-apps/).\"","","# [Installations](https://developer.github.com/v3/apps/installations/)","","For information on how to authenticate as an installation, see \"[Authentication Options for GitHub Apps](https://developer.github.com/apps/building-github-apps/authentication-options-for-github-apps#authenticating-as-an-installation).\"","","**Note:** To access the API with your integration, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` Header for your requests.","","```","application/vnd.github.machine-man-preview+json","```"]},{"description":"# [Gists](https://developer.github.com/v3/gists/)\n\n**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.jean-grey-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).\n\nCustom media types\n\nThe following media types are supported when fetching gist contents. You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).\n```\napplication/vnd.github.VERSION.raw\napplication/vnd.github.VERSION.base64\n```\n\n# [Gist Comments](https://developer.github.com/v3/gists/comments/)\n\nGist Comments use [these custom media types](https://developer.github.com/v3/gists/comments/#custom-media-types). You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).\n\nCustom media types\n\nThese are the supported media types for gist comments. You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).\n```\napplication/vnd.github.VERSION.raw+json\napplication/vnd.github.VERSION.text+json\napplication/vnd.github.VERSION.html+json\napplication/vnd.github.VERSION.full+json\n```","name":"github-gists","x-swgg-descriptionLineList":["# [Gists](https://developer.github.com/v3/gists/)","","**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.jean-grey-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","","Custom media types","","The following media types are supported when fetching gist contents. You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).","```","application/vnd.github.VERSION.raw","application/vnd.github.VERSION.base64","```","","# [Gist Comments](https://developer.github.com/v3/gists/comments/)","","Gist Comments use [these custom media types](https://developer.github.com/v3/gists/comments/#custom-media-types). You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).","","Custom media types","","These are the supported media types for gist comments. You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).","```","application/vnd.github.VERSION.raw+json","application/vnd.github.VERSION.text+json","application/vnd.github.VERSION.html+json","application/vnd.github.VERSION.full+json","```"]},{"description":"# [Git Data](https://developer.github.com/v3/git/)\n\nThe Git Database API gives you access to read and write raw Git objects to your Git database on GitHub and to list and update your references (branch heads and tags).\n\nThis basically allows you to reimplement a lot of Git functionality over our API - by creating raw objects directly into the database and updating branch references you could technically do just about anything that Git can do without having Git installed.\n\nGit DB API functions will return a ```409 Conflict``` if the git repository for a Repository is empty or unavailable.  This typically means it is being created still. Contact [GitHub support](https://github.com/contact) if this response status persists.\n\nFor more information on the Git object database, please read the [Git Internals](http://git-scm.com/book/en/v1/Git-Internals) chapter of the Pro Git book.\n\nAs an example, if you wanted to commit a change to a file in your repository, you would:\n- get the current commit object\n- retrieve the tree it points to\n- retrieve the content of the blob object that tree has for that particular file path\n- change the content somehow and post a new blob object with that new content, getting a blob SHA back\n- post a new tree object with that file path pointer replaced with your new blob SHA getting a tree SHA back\n- create a new commit object with the current commit SHA as the parent and the new tree SHA, getting a commit SHA back\n- update the reference of your branch to point to the new commit SHA\n\nIt might seem complex, but it's actually pretty simple when you understand the model and it opens up a ton of things you could potentially do with the API.\n\n# [Git Blobs](https://developer.github.com/v3/git/blobs/)\n\nA Git blob (binary large object) is the object type used to store the contents of each file in a repository. The file's SHA-1 hash is computed and stored in the blob object. These endpoints allow you to read and write [blob objects](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects) to your Git database on GitHub. See the [Git Database API](https://developer.github.com/v3/git) for more details. Blobs leverage [these custom media types](https://developer.github.com/v3/git/blobs/#custom-media-types). You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).\n- [Get a blob](https://developer.github.com/v3/git/blobs/#get-a-blob)\n- [Create a blob](https://developer.github.com/v3/git/blobs/#create-a-blob)\n- [Custom media types](https://developer.github.com/v3/git/blobs/#custom-media-types)\n\n**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.jean-grey-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).\n\nCustom media types\n\nThese are the supported media types for blobs. You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).\n```\napplication/json\napplication/vnd.github.VERSION.raw\n```\n\n# [Git Commits](https://developer.github.com/v3/git/commits/)\n\nA Git commit is a snapshot of the hierarchy ([Git tree](https://developer.github.com/v3/git/trees)) and the contents of the files ([Git blob](https://developer.github.com/v3/git/blobs)) in a Git repository. These endpoints allow you to read and write [commit objects](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects) to your Git database on GitHub. See the [Git Database API](https://developer.github.com/v3/git) for more details.\n- [Get a commit](https://developer.github.com/v3/git/commits/#get-a-commit)\n- [Create a commit](https://developer.github.com/v3/git/commits/#create-a-commit)\n- [Commit signature verification](https://developer.github.com/v3/git/commits/#commit-signature-verification)\n\n**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.jean-grey-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).\n\n# [Git Refs](https://developer.github.com/v3/git/refs/)\n\nA Git reference (```git ref```) is just a file that contains a Git commit SHA-1 hash. When referring to a Git commit, you can use the Git reference, which is an easy-to-remember name, rather than the hash. The Git reference can be rewritten to point to a new commit. A branch is just a Git reference that stores the new Git commit hash. These endpoints allow you to read and write [references](https://git-scm.com/book/en/v1/Git-Internals-Git-References) to your Git database on GitHub. See the [Git Database API](https://developer.github.com/v3/git) for more details.\n- [Get a reference](https://developer.github.com/v3/git/refs/#get-a-reference)\n- [Get all references](https://developer.github.com/v3/git/refs/#get-all-references)\n- [Create a reference](https://developer.github.com/v3/git/refs/#create-a-reference)\n- [Update a reference](https://developer.github.com/v3/git/refs/#update-a-reference)\n- [Delete a reference](https://developer.github.com/v3/git/refs/#delete-a-reference)\n\n**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.jean-grey-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).\n\n# [Git Tags](https://developer.github.com/v3/git/tags/)\n\nA Git tag is similar to a [Git reference](https://developer.github.com/v3/git/refs), but the Git commit that it points to never changes. Git tags are helpful when you want to point to specific releases. These endpoints allow you to read and write [tag objects](https://git-scm.com/book/en/v1/Git-Internals-Git-References#Tags) to your Git database on GitHub. See the [Git Database API](https://developer.github.com/v3/git) for more details. The Git tags API only supports [annotated tag objects](https://git-scm.com/book/en/v1/Git-Internals-Git-References#Tags), not lightweight tags.\n- [Get a tag](https://developer.github.com/v3/git/tags/#get-a-tag)\n- [Create a tag object](https://developer.github.com/v3/git/tags/#create-a-tag-object)\n- [Tag signature verification](https://developer.github.com/v3/git/tags/#tag-signature-verification)\n\n**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.jean-grey-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).\n\n# [Git Trees](https://developer.github.com/v3/git/trees/)\n\nA Git tree object creates the hierarchy between files in a Git repository. You can use the Git tree object to create the relationship between directories and the files they contain. These endpoints allow you to read and write [tree objects](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Tree-Objects) to your Git database on GitHub. See the [Git Database API](https://developer.github.com/v3/git) for more details.\n- [Get a tree](https://developer.github.com/v3/git/trees/#get-a-tree)\n- [Get a tree recursively](https://developer.github.com/v3/git/trees/#get-a-tree-recursively)\n- [Create a tree](https://developer.github.com/v3/git/trees/#create-a-tree)","name":"github-git","x-swgg-descriptionLineList":["# [Git Data](https://developer.github.com/v3/git/)","","The Git Database API gives you access to read and write raw Git objects to your Git database on GitHub and to list and update your references (branch heads and tags).","","This basically allows you to reimplement a lot of Git functionality over our API - by creating raw objects directly into the database and updating branch references you could technically do just about anything that Git can do without having Git installed.","","Git DB API functions will return a ```409 Conflict``` if the git repository for a Repository is empty or unavailable.  This typically means it is being created still. Contact [GitHub support](https://github.com/contact) if this response status persists.","","For more information on the Git object database, please read the [Git Internals](http://git-scm.com/book/en/v1/Git-Internals) chapter of the Pro Git book.","","As an example, if you wanted to commit a change to a file in your repository, you would:","- get the current commit object","- retrieve the tree it points to","- retrieve the content of the blob object that tree has for that particular file path","- change the content somehow and post a new blob object with that new content, getting a blob SHA back","- post a new tree object with that file path pointer replaced with your new blob SHA getting a tree SHA back","- create a new commit object with the current commit SHA as the parent and the new tree SHA, getting a commit SHA back","- update the reference of your branch to point to the new commit SHA","","It might seem complex, but it's actually pretty simple when you understand the model and it opens up a ton of things you could potentially do with the API.","","# [Git Blobs](https://developer.github.com/v3/git/blobs/)","","A Git blob (binary large object) is the object type used to store the contents of each file in a repository. The file's SHA-1 hash is computed and stored in the blob object. These endpoints allow you to read and write [blob objects](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects) to your Git database on GitHub. See the [Git Database API](https://developer.github.com/v3/git) for more details. Blobs leverage [these custom media types](https://developer.github.com/v3/git/blobs/#custom-media-types). You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).","- [Get a blob](https://developer.github.com/v3/git/blobs/#get-a-blob)","- [Create a blob](https://developer.github.com/v3/git/blobs/#create-a-blob)","- [Custom media types](https://developer.github.com/v3/git/blobs/#custom-media-types)","","**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.jean-grey-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","","Custom media types","","These are the supported media types for blobs. You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).","```","application/json","application/vnd.github.VERSION.raw","```","","# [Git Commits](https://developer.github.com/v3/git/commits/)","","A Git commit is a snapshot of the hierarchy ([Git tree](https://developer.github.com/v3/git/trees)) and the contents of the files ([Git blob](https://developer.github.com/v3/git/blobs)) in a Git repository. These endpoints allow you to read and write [commit objects](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects) to your Git database on GitHub. See the [Git Database API](https://developer.github.com/v3/git) for more details.","- [Get a commit](https://developer.github.com/v3/git/commits/#get-a-commit)","- [Create a commit](https://developer.github.com/v3/git/commits/#create-a-commit)","- [Commit signature verification](https://developer.github.com/v3/git/commits/#commit-signature-verification)","","**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.jean-grey-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","","# [Git Refs](https://developer.github.com/v3/git/refs/)","","A Git reference (```git ref```) is just a file that contains a Git commit SHA-1 hash. When referring to a Git commit, you can use the Git reference, which is an easy-to-remember name, rather than the hash. The Git reference can be rewritten to point to a new commit. A branch is just a Git reference that stores the new Git commit hash. These endpoints allow you to read and write [references](https://git-scm.com/book/en/v1/Git-Internals-Git-References) to your Git database on GitHub. See the [Git Database API](https://developer.github.com/v3/git) for more details.","- [Get a reference](https://developer.github.com/v3/git/refs/#get-a-reference)","- [Get all references](https://developer.github.com/v3/git/refs/#get-all-references)","- [Create a reference](https://developer.github.com/v3/git/refs/#create-a-reference)","- [Update a reference](https://developer.github.com/v3/git/refs/#update-a-reference)","- [Delete a reference](https://developer.github.com/v3/git/refs/#delete-a-reference)","","**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.jean-grey-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","","# [Git Tags](https://developer.github.com/v3/git/tags/)","","A Git tag is similar to a [Git reference](https://developer.github.com/v3/git/refs), but the Git commit that it points to never changes. Git tags are helpful when you want to point to specific releases. These endpoints allow you to read and write [tag objects](https://git-scm.com/book/en/v1/Git-Internals-Git-References#Tags) to your Git database on GitHub. See the [Git Database API](https://developer.github.com/v3/git) for more details. The Git tags API only supports [annotated tag objects](https://git-scm.com/book/en/v1/Git-Internals-Git-References#Tags), not lightweight tags.","- [Get a tag](https://developer.github.com/v3/git/tags/#get-a-tag)","- [Create a tag object](https://developer.github.com/v3/git/tags/#create-a-tag-object)","- [Tag signature verification](https://developer.github.com/v3/git/tags/#tag-signature-verification)","","**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.jean-grey-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","","# [Git Trees](https://developer.github.com/v3/git/trees/)","","A Git tree object creates the hierarchy between files in a Git repository. You can use the Git tree object to create the relationship between directories and the files they contain. These endpoints allow you to read and write [tree objects](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Tree-Objects) to your Git database on GitHub. See the [Git Database API](https://developer.github.com/v3/git) for more details.","- [Get a tree](https://developer.github.com/v3/git/trees/#get-a-tree)","- [Get a tree recursively](https://developer.github.com/v3/git/trees/#get-a-tree-recursively)","- [Create a tree](https://developer.github.com/v3/git/trees/#create-a-tree)"]},{"description":"# [Issues](https://developer.github.com/v3/issues/)\n\nIssues use [these custom media types](https://developer.github.com/v3/issues/#custom-media-types). You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).\n\n**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.jean-grey-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).\n\nCustom media types\n\nThese are the supported media types for issues. You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).\n```\napplication/vnd.github.VERSION.raw+json\napplication/vnd.github.VERSION.text+json\napplication/vnd.github.VERSION.html+json\napplication/vnd.github.VERSION.full+json\n```\n\n# [Issue Assignees](https://developer.github.com/v3/issues/assignees/)\n\nno description\n\n# [Issue Comments](https://developer.github.com/v3/issues/comments/)\n\nThe Issue Comments API supports listing, viewing, editing, and creating comments on issues and pull requests.\n\nIssue Comments use [these custom media types](https://developer.github.com/v3/issues/comments/#custom-media-types). You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).\n\nCustom media types\n\nThese are the supported media types for issue comments. You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).\n```\napplication/vnd.github.VERSION.raw+json\napplication/vnd.github.VERSION.text+json\napplication/vnd.github.VERSION.html+json\napplication/vnd.github.VERSION.full+json\n```\n\n# [Issue Events](https://developer.github.com/v3/issues/events/)\n\nRecords various events that occur around an issue or pull request. This is useful both for display on issue/pull request information pages and also to determine who should be notified of comments.\n\n####  Attributes\n- id - The Integer ID of the event.\n- url - The API URL for fetching the event.\n- actor - The User object that generated the event.\n- commit_id - The String SHA of a commit that referenced this Issue\n- commit_url - The GitHub API link to a commit that referenced this Issue\n- event - Identifies the actual type of Event that occurred.\n- created_at - The timestamp indicating when the event occurred.\n- labels - The Labels object, including `name` and `color` attributes. Only provided for `labeled` and `unlabeled` events.\n- assignee - The User object which was assigned to (or unassigned from) this Issue. Only provided for 'assigned' and 'unassigned' events.\n- assigner - The User object that performed the assignment (or unassignment) for this Issue. Only provided for 'assigned' and 'unassigned' events.\n- review_requester - The User who requested a review. Only provided for 'review_requested' and 'review_request_removed' events.\n- requested_reviewers - The Users whose reviews were requested. Only provided for 'review_requested' and 'review_request_removed' events.\n- lock_reason - The reason an issue or pull request conversation was locked, if one was provided. Only provided for `locked` events.\n- dismissed_review - A `dismissed_review` object that includes the `state`, `review_id`, `dismissal_message`, and `dismissal_commit_id` (the ID of the commit that dismissed the review) if one exists. Possible `state` strings include `commented`, `approved`, or `changes_requested`. Only provided for `review_dismissed` events.\n- milestone - The Milestone object including a `title` attribute. Only provided for `milestoned` and   `demilestoned` events.\n- rename - An object containing rename details including `from` and `to` attributes. Only   provided for `renamed` events.\n\n####  Events\n- closed - The issue was closed by the actor. When the commit_id is present, it   identifies the commit that closed the issue using \"closes / fixes #NN\"   syntax.\n- reopened - The issue was reopened by the actor.\n- subscribed - The actor subscribed to receive notifications for an issue.\n- merged - The issue was merged by the actor. The `commit_id` attribute is the SHA1 of   the HEAD commit that was merged.\n- referenced - The issue was referenced from a commit message. The `commit_id` attribute is   the commit SHA1 of where that happened.\n- mentioned - The actor was @mentioned in an issue body.\n- assigned - The issue was assigned to the actor.\n- unassigned - The actor was unassigned from the issue.\n- labeled - A label was added to the issue.\n- unlabeled - A label was removed from the issue.\n- milestoned - The issue was added to a milestone.\n- demilestoned - The issue was removed from a milestone.\n- renamed - The issue title was changed.\n- locked - The issue was locked by the actor.\n- unlocked - The issue was unlocked by the actor.\n- head_ref_deleted - The pull request's branch was deleted.\n- head_ref_restored - The pull request's branch was restored.\n- review_dismissed - The actor dismissed a review from the pull request.\n- review_requested - The actor requested review from the subject on this pull request.\n- review_request_removed - The actor removed the review request for the subject on this pull request.\n- marked_as_duplicate - A user with write permissions marked an issue as a duplicate of another issue or a pull request as a duplicate of another pull request.\n- unmarked_as_duplicate - An issue that a user had previously marked as a duplicate of another issue is no longer considered a duplicate, or a pull request that a user had previously marked as a duplicate of another pull request is no longer considered a duplicate.\n- added_to_project - The issue was added to a project board.\n- moved_columns_in_project - The issue was moved between columns in a project board.\n- removed_from_project - The issue was removed from a project board.\n- converted_note_to_issue - The issue was created by converting a note in a project board to an issue.\n\n**Note**: The project-related events ```added_to_project```, ```moved_columns_in_project```, ```removed_from_project```, and ```converted_note_to_issue``` will not be included in the response if project boards have been [disabled](https://help.github.com/articles/disabling-project-boards-in-a-repository) in the repository.\n\n# [Issue Labels](https://developer.github.com/v3/issues/labels/)\n\n**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.jean-grey-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).\n\n# [Issue Milestones](https://developer.github.com/v3/issues/milestones/)\n\n**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.jean-grey-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).\n\n# [Issue Timeline](https://developer.github.com/v3/issues/timeline/)\n\nThe API to get issue timeline events is currently available for developers to preview.   During the preview period, the APIs may change without advance notice.   Please see the [blog post](https://developer.github.com/changes/2016-05-23-timeline-preview-api/) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.mockingbird-preview\n```\n\n####  Timeline\n- [List events for an issue](https://developer.github.com/v3/issues/timeline/#list-events-for-an-issue)\n\nRecords various events that occur around an issue or pull request. This is useful both for display on issue and pull request information pages, as well as to determine who should be notified of comments.\n\n####  Attributes\n- id - The Integer ID of the event.\n- url - The API URL for fetching the event.\n- actor - The User object that generated the event.\n- commit_id - The String SHA of a commit that referenced this Issue.\n- event - Identifies the actual type of Event that occurred.\n- created_at - The timestamp indicating when the event occurred.\n- label - The Label object including `name` and `color` attributes. Only provided for `labeled`   and `unlabeled` events.\n- assignee - The User object which was assigned to (or unassigned from) this Issue. Only provided for `assigned` and `unassigned` events.\n- dismissed_review - A `dismissed_review` object that includes the `state`, `review_id`, `dismissal_message`, and `dismissal_commit_id` (the ID of the commit that dismissed the review) if one exists. Possible `state` strings include `commented`, `approved`, or `changes_requested`. Only provided for `review_dismissed` events.\n- milestone - The Milestone object including a `title` attribute. Only provided for `milestoned` and   `demilestoned` events.\n- source - The `id`, `actor`, and `url` for the source of a reference from another issue. Only provided for `cross-referenced` events.\n- rename - An object containing rename details including `from` and `to` attributes. Only   provided for `renamed` events.\n\n####  Events\n- added_to_project - The issue was added to a project board.\n- assigned - The issue was assigned to the assignee.\n- closed - The issue was closed by the actor. When the commit_id is present, it   identifies the commit that closed the issue using \"closes / fixes #NN\"   syntax.\n- commented - A comment was added to the issue.\n- committed - A commit was added to the pull request's `HEAD` branch. Only provided for pull requests.\n- converted_note_to_issue - The issue was created by converting a note in a project board to an issue.\n- cross-referenced - The issue was referenced from another issue. The `source` attribute contains the `id`, `actor`, and `url` of the reference's source.\n- demilestoned - The issue was removed from a milestone.\n- head_ref_deleted - The pull request's branch was deleted.\n- head_ref_restored - The pull request's branch was restored.\n- labeled - A label was added to the issue.\n- locked - The issue was locked by the actor.\n- marked_as_duplicate - A user with write permissions marked an issue as a duplicate of another issue or a pull request as a duplicate of another pull request.\n- mentioned - The actor was @mentioned in an issue body.\n- merged - The issue was merged by the actor. The `commit_id` attribute is the SHA1 of   the HEAD commit that was merged.\n- milestoned - The issue was added to a milestone.\n- moved_columns_in_project - The issue was moved between columns in a project board.\n- referenced - The issue was referenced from a commit message. The `commit_id` attribute is   the commit SHA1 of where that happened.\n- removed_from_project - The issue was removed from a project board.\n- renamed - The issue title was changed.\n- reopened - The issue was reopened by the actor.\n- review_dismissed - The actor dismissed a review from the pull request.\n- review_requested - The actor requested a review from the subject on this pull request.\n- review_request_removed - The actor removed the review request for the subject on this pull request.\n- subscribed - The actor subscribed to receive notifications for an issue.\n- unassigned - The assignee was unassigned from the issue.\n- unlabeled - A label was removed from the issue.\n- unlocked - The issue was unlocked by the actor.\n- unmarked_as_duplicate - An issue that a user had previously marked as a duplicate of another issue is no longer considered a duplicate, or a pull request that a user had previously marked as a duplicate of another pull request is no longer considered a duplicate.\n- unsubscribed - The actor unsubscribed to stop receiving notifications for an issue.\n\n**Note**: The project-related events ```added_to_project```, ```moved_columns_in_project```, ```removed_from_project```, and ```converted_note_to_issue``` will not be included in the response if project boards have been [disabled](https://help.github.com/articles/disabling-project-boards-in-a-repository) in the repository.","name":"github-issues","x-swgg-descriptionLineList":["# [Issues](https://developer.github.com/v3/issues/)","","Issues use [these custom media types](https://developer.github.com/v3/issues/#custom-media-types). You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).","","**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.jean-grey-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","","Custom media types","","These are the supported media types for issues. You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).","```","application/vnd.github.VERSION.raw+json","application/vnd.github.VERSION.text+json","application/vnd.github.VERSION.html+json","application/vnd.github.VERSION.full+json","```","","# [Issue Assignees](https://developer.github.com/v3/issues/assignees/)","","no description","","# [Issue Comments](https://developer.github.com/v3/issues/comments/)","","The Issue Comments API supports listing, viewing, editing, and creating comments on issues and pull requests.","","Issue Comments use [these custom media types](https://developer.github.com/v3/issues/comments/#custom-media-types). You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).","","Custom media types","","These are the supported media types for issue comments. You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).","```","application/vnd.github.VERSION.raw+json","application/vnd.github.VERSION.text+json","application/vnd.github.VERSION.html+json","application/vnd.github.VERSION.full+json","```","","# [Issue Events](https://developer.github.com/v3/issues/events/)","","Records various events that occur around an issue or pull request. This is useful both for display on issue/pull request information pages and also to determine who should be notified of comments.","","####  Attributes","- id - The Integer ID of the event.","- url - The API URL for fetching the event.","- actor - The User object that generated the event.","- commit_id - The String SHA of a commit that referenced this Issue","- commit_url - The GitHub API link to a commit that referenced this Issue","- event - Identifies the actual type of Event that occurred.","- created_at - The timestamp indicating when the event occurred.","- labels - The Labels object, including `name` and `color` attributes. Only provided for `labeled` and `unlabeled` events.","- assignee - The User object which was assigned to (or unassigned from) this Issue. Only provided for 'assigned' and 'unassigned' events.","- assigner - The User object that performed the assignment (or unassignment) for this Issue. Only provided for 'assigned' and 'unassigned' events.","- review_requester - The User who requested a review. Only provided for 'review_requested' and 'review_request_removed' events.","- requested_reviewers - The Users whose reviews were requested. Only provided for 'review_requested' and 'review_request_removed' events.","- lock_reason - The reason an issue or pull request conversation was locked, if one was provided. Only provided for `locked` events.","- dismissed_review - A `dismissed_review` object that includes the `state`, `review_id`, `dismissal_message`, and `dismissal_commit_id` (the ID of the commit that dismissed the review) if one exists. Possible `state` strings include `commented`, `approved`, or `changes_requested`. Only provided for `review_dismissed` events.","- milestone - The Milestone object including a `title` attribute. Only provided for `milestoned` and   `demilestoned` events.","- rename - An object containing rename details including `from` and `to` attributes. Only   provided for `renamed` events.","","####  Events","- closed - The issue was closed by the actor. When the commit_id is present, it   identifies the commit that closed the issue using \"closes / fixes #NN\"   syntax.","- reopened - The issue was reopened by the actor.","- subscribed - The actor subscribed to receive notifications for an issue.","- merged - The issue was merged by the actor. The `commit_id` attribute is the SHA1 of   the HEAD commit that was merged.","- referenced - The issue was referenced from a commit message. The `commit_id` attribute is   the commit SHA1 of where that happened.","- mentioned - The actor was @mentioned in an issue body.","- assigned - The issue was assigned to the actor.","- unassigned - The actor was unassigned from the issue.","- labeled - A label was added to the issue.","- unlabeled - A label was removed from the issue.","- milestoned - The issue was added to a milestone.","- demilestoned - The issue was removed from a milestone.","- renamed - The issue title was changed.","- locked - The issue was locked by the actor.","- unlocked - The issue was unlocked by the actor.","- head_ref_deleted - The pull request's branch was deleted.","- head_ref_restored - The pull request's branch was restored.","- review_dismissed - The actor dismissed a review from the pull request.","- review_requested - The actor requested review from the subject on this pull request.","- review_request_removed - The actor removed the review request for the subject on this pull request.","- marked_as_duplicate - A user with write permissions marked an issue as a duplicate of another issue or a pull request as a duplicate of another pull request.","- unmarked_as_duplicate - An issue that a user had previously marked as a duplicate of another issue is no longer considered a duplicate, or a pull request that a user had previously marked as a duplicate of another pull request is no longer considered a duplicate.","- added_to_project - The issue was added to a project board.","- moved_columns_in_project - The issue was moved between columns in a project board.","- removed_from_project - The issue was removed from a project board.","- converted_note_to_issue - The issue was created by converting a note in a project board to an issue.","","**Note**: The project-related events ```added_to_project```, ```moved_columns_in_project```, ```removed_from_project```, and ```converted_note_to_issue``` will not be included in the response if project boards have been [disabled](https://help.github.com/articles/disabling-project-boards-in-a-repository) in the repository.","","# [Issue Labels](https://developer.github.com/v3/issues/labels/)","","**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.jean-grey-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","","# [Issue Milestones](https://developer.github.com/v3/issues/milestones/)","","**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.jean-grey-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","","# [Issue Timeline](https://developer.github.com/v3/issues/timeline/)","","The API to get issue timeline events is currently available for developers to preview.   During the preview period, the APIs may change without advance notice.   Please see the [blog post](https://developer.github.com/changes/2016-05-23-timeline-preview-api/) for full details.","","To access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.mockingbird-preview","```","","####  Timeline","- [List events for an issue](https://developer.github.com/v3/issues/timeline/#list-events-for-an-issue)","","Records various events that occur around an issue or pull request. This is useful both for display on issue and pull request information pages, as well as to determine who should be notified of comments.","","####  Attributes","- id - The Integer ID of the event.","- url - The API URL for fetching the event.","- actor - The User object that generated the event.","- commit_id - The String SHA of a commit that referenced this Issue.","- event - Identifies the actual type of Event that occurred.","- created_at - The timestamp indicating when the event occurred.","- label - The Label object including `name` and `color` attributes. Only provided for `labeled`   and `unlabeled` events.","- assignee - The User object which was assigned to (or unassigned from) this Issue. Only provided for `assigned` and `unassigned` events.","- dismissed_review - A `dismissed_review` object that includes the `state`, `review_id`, `dismissal_message`, and `dismissal_commit_id` (the ID of the commit that dismissed the review) if one exists. Possible `state` strings include `commented`, `approved`, or `changes_requested`. Only provided for `review_dismissed` events.","- milestone - The Milestone object including a `title` attribute. Only provided for `milestoned` and   `demilestoned` events.","- source - The `id`, `actor`, and `url` for the source of a reference from another issue. Only provided for `cross-referenced` events.","- rename - An object containing rename details including `from` and `to` attributes. Only   provided for `renamed` events.","","####  Events","- added_to_project - The issue was added to a project board.","- assigned - The issue was assigned to the assignee.","- closed - The issue was closed by the actor. When the commit_id is present, it   identifies the commit that closed the issue using \"closes / fixes #NN\"   syntax.","- commented - A comment was added to the issue.","- committed - A commit was added to the pull request's `HEAD` branch. Only provided for pull requests.","- converted_note_to_issue - The issue was created by converting a note in a project board to an issue.","- cross-referenced - The issue was referenced from another issue. The `source` attribute contains the `id`, `actor`, and `url` of the reference's source.","- demilestoned - The issue was removed from a milestone.","- head_ref_deleted - The pull request's branch was deleted.","- head_ref_restored - The pull request's branch was restored.","- labeled - A label was added to the issue.","- locked - The issue was locked by the actor.","- marked_as_duplicate - A user with write permissions marked an issue as a duplicate of another issue or a pull request as a duplicate of another pull request.","- mentioned - The actor was @mentioned in an issue body.","- merged - The issue was merged by the actor. The `commit_id` attribute is the SHA1 of   the HEAD commit that was merged.","- milestoned - The issue was added to a milestone.","- moved_columns_in_project - The issue was moved between columns in a project board.","- referenced - The issue was referenced from a commit message. The `commit_id` attribute is   the commit SHA1 of where that happened.","- removed_from_project - The issue was removed from a project board.","- renamed - The issue title was changed.","- reopened - The issue was reopened by the actor.","- review_dismissed - The actor dismissed a review from the pull request.","- review_requested - The actor requested a review from the subject on this pull request.","- review_request_removed - The actor removed the review request for the subject on this pull request.","- subscribed - The actor subscribed to receive notifications for an issue.","- unassigned - The assignee was unassigned from the issue.","- unlabeled - A label was removed from the issue.","- unlocked - The issue was unlocked by the actor.","- unmarked_as_duplicate - An issue that a user had previously marked as a duplicate of another issue is no longer considered a duplicate, or a pull request that a user had previously marked as a duplicate of another pull request is no longer considered a duplicate.","- unsubscribed - The actor unsubscribed to stop receiving notifications for an issue.","","**Note**: The project-related events ```added_to_project```, ```moved_columns_in_project```, ```removed_from_project```, and ```converted_note_to_issue``` will not be included in the response if project boards have been [disabled](https://help.github.com/articles/disabling-project-boards-in-a-repository) in the repository."]},{"description":"# [Migration](https://developer.github.com/v3/migration/)\n\nThese APIs help you move projects to or from GitHub.\n\n# [Migrations](https://developer.github.com/v3/migration/migrations/)\n\nThe Migrations API is only available to [authenticated](https://developer.github.com/v3/#authentication) organization [owners](https://help.github.com/articles/permission-levels-for-an-organization/).\n\nTo access the Migrations API, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.wyandotte-preview+json\n```\n\n# [Source Imports](https://developer.github.com/v3/migration/source_imports/)\n\nThe source import APIs are currently in public preview. During this period, the APIs may change in a backwards-incompatible way.  To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.barred-rock-preview\n```\n\nThe Source Import API lets you start an import from a Git, Subversion, Mercurial, or Team Foundation Server source repository. This is the same functionality as [the GitHub Importer](https://help.github.com/articles/importing-from-other-version-control-systems-to-github/).\n\nA typical source import would [start the import](https://developer.github.com/v3/migration/source_imports/#start-an-import) and then (optionally) [update the authors](https://developer.github.com/v3/migration/source_imports/#map-a-commit-author) and/or [set the preference](https://developer.github.com/v3/migration/source_imports/#set-git-lfs-preference) for using Git LFS if large files exist in the import. A more detailed example can be seen in this diagram:\n```\n+---------+                     +--------+                              +---------------------+\n| Tooling |                     | GitHub |                              | Original Repository |\n+---------+                     +--------+                              +---------------------+\n     |                              |                                              |\n     |  Start import                |                                              |\n     |-----------------------------&gt;|                                              |\n     |                              |                                              |\n     |                              |  Download source data                        |\n     |                              |---------------------------------------------&gt;|\n     |                              |                        Begin streaming data  |\n     |                              |&lt;---------------------------------------------|\n     |                              |                                              |\n     |  Get import progress         |                                              |\n     |-----------------------------&gt;|                                              |\n     |       \"status\": \"importing\"  |                                              |\n     |&lt;-----------------------------|                                              |\n     |                              |                                              |\n     |  Get commit authors          |                                              |\n     |-----------------------------&gt;|                                              |\n     |                              |                                              |\n     |  Map a commit author         |                                              |\n     |-----------------------------&gt;|                                              |\n     |                              |                                              |\n     |                              |                                              |\n     |                              |                       Finish streaming data  |\n     |                              |&lt;---------------------------------------------|\n     |                              |                                              |\n     |                              |  Rewrite commits with mapped authors         |\n     |                              |------+                                       |\n     |                              |      |                                       |\n     |                              |&lt;-----+                                       |\n     |                              |                                              |\n     |                              |  Update repository on GitHub                 |\n     |                              |------+                                       |\n     |                              |      |                                       |\n     |                              |&lt;-----+                                       |\n     |                              |                                              |\n     |  Map a commit author         |                                              |\n     |-----------------------------&gt;|                                              |\n     |                              |  Rewrite commits with mapped authors         |\n     |                              |------+                                       |\n     |                              |      |                                       |\n     |                              |&lt;-----+                                       |\n     |                              |                                              |\n     |                              |  Update repository on GitHub                 |\n     |                              |------+                                       |\n     |                              |      |                                       |\n     |                              |&lt;-----+                                       |\n     |                              |                                              |\n     |  Get large files             |                                              |\n     |-----------------------------&gt;|                                              |\n     |                              |                                              |\n     |  opt_in to Git LFS           |                                              |\n     |-----------------------------&gt;|                                              |\n     |                              |  Rewrite commits for large files             |\n     |                              |------+                                       |\n     |                              |      |                                       |\n     |                              |&lt;-----+                                       |\n     |                              |                                              |\n     |                              |  Update repository on GitHub                 |\n     |                              |------+                                       |\n     |                              |      |                                       |\n     |                              |&lt;-----+                                       |\n     |                              |                                              |\n     |  Get import progress         |                                              |\n     |-----------------------------&gt;|                                              |\n     |        \"status\": \"complete\"  |                                              |\n     |&lt;-----------------------------|                                              |\n     |                              |                                              |\n     |                              |                                              |\n```","name":"github-migration","x-swgg-descriptionLineList":["# [Migration](https://developer.github.com/v3/migration/)","","These APIs help you move projects to or from GitHub.","","# [Migrations](https://developer.github.com/v3/migration/migrations/)","","The Migrations API is only available to [authenticated](https://developer.github.com/v3/#authentication) organization [owners](https://help.github.com/articles/permission-levels-for-an-organization/).","","To access the Migrations API, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.wyandotte-preview+json","```","","# [Source Imports](https://developer.github.com/v3/migration/source_imports/)","","The source import APIs are currently in public preview. During this period, the APIs may change in a backwards-incompatible way.  To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.barred-rock-preview","```","","The Source Import API lets you start an import from a Git, Subversion, Mercurial, or Team Foundation Server source repository. This is the same functionality as [the GitHub Importer](https://help.github.com/articles/importing-from-other-version-control-systems-to-github/).","","A typical source import would [start the import](https://developer.github.com/v3/migration/source_imports/#start-an-import) and then (optionally) [update the authors](https://developer.github.com/v3/migration/source_imports/#map-a-commit-author) and/or [set the preference](https://developer.github.com/v3/migration/source_imports/#set-git-lfs-preference) for using Git LFS if large files exist in the import. A more detailed example can be seen in this diagram:","```","+---------+                     +--------+                              +---------------------+","| Tooling |                     | GitHub |                              | Original Repository |","+---------+                     +--------+                              +---------------------+","     |                              |                                              |","     |  Start import                |                                              |","     |-----------------------------&gt;|                                              |","     |                              |                                              |","     |                              |  Download source data                        |","     |                              |---------------------------------------------&gt;|","     |                              |                        Begin streaming data  |","     |                              |&lt;---------------------------------------------|","     |                              |                                              |","     |  Get import progress         |                                              |","     |-----------------------------&gt;|                                              |","     |       \"status\": \"importing\"  |                                              |","     |&lt;-----------------------------|                                              |","     |                              |                                              |","     |  Get commit authors          |                                              |","     |-----------------------------&gt;|                                              |","     |                              |                                              |","     |  Map a commit author         |                                              |","     |-----------------------------&gt;|                                              |","     |                              |                                              |","     |                              |                                              |","     |                              |                       Finish streaming data  |","     |                              |&lt;---------------------------------------------|","     |                              |                                              |","     |                              |  Rewrite commits with mapped authors         |","     |                              |------+                                       |","     |                              |      |                                       |","     |                              |&lt;-----+                                       |","     |                              |                                              |","     |                              |  Update repository on GitHub                 |","     |                              |------+                                       |","     |                              |      |                                       |","     |                              |&lt;-----+                                       |","     |                              |                                              |","     |  Map a commit author         |                                              |","     |-----------------------------&gt;|                                              |","     |                              |  Rewrite commits with mapped authors         |","     |                              |------+                                       |","     |                              |      |                                       |","     |                              |&lt;-----+                                       |","     |                              |                                              |","     |                              |  Update repository on GitHub                 |","     |                              |------+                                       |","     |                              |      |                                       |","     |                              |&lt;-----+                                       |","     |                              |                                              |","     |  Get large files             |                                              |","     |-----------------------------&gt;|                                              |","     |                              |                                              |","     |  opt_in to Git LFS           |                                              |","     |-----------------------------&gt;|                                              |","     |                              |  Rewrite commits for large files             |","     |                              |------+                                       |","     |                              |      |                                       |","     |                              |&lt;-----+                                       |","     |                              |                                              |","     |                              |  Update repository on GitHub                 |","     |                              |------+                                       |","     |                              |      |                                       |","     |                              |&lt;-----+                                       |","     |                              |                                              |","     |  Get import progress         |                                              |","     |-----------------------------&gt;|                                              |","     |        \"status\": \"complete\"  |                                              |","     |&lt;-----------------------------|                                              |","     |                              |                                              |","     |                              |                                              |","```"]},{"description":"# [Miscellaneous](https://developer.github.com/v3/misc/)\n\nThis is a miscellaneous set of APIs which provide access to top level GitHub resources and info.\n\n# [Codes of Conduct](https://developer.github.com/v3/codes_of_conduct/)\n\nThe Codes of Conduct API is currently available for developers to preview.   During the preview period, the API may change without advance notice.\n\nTo access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.scarlet-witch-preview+json\n```\n\n# [Emojis](https://developer.github.com/v3/emojis/)\n\nLists all the emojis available to use on GitHub.\n\n# [Gitignore](https://developer.github.com/v3/gitignore/)\n\nWhen you create a new GitHub repository via the API, you can specify a [.gitignore template](https://help.github.com/articles/ignoring-files) to apply to the repository upon creation. The .gitignore Templates API lists and fetches templates from the [GitHub .gitignore repository](https://github.com/github/gitignore).\n\n# [Licenses](https://developer.github.com/v3/licenses/)\n\nThe Licenses API returns metadata about popular open source licenses and information about a particular project's license file.\n\nThe Licenses API uses [the open source Ruby Gem Licensee](https://github.com/benbalter/licensee) to attempt to identify the project's license. Licensee matches the contents of a project's ```LICENSE``` file (if it exists) against a short list of known licenses. As a result, the API does not take into account the licenses of project dependencies or other means of documenting a project's license such as references to the license name in the documentation.\n\nIf a license is matched, the license key and name returned conforms to the [SPDX specification](https://spdx.org/).\n\n**Note:** These endpoints will also return a repository's license information:\n- [Get a repository](https://developer.github.com/v3/repos/#get)\n- [List user repositories](https://developer.github.com/v3/repos/#list-user-repositories)\n- [List organization repositories](https://developer.github.com/v3/repos/#list-organization-repositories)\n- [List forks](https://developer.github.com/v3/repos/forks/#list-forks)\n- [List repositories being watched](https://developer.github.com/v3/activity/watching/#list-repositories-being-watched)\n- [List team repos](https://developer.github.com/v3/teams/#list-team-repos)\n\nGitHub is a lot of things, but it’s not a law firm. As such, GitHub does not provide legal advice. Using the Licenses API or sending us an email about it does not constitute legal advice nor does it create an attorney-client relationship. If you have any questions about what you can and can't do with a particular license, you should consult with your own legal counsel before moving forward. In fact, you should always consult with your own lawyer before making any decisions that might have legal ramifications or that may impact your legal rights.\n\nGitHub created the License API to help users get information about open source licenses and the projects that use them. We hope it helps, but please keep in mind that we’re not lawyers (at least not most of us aren't) and that we make mistakes like everyone else. For that reason, GitHub provides the API on an “as-is” basis and makes no warranties regarding any information or licenses provided on or through it, and disclaims liability for damages resulting from using the API.\n\n# [Markdown](https://developer.github.com/v3/markdown/)\n\nno description\n\n# [Meta](https://developer.github.com/v3/meta/)\n\nThis endpoint provides information about GitHub.com, the service.\n\n# [Rate Limit](https://developer.github.com/v3/rate_limit/)\n\nThe overview documentation describes the [rate limit rules](https://developer.github.com/v3/#rate-limiting). You can check your current rate limit status at any time using the Rate Limit API described below.","name":"github-misc","x-swgg-descriptionLineList":["# [Miscellaneous](https://developer.github.com/v3/misc/)","","This is a miscellaneous set of APIs which provide access to top level GitHub resources and info.","","# [Codes of Conduct](https://developer.github.com/v3/codes_of_conduct/)","","The Codes of Conduct API is currently available for developers to preview.   During the preview period, the API may change without advance notice.","","To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.scarlet-witch-preview+json","```","","# [Emojis](https://developer.github.com/v3/emojis/)","","Lists all the emojis available to use on GitHub.","","# [Gitignore](https://developer.github.com/v3/gitignore/)","","When you create a new GitHub repository via the API, you can specify a [.gitignore template](https://help.github.com/articles/ignoring-files) to apply to the repository upon creation. The .gitignore Templates API lists and fetches templates from the [GitHub .gitignore repository](https://github.com/github/gitignore).","","# [Licenses](https://developer.github.com/v3/licenses/)","","The Licenses API returns metadata about popular open source licenses and information about a particular project's license file.","","The Licenses API uses [the open source Ruby Gem Licensee](https://github.com/benbalter/licensee) to attempt to identify the project's license. Licensee matches the contents of a project's ```LICENSE``` file (if it exists) against a short list of known licenses. As a result, the API does not take into account the licenses of project dependencies or other means of documenting a project's license such as references to the license name in the documentation.","","If a license is matched, the license key and name returned conforms to the [SPDX specification](https://spdx.org/).","","**Note:** These endpoints will also return a repository's license information:","- [Get a repository](https://developer.github.com/v3/repos/#get)","- [List user repositories](https://developer.github.com/v3/repos/#list-user-repositories)","- [List organization repositories](https://developer.github.com/v3/repos/#list-organization-repositories)","- [List forks](https://developer.github.com/v3/repos/forks/#list-forks)","- [List repositories being watched](https://developer.github.com/v3/activity/watching/#list-repositories-being-watched)","- [List team repos](https://developer.github.com/v3/teams/#list-team-repos)","","GitHub is a lot of things, but it’s not a law firm. As such, GitHub does not provide legal advice. Using the Licenses API or sending us an email about it does not constitute legal advice nor does it create an attorney-client relationship. If you have any questions about what you can and can't do with a particular license, you should consult with your own legal counsel before moving forward. In fact, you should always consult with your own lawyer before making any decisions that might have legal ramifications or that may impact your legal rights.","","GitHub created the License API to help users get information about open source licenses and the projects that use them. We hope it helps, but please keep in mind that we’re not lawyers (at least not most of us aren't) and that we make mistakes like everyone else. For that reason, GitHub provides the API on an “as-is” basis and makes no warranties regarding any information or licenses provided on or through it, and disclaims liability for damages resulting from using the API.","","# [Markdown](https://developer.github.com/v3/markdown/)","","no description","","# [Meta](https://developer.github.com/v3/meta/)","","This endpoint provides information about GitHub.com, the service.","","# [Rate Limit](https://developer.github.com/v3/rate_limit/)","","The overview documentation describes the [rate limit rules](https://developer.github.com/v3/#rate-limiting). You can check your current rate limit status at any time using the Rate Limit API described below."]},{"description":"# [Organizations](https://developer.github.com/v3/orgs/)\n\n**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.jean-grey-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).\n\n# [Blocking Organization Users](https://developer.github.com/v3/orgs/blocking/)\n\n**Note:** The User Blocking API on GitHub is currently available for developers to preview. To access the API, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.giant-sentry-fist-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).\n\nThe token used to authenticate the call must have the ```admin:org``` scope in order to make any blocking calls for an organization. Otherwise, the response returns ```HTTP 404```.\n\n# [Organization Members](https://developer.github.com/v3/orgs/members/)\n\nno description\n\n# [Organization Outside Collaborators](https://developer.github.com/v3/orgs/outside_collaborators/)\n\nno description\n\n# [Organization Webhooks](https://developer.github.com/v3/orgs/hooks/)\n\nOrganization webhooks allow you to receive HTTP ```POST``` payloads whenever certain events happen within the organization. Subscribing to these events makes it possible to build integrations that react to actions on GitHub.com. For more information on actions you can subscribe to, check out our [Events documentation](https://developer.github.com/webhooks/#events).","name":"github-orgs","x-swgg-descriptionLineList":["# [Organizations](https://developer.github.com/v3/orgs/)","","**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.jean-grey-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","","# [Blocking Organization Users](https://developer.github.com/v3/orgs/blocking/)","","**Note:** The User Blocking API on GitHub is currently available for developers to preview. To access the API, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.giant-sentry-fist-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","","The token used to authenticate the call must have the ```admin:org``` scope in order to make any blocking calls for an organization. Otherwise, the response returns ```HTTP 404```.","","# [Organization Members](https://developer.github.com/v3/orgs/members/)","","no description","","# [Organization Outside Collaborators](https://developer.github.com/v3/orgs/outside_collaborators/)","","no description","","# [Organization Webhooks](https://developer.github.com/v3/orgs/hooks/)","","Organization webhooks allow you to receive HTTP ```POST``` payloads whenever certain events happen within the organization. Subscribing to these events makes it possible to build integrations that react to actions on GitHub.com. For more information on actions you can subscribe to, check out our [Events documentation](https://developer.github.com/webhooks/#events)."]},{"description":"# [Projects](https://developer.github.com/v3/projects/)\n\nThe Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.inertia-preview+json\n```\n\n**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.jean-grey-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).\n\n# [Project cards](https://developer.github.com/v3/projects/cards/)\n\nThe Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.inertia-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).\n\n# [Project collaborators](https://developer.github.com/v3/projects/collaborators/)\n\nThis API allows you to interact with an organization's projects.\n\n# [Project columns](https://developer.github.com/v3/projects/columns/)\n\nThe Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.inertia-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","name":"github-projects","x-swgg-descriptionLineList":["# [Projects](https://developer.github.com/v3/projects/)","","The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.inertia-preview+json","```","","**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.jean-grey-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","","# [Project cards](https://developer.github.com/v3/projects/cards/)","","The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.inertia-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","","# [Project collaborators](https://developer.github.com/v3/projects/collaborators/)","","This API allows you to interact with an organization's projects.","","# [Project columns](https://developer.github.com/v3/projects/columns/)","","The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.inertia-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact)."]},{"description":"# [Pull Requests](https://developer.github.com/v3/pulls/)\n\nThe Pull Request API allows you to list, view, edit, create, and even merge pull requests. Comments on pull requests can be managed via the [Issue Comments API](https://developer.github.com/v3/issues/comments/).\n\nPull Requests use [these custom media types](https://developer.github.com/v3/pulls/#custom-media-types). You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).\n\n**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.jean-grey-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).\n\nCustom media types\n\nThese are the supported media types for pull requests. You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).\n```\napplication/vnd.github.VERSION.raw+json\napplication/vnd.github.VERSION.text+json\napplication/vnd.github.VERSION.html+json\napplication/vnd.github.VERSION.full+json\napplication/vnd.github.VERSION.diff\napplication/vnd.github.VERSION.patch\n```\n\n# [Review Comments](https://developer.github.com/v3/pulls/comments/)\n\nPull Request review comments are comments on a portion of the unified diff.  These are separate from Commit Comments (which are applied directly to a commit, outside of the Pull Request view), and Issue Comments (which do not reference a portion of the unified diff).\n\nPull Request review comments use [these custom media types](https://developer.github.com/v3/pulls/comments/#custom-media-types). You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).\n\nCustom media types\n\nThese are the supported media types for pull request review comments. You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).\n```\napplication/vnd.github.VERSION.raw+json\napplication/vnd.github.VERSION.text+json\napplication/vnd.github.VERSION.html+json\napplication/vnd.github.VERSION.full+json\n```\n\n# [Review Requests](https://developer.github.com/v3/pulls/review_requests/)\n\nPull request authors and repository owners and collaborators can request a pull request review from anyone with write access to the repository. Each requested reviewer will receive a notification asking them to review the pull request.\n\n# [Reviews](https://developer.github.com/v3/pulls/reviews/)\n\nPull Request Reviews are groups of Pull Request Review Comments on the Pull Request, grouped together with a state and optional body comment.\n\n**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.jean-grey-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","name":"github-pulls","x-swgg-descriptionLineList":["# [Pull Requests](https://developer.github.com/v3/pulls/)","","The Pull Request API allows you to list, view, edit, create, and even merge pull requests. Comments on pull requests can be managed via the [Issue Comments API](https://developer.github.com/v3/issues/comments/).","","Pull Requests use [these custom media types](https://developer.github.com/v3/pulls/#custom-media-types). You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).","","**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.jean-grey-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","","Custom media types","","These are the supported media types for pull requests. You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).","```","application/vnd.github.VERSION.raw+json","application/vnd.github.VERSION.text+json","application/vnd.github.VERSION.html+json","application/vnd.github.VERSION.full+json","application/vnd.github.VERSION.diff","application/vnd.github.VERSION.patch","```","","# [Review Comments](https://developer.github.com/v3/pulls/comments/)","","Pull Request review comments are comments on a portion of the unified diff.  These are separate from Commit Comments (which are applied directly to a commit, outside of the Pull Request view), and Issue Comments (which do not reference a portion of the unified diff).","","Pull Request review comments use [these custom media types](https://developer.github.com/v3/pulls/comments/#custom-media-types). You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).","","Custom media types","","These are the supported media types for pull request review comments. You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).","```","application/vnd.github.VERSION.raw+json","application/vnd.github.VERSION.text+json","application/vnd.github.VERSION.html+json","application/vnd.github.VERSION.full+json","```","","# [Review Requests](https://developer.github.com/v3/pulls/review_requests/)","","Pull request authors and repository owners and collaborators can request a pull request review from anyone with write access to the repository. Each requested reviewer will receive a notification asking them to review the pull request.","","# [Reviews](https://developer.github.com/v3/pulls/reviews/)","","Pull Request Reviews are groups of Pull Request Review Comments on the Pull Request, grouped together with a state and optional body comment.","","**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.jean-grey-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact)."]},{"description":"# [Reactions](https://developer.github.com/v3/reactions/)\n\n**Note:** APIs for managing reactions are currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.squirrel-girl-preview+json\n```\n\n**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.jean-grey-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","name":"github-reactions","x-swgg-descriptionLineList":["# [Reactions](https://developer.github.com/v3/reactions/)","","**Note:** APIs for managing reactions are currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.squirrel-girl-preview+json","```","","**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.jean-grey-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact)."]},{"description":"# [Repositories](https://developer.github.com/v3/repos/)\n\n**Note:** The ```topics``` property for repositories on GitHub is currently available for developers to preview. To view the ```topics``` property in calls that return repository results, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.mercy-preview+json\n```\n\n**Note:** The [Repository Transfer API](https://developer.github.com/changes/2017-11-09-repository-transfer-api-preview) is currently available for developers to preview. To access the API, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.nightshade-preview+json\n```\n\n**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.jean-grey-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).\n\n# [Branches](https://developer.github.com/v3/repos/branches/)\n\nno description\n\n# [Collaborators](https://developer.github.com/v3/repos/collaborators/)\n\nno description\n\n# [Comments](https://developer.github.com/v3/repos/comments/)\n\nCustom media types\n\nThese are the supported media types for commit comments. You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).\n```\napplication/vnd.github-commitcomment.raw+json\napplication/vnd.github-commitcomment.text+json\napplication/vnd.github-commitcomment.html+json\napplication/vnd.github-commitcomment.full+json\n```\n\n# [Commits](https://developer.github.com/v3/repos/commits/)\n\nThe Repo Commits API supports listing, viewing, and comparing commits in a repository.\n\n# [Community](https://developer.github.com/v3/repos/community/)\n\nWe're currently offering a preview of the Community Profile API (also known as community health).\n\nTo access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.black-panther-preview+json\n```\n\n# [Contents](https://developer.github.com/v3/repos/contents/)\n\nThese API methods let you retrieve the contents of files within a repository as Base64 encoded content. See [media types](https://developer.github.com/v3/repos/contents/#custom-media-types) for requesting the raw format or rendered HTML (when supported).\n\nCustom media types\n\n[READMEs](https://developer.github.com/v3/repos/contents/#get-the-readme), [files](https://developer.github.com/v3/repos/contents/#get-contents), and [symlinks](https://developer.github.com/v3/repos/contents/#get-contents) support the following custom media types:\n```\napplication/vnd.github.VERSION.raw\napplication/vnd.github.VERSION.html\n```\n\n# [Deploy Keys](https://developer.github.com/v3/repos/keys/)\n\nno description\n\n# [Deployments](https://developer.github.com/v3/repos/deployments/)\n\nDeployments are a request for a specific ref (branch, SHA, tag) to be deployed. GitHub then dispatches deployment events that external services can listen for and act on. This enables developers and organizations to build loosely-coupled tooling around deployments, without having to worry about implementation details of delivering different types of applications (e.g., web, native).\n\nDeployment statuses allow external services to mark deployments with an ```error```, ```failure```, ```pending```, or ```success``` state, which can then be consumed by any system listening for ```deployment_status``` events.\n\nDeployment statuses can also include an optional ```description``` and ```target_url```, and we highly recommend providing them as they make deployment statuses much more useful. The ```target_url``` would be the full URL to the deployment output, and the ```description``` would be the high level summary of what happened with the deployment.\n\nDeployments and deployment statuses both have associated [repository events](https://developer.github.com/v3/activity/events/types/#deploymentevent) when they're created. This allows webhooks and 3rd party integrations to respond to deployment requests as well as update the status of a deployment as progress is made.\n\nBelow is a simple sequence diagram for how these interactions would work.\n```\n+---------+             +--------+            +-----------+        +-------------+\n| Tooling |             | GitHub |            | 3rd Party |        | Your Server |\n+---------+             +--------+            +-----------+        +-------------+\n     |                      |                       |                     |\n     |  Create Deployment   |                       |                     |\n     |---------------------&gt;|                       |                     |\n     |                      |                       |                     |\n     |  Deployment Created  |                       |                     |\n     |&lt;---------------------|                       |                     |\n     |                      |                       |                     |\n     |                      |   Deployment Event    |                     |\n     |                      |----------------------&gt;|                     |\n     |                      |                       |     SSH+Deploys     |\n     |                      |                       |--------------------&gt;|\n     |                      |                       |                     |\n     |                      |   Deployment Status   |                     |\n     |                      |&lt;----------------------|                     |\n     |                      |                       |                     |\n     |                      |                       |   Deploy Completed  |\n     |                      |                       |&lt;--------------------|\n     |                      |                       |                     |\n     |                      |   Deployment Status   |                     |\n     |                      |&lt;----------------------|                     |\n     |                      |                       |                     |\n```\n\n\nKeep in mind that GitHub is never actually accessing your servers. It's up to your 3rd party integration to interact with deployment events.  This allows for [GitHub integrations](https://github.com/integrations) as well as running your own systems depending on your use case. Multiple systems can listen for deployment events, and it's up to each of those systems to decide whether or not they're responsible for pushing the code out to your servers, building native code, etc.\n\nNote that the ```repo_deployment``` [OAuth scope](https://developer.github.com/apps/building-integrations/setting-up-and-registering-oauth-apps/about-scopes-for-oauth-apps/) grants targeted access to deployments and deployment statuses **without** granting access to repository code, while the ```repo``` scope grants permission to code as well.\n\n**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.jean-grey-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).\n\n# [Downloads](https://developer.github.com/v3/repos/downloads/)\n\nThe Downloads API (described below) was [deprecated on December 11, 2012](https://github.com/blog/1302-goodbye-uploads). It will be removed at a future date.\n\nWe recommend using [Releases](https://developer.github.com/v3/repos/releases/) instead.\n\nThe downloads API is for package downloads only. If you want to get source tarballs you should use [this](https://developer.github.com/v3/repos/contents/#get-archive-link) instead.\n\n# [Forks](https://developer.github.com/v3/repos/forks/)\n\nno description\n\n# [Merging](https://developer.github.com/v3/repos/merging/)\n\nThe Repo Merging API supports merging branches in a repository. This accomplishes essentially the same thing as merging one branch into another in a local repository and then pushing to GitHub. The benefit is that the merge is done on the server side and a local repository is not needed. This makes it more appropriate for automation and other tools where maintaining local repositories would be cumbersome and inefficient.\n\nThe authenticated user will be the author of any merges done through this endpoint.\n\n# [Pages](https://developer.github.com/v3/repos/pages/)\n\nThe GitHub Pages API retrieves information about your GitHub Pages configuration, and the statuses of your builds. Information about the site and the builds can only be accessed by authenticated owners, even though the websites are public.\n\nIn JSON responses, ```status``` can be one of:\n-  ```null```, which means the site has yet to be built\n-  ```queued```, which means the build has been requested but not yet begun\n-  ```building```, which means the build is in progress\n-  ```built```, which means the site has been built\n-  ```errored```, which indicates an error occurred during the build\n\n# [Releases](https://developer.github.com/v3/repos/releases/)\n\n**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.jean-grey-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).\n\n# [Repository Invitations](https://developer.github.com/v3/repos/invitations/)\n\nThe Repository Invitations API allows users or external services to invite other users to collaborate on a repo. The invited users (or external services on behalf of invited users) can choose to accept or decline the invitations.\n\nNote that the ```repo:invite``` [OAuth scope](https://developer.github.com/apps/building-integrations/setting-up-and-registering-oauth-apps/about-scopes-for-oauth-apps/) grants targeted access to invitations **without** also granting access to repository code, while the ```repo``` scope grants permission to code as well as invitations.\n\n# [Repository Webhooks](https://developer.github.com/v3/repos/hooks/)\n\nThe Repository Webhooks API allows repository admins to manage the post-receive hooks for a repository.  Webhooks can be managed using the JSON HTTP API, or the [PubSubHubbub API](https://developer.github.com/v3/repos/hooks/#pubsubhubbub).\n\nIf you would like to set up a single webhook to receive events from all of your organization's repositories, check out our [API documentation for Organization Webhooks](https://developer.github.com/v3/orgs/hooks/).\n\n# [Statistics](https://developer.github.com/v3/repos/statistics/)\n\nThe Repository Statistics API allows you to fetch the data that GitHub uses for visualizing different types of repository activity.\n\n####  A word about caching\n\nComputing repository statistics is an expensive operation, so we try to return cached data whenever possible.  If the data hasn't been cached when you query a repository's statistics, you'll receive a ```202``` response; a background job is also fired to start compiling these statistics. Give the job a few moments to complete, and then submit the request again. If the job has completed, that request will receive a ```200``` response with the statistics in the response body.\n\nRepository statistics are cached by the SHA of the repository's default branch, which is usually master; pushing to the default branch resets the statistics cache.\n\n####  Statistics exclude some types of commits\n\nThe statistics exposed by the API match the statistics shown by [different repository graphs](https://help.github.com/articles/about-repository-graphs/).\n\nTo summarize:\n- All statistics exclude merge commits.\n- Contributor statistics also exclude empty commits.\n\n# [Statuses](https://developer.github.com/v3/repos/statuses/)\n\n**Note:** The [Statuses API](https://developer.github.com/v3/repos/statuses) now returns the ```avatar_url``` for each status object in a response. To receive ```avatar_url``` in the API response, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.howard-the-duck-preview+json\n```\n\n**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.jean-grey-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).\n\nThe status API allows external services to mark commits with an ```error```, ```failure```, ```pending```, or ```success``` state, which is then reflected in pull requests involving those commits.\n\nStatuses can also include an optional ```description``` and ```target_url```, and we highly recommend providing them as they make statuses much more useful in the GitHub UI.\n\nAs an example, one common use is for continuous integration services to mark commits as passing or failing builds using status.  The ```target_url``` would be the full URL to the build output, and the ```description``` would be the high level summary of what happened with the build.\n\nStatuses can include a ```context``` to indicate what service is providing that status. For example, you may have your continuous integration service push statuses with a context of ```ci```, and a security audit tool push statuses with a context of ```security```.  You can then use the [combined status endpoint](https://developer.github.com/v3/repos/statuses/#get-the-combined-status-for-a-specific-ref) to retrieve the whole status for a commit.\n\nNote that the ```repo:status``` [OAuth scope](https://developer.github.com/apps/building-integrations/setting-up-and-registering-oauth-apps/about-scopes-for-oauth-apps/) grants targeted access to statuses **without** also granting access to repository code, while the ```repo``` scope grants permission to code as well as statuses.\n\n# [Traffic](https://developer.github.com/v3/repos/traffic/)\n\nFor repositories that you have push access to, the traffic API provides access to the information provided in the [graphs section](https://help.github.com/articles/about-repository-graphs/#traffic).","name":"github-repos","x-swgg-descriptionLineList":["# [Repositories](https://developer.github.com/v3/repos/)","","**Note:** The ```topics``` property for repositories on GitHub is currently available for developers to preview. To view the ```topics``` property in calls that return repository results, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.mercy-preview+json","```","","**Note:** The [Repository Transfer API](https://developer.github.com/changes/2017-11-09-repository-transfer-api-preview) is currently available for developers to preview. To access the API, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.nightshade-preview+json","```","","**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.jean-grey-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","","# [Branches](https://developer.github.com/v3/repos/branches/)","","no description","","# [Collaborators](https://developer.github.com/v3/repos/collaborators/)","","no description","","# [Comments](https://developer.github.com/v3/repos/comments/)","","Custom media types","","These are the supported media types for commit comments. You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).","```","application/vnd.github-commitcomment.raw+json","application/vnd.github-commitcomment.text+json","application/vnd.github-commitcomment.html+json","application/vnd.github-commitcomment.full+json","```","","# [Commits](https://developer.github.com/v3/repos/commits/)","","The Repo Commits API supports listing, viewing, and comparing commits in a repository.","","# [Community](https://developer.github.com/v3/repos/community/)","","We're currently offering a preview of the Community Profile API (also known as community health).","","To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.black-panther-preview+json","```","","# [Contents](https://developer.github.com/v3/repos/contents/)","","These API methods let you retrieve the contents of files within a repository as Base64 encoded content. See [media types](https://developer.github.com/v3/repos/contents/#custom-media-types) for requesting the raw format or rendered HTML (when supported).","","Custom media types","","[READMEs](https://developer.github.com/v3/repos/contents/#get-the-readme), [files](https://developer.github.com/v3/repos/contents/#get-contents), and [symlinks](https://developer.github.com/v3/repos/contents/#get-contents) support the following custom media types:","```","application/vnd.github.VERSION.raw","application/vnd.github.VERSION.html","```","","# [Deploy Keys](https://developer.github.com/v3/repos/keys/)","","no description","","# [Deployments](https://developer.github.com/v3/repos/deployments/)","","Deployments are a request for a specific ref (branch, SHA, tag) to be deployed. GitHub then dispatches deployment events that external services can listen for and act on. This enables developers and organizations to build loosely-coupled tooling around deployments, without having to worry about implementation details of delivering different types of applications (e.g., web, native).","","Deployment statuses allow external services to mark deployments with an ```error```, ```failure```, ```pending```, or ```success``` state, which can then be consumed by any system listening for ```deployment_status``` events.","","Deployment statuses can also include an optional ```description``` and ```target_url```, and we highly recommend providing them as they make deployment statuses much more useful. The ```target_url``` would be the full URL to the deployment output, and the ```description``` would be the high level summary of what happened with the deployment.","","Deployments and deployment statuses both have associated [repository events](https://developer.github.com/v3/activity/events/types/#deploymentevent) when they're created. This allows webhooks and 3rd party integrations to respond to deployment requests as well as update the status of a deployment as progress is made.","","Below is a simple sequence diagram for how these interactions would work.","```","+---------+             +--------+            +-----------+        +-------------+","| Tooling |             | GitHub |            | 3rd Party |        | Your Server |","+---------+             +--------+            +-----------+        +-------------+","     |                      |                       |                     |","     |  Create Deployment   |                       |                     |","     |---------------------&gt;|                       |                     |","     |                      |                       |                     |","     |  Deployment Created  |                       |                     |","     |&lt;---------------------|                       |                     |","     |                      |                       |                     |","     |                      |   Deployment Event    |                     |","     |                      |----------------------&gt;|                     |","     |                      |                       |     SSH+Deploys     |","     |                      |                       |--------------------&gt;|","     |                      |                       |                     |","     |                      |   Deployment Status   |                     |","     |                      |&lt;----------------------|                     |","     |                      |                       |                     |","     |                      |                       |   Deploy Completed  |","     |                      |                       |&lt;--------------------|","     |                      |                       |                     |","     |                      |   Deployment Status   |                     |","     |                      |&lt;----------------------|                     |","     |                      |                       |                     |","```","","","Keep in mind that GitHub is never actually accessing your servers. It's up to your 3rd party integration to interact with deployment events.  This allows for [GitHub integrations](https://github.com/integrations) as well as running your own systems depending on your use case. Multiple systems can listen for deployment events, and it's up to each of those systems to decide whether or not they're responsible for pushing the code out to your servers, building native code, etc.","","Note that the ```repo_deployment``` [OAuth scope](https://developer.github.com/apps/building-integrations/setting-up-and-registering-oauth-apps/about-scopes-for-oauth-apps/) grants targeted access to deployments and deployment statuses **without** granting access to repository code, while the ```repo``` scope grants permission to code as well.","","**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.jean-grey-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","","# [Downloads](https://developer.github.com/v3/repos/downloads/)","","The Downloads API (described below) was [deprecated on December 11, 2012](https://github.com/blog/1302-goodbye-uploads). It will be removed at a future date.","","We recommend using [Releases](https://developer.github.com/v3/repos/releases/) instead.","","The downloads API is for package downloads only. If you want to get source tarballs you should use [this](https://developer.github.com/v3/repos/contents/#get-archive-link) instead.","","# [Forks](https://developer.github.com/v3/repos/forks/)","","no description","","# [Merging](https://developer.github.com/v3/repos/merging/)","","The Repo Merging API supports merging branches in a repository. This accomplishes essentially the same thing as merging one branch into another in a local repository and then pushing to GitHub. The benefit is that the merge is done on the server side and a local repository is not needed. This makes it more appropriate for automation and other tools where maintaining local repositories would be cumbersome and inefficient.","","The authenticated user will be the author of any merges done through this endpoint.","","# [Pages](https://developer.github.com/v3/repos/pages/)","","The GitHub Pages API retrieves information about your GitHub Pages configuration, and the statuses of your builds. Information about the site and the builds can only be accessed by authenticated owners, even though the websites are public.","","In JSON responses, ```status``` can be one of:","-  ```null```, which means the site has yet to be built","-  ```queued```, which means the build has been requested but not yet begun","-  ```building```, which means the build is in progress","-  ```built```, which means the site has been built","-  ```errored```, which indicates an error occurred during the build","","# [Releases](https://developer.github.com/v3/repos/releases/)","","**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.jean-grey-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","","# [Repository Invitations](https://developer.github.com/v3/repos/invitations/)","","The Repository Invitations API allows users or external services to invite other users to collaborate on a repo. The invited users (or external services on behalf of invited users) can choose to accept or decline the invitations.","","Note that the ```repo:invite``` [OAuth scope](https://developer.github.com/apps/building-integrations/setting-up-and-registering-oauth-apps/about-scopes-for-oauth-apps/) grants targeted access to invitations **without** also granting access to repository code, while the ```repo``` scope grants permission to code as well as invitations.","","# [Repository Webhooks](https://developer.github.com/v3/repos/hooks/)","","The Repository Webhooks API allows repository admins to manage the post-receive hooks for a repository.  Webhooks can be managed using the JSON HTTP API, or the [PubSubHubbub API](https://developer.github.com/v3/repos/hooks/#pubsubhubbub).","","If you would like to set up a single webhook to receive events from all of your organization's repositories, check out our [API documentation for Organization Webhooks](https://developer.github.com/v3/orgs/hooks/).","","# [Statistics](https://developer.github.com/v3/repos/statistics/)","","The Repository Statistics API allows you to fetch the data that GitHub uses for visualizing different types of repository activity.","","####  A word about caching","","Computing repository statistics is an expensive operation, so we try to return cached data whenever possible.  If the data hasn't been cached when you query a repository's statistics, you'll receive a ```202``` response; a background job is also fired to start compiling these statistics. Give the job a few moments to complete, and then submit the request again. If the job has completed, that request will receive a ```200``` response with the statistics in the response body.","","Repository statistics are cached by the SHA of the repository's default branch, which is usually master; pushing to the default branch resets the statistics cache.","","####  Statistics exclude some types of commits","","The statistics exposed by the API match the statistics shown by [different repository graphs](https://help.github.com/articles/about-repository-graphs/).","","To summarize:","- All statistics exclude merge commits.","- Contributor statistics also exclude empty commits.","","# [Statuses](https://developer.github.com/v3/repos/statuses/)","","**Note:** The [Statuses API](https://developer.github.com/v3/repos/statuses) now returns the ```avatar_url``` for each status object in a response. To receive ```avatar_url``` in the API response, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.howard-the-duck-preview+json","```","","**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.jean-grey-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","","The status API allows external services to mark commits with an ```error```, ```failure```, ```pending```, or ```success``` state, which is then reflected in pull requests involving those commits.","","Statuses can also include an optional ```description``` and ```target_url```, and we highly recommend providing them as they make statuses much more useful in the GitHub UI.","","As an example, one common use is for continuous integration services to mark commits as passing or failing builds using status.  The ```target_url``` would be the full URL to the build output, and the ```description``` would be the high level summary of what happened with the build.","","Statuses can include a ```context``` to indicate what service is providing that status. For example, you may have your continuous integration service push statuses with a context of ```ci```, and a security audit tool push statuses with a context of ```security```.  You can then use the [combined status endpoint](https://developer.github.com/v3/repos/statuses/#get-the-combined-status-for-a-specific-ref) to retrieve the whole status for a commit.","","Note that the ```repo:status``` [OAuth scope](https://developer.github.com/apps/building-integrations/setting-up-and-registering-oauth-apps/about-scopes-for-oauth-apps/) grants targeted access to statuses **without** also granting access to repository code, while the ```repo``` scope grants permission to code as well as statuses.","","# [Traffic](https://developer.github.com/v3/repos/traffic/)","","For repositories that you have push access to, the traffic API provides access to the information provided in the [graphs section](https://help.github.com/articles/about-repository-graphs/#traffic)."]},{"description":"# [SCIM](https://developer.github.com/v3/scim/)\n\nno description","name":"github-scim","x-swgg-descriptionLineList":["# [SCIM](https://developer.github.com/v3/scim/)","","no description"]},{"description":"# [Search](https://developer.github.com/v3/search/)\n\n**Note:** The ```topics``` property for repositories on GitHub is currently available for developers to preview. To view the ```topics``` property in calls that return repository results, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.mercy-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).\n\n####  About the search API\n\nThe Search API is optimized to help you find the specific item you're looking for (e.g., a specific user, a specific file in a repository, etc.). Think of it the way you think of performing a search on Google. It's designed to help you find the one result you're looking for (or maybe the few results you're looking for). Just like searching on Google, you sometimes want to see a few pages of search results so that you can find the item that best meets your needs. To satisfy that need, the GitHub Search API provides **up to 1,000 results for each search**.\n\n####  Ranking search results\n\nUnless another sort option is provided as a query parameter, results are sorted by best match, as indicated by the ```score``` field for each item returned. This is a computed value representing the relevance of an item relative to the other items in the result set. Multiple factors are combined to boost the most relevant item to the top of the result list.\n\n####  Rate limit\n\nThe Search API has a custom rate limit. For requests using [Basic Authentication](https://developer.github.com/v3/#authentication), [OAuth](https://developer.github.com/v3/#authentication), or [client ID and secret](https://developer.github.com/v3/#increasing-the-unauthenticated-rate-limit-for-oauth-applications), you can make up to 30 requests per minute. For unauthenticated requests, the rate limit allows you to make up to 10 requests per minute.\n\nSee the [rate limit documentation](https://developer.github.com/v3/#rate-limiting) for details on determining your current rate limit status.\n\n####  Timeouts and incomplete results\n\nTo keep the Search API fast for everyone, we limit how long any individual query can run. For queries that [exceed the time limit](https://developer.github.com/changes/2014-04-07-understanding-search-results-and-potential-timeouts/), the API returns the matches that were already found prior to the timeout, and the response has the ```incomplete_results``` property set to ```true```.\n\nReaching a timeout does not necessarily mean that search results are incomplete. More results might have been found, but also might not.\n\n# [Legacy Search](https://developer.github.com/v3/search/legacy/)\n\nThis is a listing of the Legacy Search API features from API v2 that have been ported to API v3. There should be no changes, other than the new URL and JSON output format.\n\n####  Legacy Search API is Deprecated\n\nThe Legacy Search API (described below) is deprecated. We recommend using the [v3 Search API](https://developer.github.com/v3/search/) instead. It contains new endpoints and much more functionality.","name":"github-search","x-swgg-descriptionLineList":["# [Search](https://developer.github.com/v3/search/)","","**Note:** The ```topics``` property for repositories on GitHub is currently available for developers to preview. To view the ```topics``` property in calls that return repository results, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.mercy-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","","####  About the search API","","The Search API is optimized to help you find the specific item you're looking for (e.g., a specific user, a specific file in a repository, etc.). Think of it the way you think of performing a search on Google. It's designed to help you find the one result you're looking for (or maybe the few results you're looking for). Just like searching on Google, you sometimes want to see a few pages of search results so that you can find the item that best meets your needs. To satisfy that need, the GitHub Search API provides **up to 1,000 results for each search**.","","####  Ranking search results","","Unless another sort option is provided as a query parameter, results are sorted by best match, as indicated by the ```score``` field for each item returned. This is a computed value representing the relevance of an item relative to the other items in the result set. Multiple factors are combined to boost the most relevant item to the top of the result list.","","####  Rate limit","","The Search API has a custom rate limit. For requests using [Basic Authentication](https://developer.github.com/v3/#authentication), [OAuth](https://developer.github.com/v3/#authentication), or [client ID and secret](https://developer.github.com/v3/#increasing-the-unauthenticated-rate-limit-for-oauth-applications), you can make up to 30 requests per minute. For unauthenticated requests, the rate limit allows you to make up to 10 requests per minute.","","See the [rate limit documentation](https://developer.github.com/v3/#rate-limiting) for details on determining your current rate limit status.","","####  Timeouts and incomplete results","","To keep the Search API fast for everyone, we limit how long any individual query can run. For queries that [exceed the time limit](https://developer.github.com/changes/2014-04-07-understanding-search-results-and-potential-timeouts/), the API returns the matches that were already found prior to the timeout, and the response has the ```incomplete_results``` property set to ```true```.","","Reaching a timeout does not necessarily mean that search results are incomplete. More results might have been found, but also might not.","","# [Legacy Search](https://developer.github.com/v3/search/legacy/)","","This is a listing of the Legacy Search API features from API v2 that have been ported to API v3. There should be no changes, other than the new URL and JSON output format.","","####  Legacy Search API is Deprecated","","The Legacy Search API (described below) is deprecated. We recommend using the [v3 Search API](https://developer.github.com/v3/search/) instead. It contains new endpoints and much more functionality."]},{"description":"# [Organization Teams](https://developer.github.com/v3/teams/)\n\nThis API is only available to authenticated members of the team's [organization](https://developer.github.com/v3/orgs). OAuth access tokens require the ```read:org``` [scope](https://developer.github.com/apps/building-integrations/setting-up-and-registering-oauth-apps/about-scopes-for-oauth-apps/).\n\nThe Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.inertia-preview+json\n```\n\n**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.jean-grey-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).\n\n# [Team Discussion Comments](https://developer.github.com/v3/teams/discussion_comments/)\n\nThe team discussion comments API allows you to get, create, edit, and delete discussion comments on a [team discussion](https://developer.github.com/v3/teams/discussions) post. Any member of the team's [organization](https://developer.github.com/v3/orgs) can create and read comments on a public discussion. For more details, see \"[About team discussions](https://help.github.com/articles/about-team-discussions/).\" This API is only available to authenticated members of the team's organization.\n\n# [Team Discussions](https://developer.github.com/v3/teams/discussions/)\n\nThe team discussions API allows you to get, create, edit, and delete discussion posts on a team's page. You can use team discussions to have conversations that are not specific to a repository or project. Any member of the team's [organization](https://developer.github.com/v3/orgs) can create and read public discussion posts. For more details, see \"[About team discussions](https://help.github.com/articles/about-team-discussions/).\" To learn more about commenting on a discussion post, see the [team discussion comments API](https://developer.github.com/v3/teams/discussion_comments). This API is only available to authenticated members of the team's organization.\n\n# [Team Members](https://developer.github.com/v3/teams/members/)\n\nThis API is only available to authenticated members of the team's organization. OAuth access tokens require the ```read:org``` [scope](https://developer.github.com/apps/building-integrations/setting-up-and-registering-oauth-apps/about-scopes-for-oauth-apps/).\n\n**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.jean-grey-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","name":"github-teams","x-swgg-descriptionLineList":["# [Organization Teams](https://developer.github.com/v3/teams/)","","This API is only available to authenticated members of the team's [organization](https://developer.github.com/v3/orgs). OAuth access tokens require the ```read:org``` [scope](https://developer.github.com/apps/building-integrations/setting-up-and-registering-oauth-apps/about-scopes-for-oauth-apps/).","","The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.inertia-preview+json","```","","**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.jean-grey-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","","# [Team Discussion Comments](https://developer.github.com/v3/teams/discussion_comments/)","","The team discussion comments API allows you to get, create, edit, and delete discussion comments on a [team discussion](https://developer.github.com/v3/teams/discussions) post. Any member of the team's [organization](https://developer.github.com/v3/orgs) can create and read comments on a public discussion. For more details, see \"[About team discussions](https://help.github.com/articles/about-team-discussions/).\" This API is only available to authenticated members of the team's organization.","","# [Team Discussions](https://developer.github.com/v3/teams/discussions/)","","The team discussions API allows you to get, create, edit, and delete discussion posts on a team's page. You can use team discussions to have conversations that are not specific to a repository or project. Any member of the team's [organization](https://developer.github.com/v3/orgs) can create and read public discussion posts. For more details, see \"[About team discussions](https://help.github.com/articles/about-team-discussions/).\" To learn more about commenting on a discussion post, see the [team discussion comments API](https://developer.github.com/v3/teams/discussion_comments). This API is only available to authenticated members of the team's organization.","","# [Team Members](https://developer.github.com/v3/teams/members/)","","This API is only available to authenticated members of the team's organization. OAuth access tokens require the ```read:org``` [scope](https://developer.github.com/apps/building-integrations/setting-up-and-registering-oauth-apps/about-scopes-for-oauth-apps/).","","**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.jean-grey-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact)."]},{"description":"# [Users](https://developer.github.com/v3/users/)\n\nMany of the resources on the users API provide a shortcut for getting information about the currently authenticated user. If a request URL does not include a ```:username``` parameter then the response will be for the logged in user (and you must pass [authentication information](https://developer.github.com/v3/#authentication) with your request). Additional private information, such as whether a user has two-factor authentication enabled, is included when authenticated through basic auth or OAuth with the ```user``` scope.\n\n**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.jean-grey-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).\n\n# [Block Another User](https://developer.github.com/v3/users/blocking/)\n\n**Note:** The User Blocking API on GitHub is currently available for developers to preview. To access the API, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.giant-sentry-fist-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).\n\n# [User Emails](https://developer.github.com/v3/users/emails/)\n\nManagement of email addresses via the API requires that you authenticate through basic auth or OAuth with the ```user:email``` scope.\n\n# [User Followers](https://developer.github.com/v3/users/followers/)\n\nno description\n\n# [User GPG Keys](https://developer.github.com/v3/users/gpg_keys/)\n\nThe data returned in the ```public_key``` response field is not a GPG formatted key. When a user uploads a GPG key, it is parsed and the cryptographic public key is extracted and stored. This cryptographic key is what is returned by the APIs on this page. This key is not suitable to be used directly by programs like GPG.\n\n# [User Public Keys](https://developer.github.com/v3/users/keys/)\n\nno description","name":"github-users","x-swgg-descriptionLineList":["# [Users](https://developer.github.com/v3/users/)","","Many of the resources on the users API provide a shortcut for getting information about the currently authenticated user. If a request URL does not include a ```:username``` parameter then the response will be for the logged in user (and you must pass [authentication information](https://developer.github.com/v3/#authentication) with your request). Additional private information, such as whether a user has two-factor authentication enabled, is included when authenticated through basic auth or OAuth with the ```user``` scope.","","**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.jean-grey-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","","# [Block Another User](https://developer.github.com/v3/users/blocking/)","","**Note:** The User Blocking API on GitHub is currently available for developers to preview. To access the API, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.giant-sentry-fist-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","","# [User Emails](https://developer.github.com/v3/users/emails/)","","Management of email addresses via the API requires that you authenticate through basic auth or OAuth with the ```user:email``` scope.","","# [User Followers](https://developer.github.com/v3/users/followers/)","","no description","","# [User GPG Keys](https://developer.github.com/v3/users/gpg_keys/)","","The data returned in the ```public_key``` response field is not a GPG formatted key. When a user uploads a GPG key, it is parsed and the cryptographic public key is extracted and stored. This cryptographic key is what is returned by the APIs on this page. This key is not suitable to be used directly by programs like GPG.","","# [User Public Keys](https://developer.github.com/v3/users/keys/)","","no description"]}],"x-swgg-corsForwardProxyHost":"disabled","x-swgg-descriptionLineList":["# [Users](https://developer.github.com/v3/users/)","","Many of the resources on the users API provide a shortcut for getting information about the currently authenticated user. If a request URL does not include a ```:username``` parameter then the response will be for the logged in user (and you must pass [authentication information](https://developer.github.com/v3/#authentication) with your request). Additional private information, such as whether a user has two-factor authentication enabled, is included when authenticated through basic auth or OAuth with the ```user``` scope.","","**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.jean-grey-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","","# [Block Another User](https://developer.github.com/v3/users/blocking/)","","**Note:** The User Blocking API on GitHub is currently available for developers to preview. To access the API, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.giant-sentry-fist-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","","# [User Emails](https://developer.github.com/v3/users/emails/)","","Management of email addresses via the API requires that you authenticate through basic auth or OAuth with the ```user:email``` scope.","","# [User Followers](https://developer.github.com/v3/users/followers/)","","no description","","# [User GPG Keys](https://developer.github.com/v3/users/gpg_keys/)","","The data returned in the ```public_key``` response field is not a GPG formatted key. When a user uploads a GPG key, it is parsed and the cryptographic public key is extracted and stored. This cryptographic key is what is returned by the APIs on this page. This key is not suitable to be used directly by programs like GPG.","","# [User Public Keys](https://developer.github.com/v3/users/keys/)","","no description"],"x-swgg-downloadStandaloneApp":"https://kaizhu256.github.io/node-swgg-github-users/build..beta..travis-ci.org/app/assets.app.js","x-swgg-fixErrorSemanticUniquePath":true,"x-swgg-operationIdFromPath":true,"x-swgg-tagNameList":["github-activity","github-apps","github-gists","github-git","github-issues","github-migration","github-misc","github-orgs","github-projects","github-pulls","github-reactions","github-repos","github-scim","github-search","github-teams","github-users"],"x-swgg-tags0-override":{"github-activity":{"description":"# [Activity](https://developer.github.com/v3/activity/)\n\nServing up the 'social' in Social Coding, the Activity APIs provide access to notifications, subscriptions, and timelines.\n\n# [Event Types & Payloads](https://developer.github.com/v3/activity/events/types/)\n\nEach event has a similar JSON schema, but a unique ```payload``` object that is determined by its event type.\n\nEvent names are used by [repository webhooks](https://developer.github.com/v3/repos/hooks/) to specify which events the webhook should receive. The included payloads below are from webhook deliveries but match events returned by the [Events API](https://developer.github.com/v3/activity/events/) (except where noted). The Events API uses the CamelCased name (e.g. ```CommitCommentEvent```) in the ```type``` field of an event object and does not include the ```repository``` or ```sender``` fields in the event payload object.\n\n**Note:** Some of these events may not be rendered in timelines, they're only created for various internal and webhook purposes.\n- [CommitCommentEvent](https://developer.github.com/v3/activity/events/types/#commitcommentevent)\n- [CreateEvent](https://developer.github.com/v3/activity/events/types/#createevent)\n- [DeleteEvent](https://developer.github.com/v3/activity/events/types/#deleteevent)\n- [DeploymentEvent](https://developer.github.com/v3/activity/events/types/#deploymentevent)\n- [DeploymentStatusEvent](https://developer.github.com/v3/activity/events/types/#deploymentstatusevent)\n- [DownloadEvent](https://developer.github.com/v3/activity/events/types/#downloadevent)\n- [FollowEvent](https://developer.github.com/v3/activity/events/types/#followevent)\n- [ForkEvent](https://developer.github.com/v3/activity/events/types/#forkevent)\n- [ForkApplyEvent](https://developer.github.com/v3/activity/events/types/#forkapplyevent)\n- [GistEvent](https://developer.github.com/v3/activity/events/types/#gistevent)\n- [GollumEvent](https://developer.github.com/v3/activity/events/types/#gollumevent)\n- [InstallationEvent](https://developer.github.com/v3/activity/events/types/#installationevent)\n- [InstallationRepositoriesEvent](https://developer.github.com/v3/activity/events/types/#installationrepositoriesevent)\n- [IssueCommentEvent](https://developer.github.com/v3/activity/events/types/#issuecommentevent)\n- [IssuesEvent](https://developer.github.com/v3/activity/events/types/#issuesevent)\n- [LabelEvent](https://developer.github.com/v3/activity/events/types/#labelevent)\n- [MarketplacePurchaseEvent](https://developer.github.com/v3/activity/events/types/#marketplacepurchaseevent)\n- [MemberEvent](https://developer.github.com/v3/activity/events/types/#memberevent)\n- [MembershipEvent](https://developer.github.com/v3/activity/events/types/#membershipevent)\n- [MilestoneEvent](https://developer.github.com/v3/activity/events/types/#milestoneevent)\n- [OrganizationEvent](https://developer.github.com/v3/activity/events/types/#organizationevent)\n- [OrgBlockEvent](https://developer.github.com/v3/activity/events/types/#orgblockevent)\n- [PageBuildEvent](https://developer.github.com/v3/activity/events/types/#pagebuildevent)\n- [ProjectCardEvent](https://developer.github.com/v3/activity/events/types/#projectcardevent)\n- [ProjectColumnEvent](https://developer.github.com/v3/activity/events/types/#projectcolumnevent)\n- [ProjectEvent](https://developer.github.com/v3/activity/events/types/#projectevent)\n- [PublicEvent](https://developer.github.com/v3/activity/events/types/#publicevent)\n- [PullRequestEvent](https://developer.github.com/v3/activity/events/types/#pullrequestevent)\n- [PullRequestReviewEvent](https://developer.github.com/v3/activity/events/types/#pullrequestreviewevent)\n- [PullRequestReviewCommentEvent](https://developer.github.com/v3/activity/events/types/#pullrequestreviewcommentevent)\n- [PushEvent](https://developer.github.com/v3/activity/events/types/#pushevent)\n- [ReleaseEvent](https://developer.github.com/v3/activity/events/types/#releaseevent)\n- [RepositoryEvent](https://developer.github.com/v3/activity/events/types/#repositoryevent)\n- [StatusEvent](https://developer.github.com/v3/activity/events/types/#statusevent)\n- [TeamEvent](https://developer.github.com/v3/activity/events/types/#teamevent)\n- [TeamAddEvent](https://developer.github.com/v3/activity/events/types/#teamaddevent)\n- [WatchEvent](https://developer.github.com/v3/activity/events/types/#watchevent)\n\n# [Events](https://developer.github.com/v3/activity/events/)\n\nThis is a read-only API to the GitHub events. These events power the various activity streams on the site.\n- [List public events](https://developer.github.com/v3/activity/events/#list-public-events)\n- [List repository events](https://developer.github.com/v3/activity/events/#list-repository-events)\n- [List issue events for a repository](https://developer.github.com/v3/activity/events/#list-issue-events-for-a-repository)\n- [List public events for a network of repositories](https://developer.github.com/v3/activity/events/#list-public-events-for-a-network-of-repositories)\n- [List public events for an organization](https://developer.github.com/v3/activity/events/#list-public-events-for-an-organization)\n- [List events that a user has received](https://developer.github.com/v3/activity/events/#list-events-that-a-user-has-received)\n- [List public events that a user has received](https://developer.github.com/v3/activity/events/#list-public-events-that-a-user-has-received)\n- [List events performed by a user](https://developer.github.com/v3/activity/events/#list-events-performed-by-a-user)\n- [List public events performed by a user](https://developer.github.com/v3/activity/events/#list-public-events-performed-by-a-user)\n- [List events for an organization](https://developer.github.com/v3/activity/events/#list-events-for-an-organization)\n\nEvents are optimized for polling with the \"ETag\" header.  If no new events have been triggered, you will see a \"304 Not Modified\" response, and your current rate limit will be untouched.  There is also an \"X-Poll-Interval\" header that specifies how often (in seconds) you are allowed to poll.  In times of high server load, the time may increase.  Please obey the header.\n```\ncurl -I https://api.github.com/users/tater/events\nHTTP/1.1 200 OK\nX-Poll-Interval: 60\nETag: \"a18c3bded88eb5dbb5c849a489412bf3\"\n# The quotes around the ETag value are important\ncurl -I https://api.github.com/users/tater/events \\\n   -H 'If-None-Match: \"a18c3bded88eb5dbb5c849a489412bf3\"'\nHTTP/1.1 304 Not Modified\nX-Poll-Interval: 60\n```\n\n\nEvents support [pagination](https://developer.github.com/v3/#pagination), however the ```per_page``` option is unsupported. The fixed page size is 30 items. Fetching up to ten pages is supported, for a total of 300 events.\n\nOnly events created within the past 90 days will be included in timelines. Events older than 90 days will not be included (even if the total number of events in the timeline is less than 300).\n\nAll Events have the same response format:\n```\nStatus: 200 OK\nLink: &lt;https://api.github.com/resource?page=2&gt;; rel=\"next\",\n      &lt;https://api.github.com/resource?page=5&gt;; rel=\"last\"\n```\n\n```\n[\n  {\n    \"type\": \"Event\",\n    \"public\": true,\n    \"payload\": {\n    },\n    \"repo\": {\n      \"id\": 3,\n      \"name\": \"octocat/Hello-World\",\n      \"url\": \"https://api.github.com/repos/octocat/Hello-World\"\n    },\n    \"actor\": {\n      \"id\": 1,\n      \"login\": \"octocat\",\n      \"gravatar_id\": \"\",\n      \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",\n      \"url\": \"https://api.github.com/users/octocat\"\n    },\n    \"org\": {\n      \"id\": 1,\n      \"login\": \"github\",\n      \"gravatar_id\": \"\",\n      \"url\": \"https://api.github.com/orgs/github\",\n      \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\"\n    },\n    \"created_at\": \"2011-09-06T17:26:27Z\",\n    \"id\": \"12345\"\n  }\n]\n```\n\n# [Feeds](https://developer.github.com/v3/activity/feeds/)\n\nno description\n\n# [Notifications](https://developer.github.com/v3/activity/notifications/)\n\nUsers receive notifications for conversations in repositories they watch including:\n- Issues and their comments\n- Pull Requests and their comments\n- Comments on any commits\n\nNotifications are also sent for conversations in unwatched repositories when the user is involved including:\n- **@mentions**\n- Issue assignments\n- Commits the user authors or commits\n- Any discussion in which the user actively participates\n\nAll Notification API calls require the ```notifications``` or ```repo``` API scopes.  Doing this will give read-only access to some Issue/Commit content. You will still need the \"repo\" scope to access Issues and Commits from their respective endpoints.\n\nNotifications come back as \"threads\".  A Thread contains information about the current discussion of an Issue/PullRequest/Commit.\n\nNotifications are optimized for polling with the \"Last-Modified\" header.  If there are no new notifications, you will see a \"304 Not Modified\" response, leaving your current rate limit untouched.  There is an \"X-Poll-Interval\" header that specifies how often (in seconds) you are allowed to poll.  In times of high server load, the time may increase.  Please obey the header.\n```\n# Add authentication to your requests\ncurl -I https://api.github.com/notifications\nHTTP/1.1 200 OK\nLast-Modified: Thu, 25 Oct 2012 15:16:27 GMT\nX-Poll-Interval: 60\n# Pass the Last-Modified header exactly\ncurl -I https://api.github.com/notifications\n   -H \"If-Modified-Since: Thu, 25 Oct 2012 15:16:27 GMT\"\nHTTP/1.1 304 Not Modified\nX-Poll-Interval: 60\n```\n\n# [Starring](https://developer.github.com/v3/activity/starring/)\n\nRepository Starring is a feature that lets users bookmark repositories.  Stars are shown next to repositories to show an approximate level of interest.  Stars have no effect on notifications or the activity feed.  For that, see [Repository Watching](https://developer.github.com/v3/activity/watching).\n\n####  Starring vs. Watching\n\nIn August 2012, we [changed the way watching works](https://github.com/blog/1204-notifications-stars) on GitHub.  Many API client applications may be using the original \"watcher\" endpoints for accessing this data. You can now start using the \"star\" endpoints instead (described below). Check out the [Watcher API Change post](https://developer.github.com/changes/2012-09-05-watcher-api/) for more details.\n\n# [Watching](https://developer.github.com/v3/activity/watching/)\n\nWatching a Repository registers the user to receive notifications on new discussions, as well as events in the user's activity feed.  See [Repository Starring](https://developer.github.com/v3/activity/starring) for simple repository bookmarks.\n\n####  Watching vs. Starring\n\nIn August 2012, we [changed the way watching works](https://github.com/blog/1204-notifications-stars) on GitHub.  At the time of that change, many API clients were already using the existing \"watcher\" endpoints to access starring data. To avoid breaking those applications, the legacy \"watcher\" endpoints continue to provide starring data.\n\nTo provide access to watching data, the v3 Watcher API uses the \"subscription\" endpoints described below. Check out the [Watcher API Change post](https://developer.github.com/changes/2012-09-05-watcher-api/) for more details.","x-swgg-descriptionLineList":["# [Activity](https://developer.github.com/v3/activity/)","","Serving up the 'social' in Social Coding, the Activity APIs provide access to notifications, subscriptions, and timelines.","","# [Event Types & Payloads](https://developer.github.com/v3/activity/events/types/)","","Each event has a similar JSON schema, but a unique ```payload``` object that is determined by its event type.","","Event names are used by [repository webhooks](https://developer.github.com/v3/repos/hooks/) to specify which events the webhook should receive. The included payloads below are from webhook deliveries but match events returned by the [Events API](https://developer.github.com/v3/activity/events/) (except where noted). The Events API uses the CamelCased name (e.g. ```CommitCommentEvent```) in the ```type``` field of an event object and does not include the ```repository``` or ```sender``` fields in the event payload object.","","**Note:** Some of these events may not be rendered in timelines, they're only created for various internal and webhook purposes.","- [CommitCommentEvent](https://developer.github.com/v3/activity/events/types/#commitcommentevent)","- [CreateEvent](https://developer.github.com/v3/activity/events/types/#createevent)","- [DeleteEvent](https://developer.github.com/v3/activity/events/types/#deleteevent)","- [DeploymentEvent](https://developer.github.com/v3/activity/events/types/#deploymentevent)","- [DeploymentStatusEvent](https://developer.github.com/v3/activity/events/types/#deploymentstatusevent)","- [DownloadEvent](https://developer.github.com/v3/activity/events/types/#downloadevent)","- [FollowEvent](https://developer.github.com/v3/activity/events/types/#followevent)","- [ForkEvent](https://developer.github.com/v3/activity/events/types/#forkevent)","- [ForkApplyEvent](https://developer.github.com/v3/activity/events/types/#forkapplyevent)","- [GistEvent](https://developer.github.com/v3/activity/events/types/#gistevent)","- [GollumEvent](https://developer.github.com/v3/activity/events/types/#gollumevent)","- [InstallationEvent](https://developer.github.com/v3/activity/events/types/#installationevent)","- [InstallationRepositoriesEvent](https://developer.github.com/v3/activity/events/types/#installationrepositoriesevent)","- [IssueCommentEvent](https://developer.github.com/v3/activity/events/types/#issuecommentevent)","- [IssuesEvent](https://developer.github.com/v3/activity/events/types/#issuesevent)","- [LabelEvent](https://developer.github.com/v3/activity/events/types/#labelevent)","- [MarketplacePurchaseEvent](https://developer.github.com/v3/activity/events/types/#marketplacepurchaseevent)","- [MemberEvent](https://developer.github.com/v3/activity/events/types/#memberevent)","- [MembershipEvent](https://developer.github.com/v3/activity/events/types/#membershipevent)","- [MilestoneEvent](https://developer.github.com/v3/activity/events/types/#milestoneevent)","- [OrganizationEvent](https://developer.github.com/v3/activity/events/types/#organizationevent)","- [OrgBlockEvent](https://developer.github.com/v3/activity/events/types/#orgblockevent)","- [PageBuildEvent](https://developer.github.com/v3/activity/events/types/#pagebuildevent)","- [ProjectCardEvent](https://developer.github.com/v3/activity/events/types/#projectcardevent)","- [ProjectColumnEvent](https://developer.github.com/v3/activity/events/types/#projectcolumnevent)","- [ProjectEvent](https://developer.github.com/v3/activity/events/types/#projectevent)","- [PublicEvent](https://developer.github.com/v3/activity/events/types/#publicevent)","- [PullRequestEvent](https://developer.github.com/v3/activity/events/types/#pullrequestevent)","- [PullRequestReviewEvent](https://developer.github.com/v3/activity/events/types/#pullrequestreviewevent)","- [PullRequestReviewCommentEvent](https://developer.github.com/v3/activity/events/types/#pullrequestreviewcommentevent)","- [PushEvent](https://developer.github.com/v3/activity/events/types/#pushevent)","- [ReleaseEvent](https://developer.github.com/v3/activity/events/types/#releaseevent)","- [RepositoryEvent](https://developer.github.com/v3/activity/events/types/#repositoryevent)","- [StatusEvent](https://developer.github.com/v3/activity/events/types/#statusevent)","- [TeamEvent](https://developer.github.com/v3/activity/events/types/#teamevent)","- [TeamAddEvent](https://developer.github.com/v3/activity/events/types/#teamaddevent)","- [WatchEvent](https://developer.github.com/v3/activity/events/types/#watchevent)","","# [Events](https://developer.github.com/v3/activity/events/)","","This is a read-only API to the GitHub events. These events power the various activity streams on the site.","- [List public events](https://developer.github.com/v3/activity/events/#list-public-events)","- [List repository events](https://developer.github.com/v3/activity/events/#list-repository-events)","- [List issue events for a repository](https://developer.github.com/v3/activity/events/#list-issue-events-for-a-repository)","- [List public events for a network of repositories](https://developer.github.com/v3/activity/events/#list-public-events-for-a-network-of-repositories)","- [List public events for an organization](https://developer.github.com/v3/activity/events/#list-public-events-for-an-organization)","- [List events that a user has received](https://developer.github.com/v3/activity/events/#list-events-that-a-user-has-received)","- [List public events that a user has received](https://developer.github.com/v3/activity/events/#list-public-events-that-a-user-has-received)","- [List events performed by a user](https://developer.github.com/v3/activity/events/#list-events-performed-by-a-user)","- [List public events performed by a user](https://developer.github.com/v3/activity/events/#list-public-events-performed-by-a-user)","- [List events for an organization](https://developer.github.com/v3/activity/events/#list-events-for-an-organization)","","Events are optimized for polling with the \"ETag\" header.  If no new events have been triggered, you will see a \"304 Not Modified\" response, and your current rate limit will be untouched.  There is also an \"X-Poll-Interval\" header that specifies how often (in seconds) you are allowed to poll.  In times of high server load, the time may increase.  Please obey the header.","```","curl -I https://api.github.com/users/tater/events","HTTP/1.1 200 OK","X-Poll-Interval: 60","ETag: \"a18c3bded88eb5dbb5c849a489412bf3\"","# The quotes around the ETag value are important","curl -I https://api.github.com/users/tater/events \\","   -H 'If-None-Match: \"a18c3bded88eb5dbb5c849a489412bf3\"'","HTTP/1.1 304 Not Modified","X-Poll-Interval: 60","```","","","Events support [pagination](https://developer.github.com/v3/#pagination), however the ```per_page``` option is unsupported. The fixed page size is 30 items. Fetching up to ten pages is supported, for a total of 300 events.","","Only events created within the past 90 days will be included in timelines. Events older than 90 days will not be included (even if the total number of events in the timeline is less than 300).","","All Events have the same response format:","```","Status: 200 OK","Link: &lt;https://api.github.com/resource?page=2&gt;; rel=\"next\",","      &lt;https://api.github.com/resource?page=5&gt;; rel=\"last\"","```","","```","[","  {","    \"type\": \"Event\",","    \"public\": true,","    \"payload\": {","    },","    \"repo\": {","      \"id\": 3,","      \"name\": \"octocat/Hello-World\",","      \"url\": \"https://api.github.com/repos/octocat/Hello-World\"","    },","    \"actor\": {","      \"id\": 1,","      \"login\": \"octocat\",","      \"gravatar_id\": \"\",","      \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\",","      \"url\": \"https://api.github.com/users/octocat\"","    },","    \"org\": {","      \"id\": 1,","      \"login\": \"github\",","      \"gravatar_id\": \"\",","      \"url\": \"https://api.github.com/orgs/github\",","      \"avatar_url\": \"https://github.com/images/error/octocat_happy.gif\"","    },","    \"created_at\": \"2011-09-06T17:26:27Z\",","    \"id\": \"12345\"","  }","]","```","","# [Feeds](https://developer.github.com/v3/activity/feeds/)","","no description","","# [Notifications](https://developer.github.com/v3/activity/notifications/)","","Users receive notifications for conversations in repositories they watch including:","- Issues and their comments","- Pull Requests and their comments","- Comments on any commits","","Notifications are also sent for conversations in unwatched repositories when the user is involved including:","- **@mentions**","- Issue assignments","- Commits the user authors or commits","- Any discussion in which the user actively participates","","All Notification API calls require the ```notifications``` or ```repo``` API scopes.  Doing this will give read-only access to some Issue/Commit content. You will still need the \"repo\" scope to access Issues and Commits from their respective endpoints.","","Notifications come back as \"threads\".  A Thread contains information about the current discussion of an Issue/PullRequest/Commit.","","Notifications are optimized for polling with the \"Last-Modified\" header.  If there are no new notifications, you will see a \"304 Not Modified\" response, leaving your current rate limit untouched.  There is an \"X-Poll-Interval\" header that specifies how often (in seconds) you are allowed to poll.  In times of high server load, the time may increase.  Please obey the header.","```","# Add authentication to your requests","curl -I https://api.github.com/notifications","HTTP/1.1 200 OK","Last-Modified: Thu, 25 Oct 2012 15:16:27 GMT","X-Poll-Interval: 60","# Pass the Last-Modified header exactly","curl -I https://api.github.com/notifications","   -H \"If-Modified-Since: Thu, 25 Oct 2012 15:16:27 GMT\"","HTTP/1.1 304 Not Modified","X-Poll-Interval: 60","```","","# [Starring](https://developer.github.com/v3/activity/starring/)","","Repository Starring is a feature that lets users bookmark repositories.  Stars are shown next to repositories to show an approximate level of interest.  Stars have no effect on notifications or the activity feed.  For that, see [Repository Watching](https://developer.github.com/v3/activity/watching).","","####  Starring vs. Watching","","In August 2012, we [changed the way watching works](https://github.com/blog/1204-notifications-stars) on GitHub.  Many API client applications may be using the original \"watcher\" endpoints for accessing this data. You can now start using the \"star\" endpoints instead (described below). Check out the [Watcher API Change post](https://developer.github.com/changes/2012-09-05-watcher-api/) for more details.","","# [Watching](https://developer.github.com/v3/activity/watching/)","","Watching a Repository registers the user to receive notifications on new discussions, as well as events in the user's activity feed.  See [Repository Starring](https://developer.github.com/v3/activity/starring) for simple repository bookmarks.","","####  Watching vs. Starring","","In August 2012, we [changed the way watching works](https://github.com/blog/1204-notifications-stars) on GitHub.  At the time of that change, many API clients were already using the existing \"watcher\" endpoints to access starring data. To avoid breaking those applications, the legacy \"watcher\" endpoints continue to provide starring data.","","To provide access to watching data, the v3 Watcher API uses the \"subscription\" endpoints described below. Check out the [Watcher API Change post](https://developer.github.com/changes/2012-09-05-watcher-api/) for more details."]},"github-apps":{"description":"# [GitHub Apps](https://developer.github.com/v3/apps/)\n\nFor information on how to authenticate as a GitHub App, see \"[Authentication Options for GitHub Apps](https://developer.github.com/apps/building-github-apps/authentication-options-for-github-apps#authenticating-as-a-github-app).\"\n\n**Note:** To access the API with your integration, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` Header for your requests.\n\n```\napplication/vnd.github.machine-man-preview+json\n```\n\n# [GitHub App Permissions](https://developer.github.com/v3/apps/permissions/)\n\n**Note:** To access the API with your integration, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` Header for your requests.\n\n```\napplication/vnd.github.machine-man-preview+json\n```\n\nGitHub Apps are created with a set of permissions. These define what resources the GitHub App can access via the API. For more information, see \"[Permissions for GitHub Apps](https://developer.github.com/apps/building-github-apps/permissions-for-github-apps/).\"\n\n# [GitHub Apps: Available Endpoints](https://developer.github.com/v3/apps/available-endpoints/)\n\n**Note:** To access the API with your integration, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` Header for your requests.\n\n```\napplication/vnd.github.machine-man-preview+json\n```\n\nThe following endpoints are available for use by GitHub Apps. For more information, see \"[GitHub Apps](https://developer.github.com/apps/building-github-apps/).\"\n\n#### Users\n- [Get a single user](https://developer.github.com/v3/users/#get-a-single-user)\n- [Get all users](https://developer.github.com/v3/users/#get-all-users)\n\n#### Miscellaneous\n- [Emojis](https://developer.github.com/v3/misc/#emojis)\n\n#### Rate Limit\n- [Get your current rate limit status](https://developer.github.com/v3/rate_limit/#get-your-current-rate-limit-status)\n\n#### Public Keys\n- [List public keys for a user](https://developer.github.com/v3/users/keys/#list-public-keys-for-a-user)\n\n#### GPG Keys\n- [List GPG keys for a user](https://developer.github.com/v3/users/gpg_keys/#list-gpg-keys-for-a-user)\n\n#### Followers\n- [List followers of a user](https://developer.github.com/v3/users/followers/#list-followers-of-a-user)\n- [List users followed by another user](https://developer.github.com/v3/users/followers/#list-users-followed-by-another-user)\n- [Check if one user follows another](https://developer.github.com/v3/users/followers/#check-if-one-user-follows-another)\n\n#### Reactions\n- [List reactions for a commit comment](https://developer.github.com/v3/reactions/#list-reactions-for-a-commit-comment)\n- [List reactions for an issue](https://developer.github.com/v3/reactions/#list-reactions-for-an-issue)\n- [List reactions for an issue comment](https://developer.github.com/v3/reactions/#list-reactions-for-an-issue-comment)\n- [List reactions for a pull request review comment](https://developer.github.com/v3/reactions/#list-reactions-for-a-pull-request-review-comment)\n- [List reactions for a team discussion](https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion)\n- [List reactions for a team discussion comment](https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-comment)\n\n#### Codes of Conduct\n- [List all codes of conduct](https://developer.github.com/v3/codes_of_conduct/#list-all-codes-of-conduct)\n- [Get an individual code of conduct](https://developer.github.com/v3/codes_of_conduct/#get-an-individual-code-of-conduct)\n- [Get a repository's code of conduct](https://developer.github.com/v3/codes_of_conduct/#get-a-repositorys-code-of-conduct)\n- [Get the contents of a repository's code of conduct](https://developer.github.com/v3/codes_of_conduct/#get-the-contents-of-a-repositorys-code-of-conduct)\n\n#### Watching\n- [List watchers](https://developer.github.com/v3/activity/watching/#list-watchers)\n\n#### Feeds\n- [List Feeds](https://developer.github.com/v3/activity/feeds/#list-feeds)\n\n#### Starring\n- [List Stargazers](https://developer.github.com/v3/activity/starring/#list-stargazers)\n\n#### Events\n- [List public events](https://developer.github.com/v3/activity/events/#list-public-events)\n- [List repository events](https://developer.github.com/v3/activity/events/#list-repository-events)\n- [List public events for a network of repositories](https://developer.github.com/v3/activity/events/#list-public-events-for-a-network-of-repositories)\n- [List public events for an organization](https://developer.github.com/v3/activity/events/#list-public-events-for-an-organization)\n- [List events that a user has received](https://developer.github.com/v3/activity/events/#list-events-that-a-user-has-received)\n- [List public events that a user has received](https://developer.github.com/v3/activity/events/#list-public-events-that-a-user-has-received)\n- [List events performed by a user](https://developer.github.com/v3/activity/events/#list-events-performed-by-a-user)\n- [List public events performed by a user](https://developer.github.com/v3/activity/events/#list-public-events-performed-by-a-user)\n- [List events for an issue](https://developer.github.com/v3/issues/events/#list-events-for-an-issue)\n- [List events for a repository](https://developer.github.com/v3/issues/events/#list-events-for-a-repository)\n- [Get a single event](https://developer.github.com/v3/issues/events/#get-a-single-event)\n\n#### Overview\n- [Root endpoint](https://developer.github.com/v3/#root-endpoint)\n\n#### Pull Requests\n- [List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests)\n- [Get a single pull request](https://developer.github.com/v3/pulls/#get-a-single-pull-request)\n- [Create a pull request](https://developer.github.com/v3/pulls/#create-a-pull-request)\n- [Update a pull request](https://developer.github.com/v3/pulls/#update-a-pull-request)\n- [List commits on a pull request](https://developer.github.com/v3/pulls/#list-commits-on-a-pull-request)\n- [List pull requests files](https://developer.github.com/v3/pulls/#list-pull-requests-files)\n- [Get if a pull request has been merged](https://developer.github.com/v3/pulls/#get-if-a-pull-request-has-been-merged)\n- [Merge a pull request (Merge Button)](https://developer.github.com/v3/pulls/#merge-a-pull-request-merge-button)\n\n#### Emojis\n- [Emojis](https://developer.github.com/v3/emojis/#emojis)\n\n#### Milestones\n- [List milestones for a repository](https://developer.github.com/v3/issues/milestones/#list-milestones-for-a-repository)\n- [Get a single milestone](https://developer.github.com/v3/issues/milestones/#get-a-single-milestone)\n- [Create a milestone](https://developer.github.com/v3/issues/milestones/#create-a-milestone)\n- [Update a milestone](https://developer.github.com/v3/issues/milestones/#update-a-milestone)\n- [Delete a milestone](https://developer.github.com/v3/issues/milestones/#delete-a-milestone)\n\n#### Assignees\n- [List assignees](https://developer.github.com/v3/issues/assignees/#list-assignees)\n- [Check assignee](https://developer.github.com/v3/issues/assignees/#check-assignee)\n- [Add assignees to an issue](https://developer.github.com/v3/issues/assignees/#add-assignees-to-an-issue)\n- [Remove assignees from an issue](https://developer.github.com/v3/issues/assignees/#remove-assignees-from-an-issue)\n\n#### Timeline\n- [List events for an issue](https://developer.github.com/v3/issues/timeline/#list-events-for-an-issue)\n\n#### Comments\n- [List comments on an issue](https://developer.github.com/v3/issues/comments/#list-comments-on-an-issue)\n- [List comments in a repository](https://developer.github.com/v3/issues/comments/#list-comments-in-a-repository)\n- [Get a single comment](https://developer.github.com/v3/issues/comments/#get-a-single-comment)\n- [Create a comment](https://developer.github.com/v3/issues/comments/#create-a-comment)\n- [Edit a comment](https://developer.github.com/v3/issues/comments/#edit-a-comment)\n- [Delete a comment](https://developer.github.com/v3/issues/comments/#delete-a-comment)\n- [List commit comments for a repository](https://developer.github.com/v3/repos/comments/#list-commit-comments-for-a-repository)\n- [List comments for a single commit](https://developer.github.com/v3/repos/comments/#list-comments-for-a-single-commit)\n- [Create a commit comment](https://developer.github.com/v3/repos/comments/#create-a-commit-comment)\n- [Get a single commit comment](https://developer.github.com/v3/repos/comments/#get-a-single-commit-comment)\n- [Update a commit comment](https://developer.github.com/v3/repos/comments/#update-a-commit-comment)\n- [Delete a commit comment](https://developer.github.com/v3/repos/comments/#delete-a-commit-comment)\n\n#### Labels\n- [List all labels for this repository](https://developer.github.com/v3/issues/labels/#list-all-labels-for-this-repository)\n- [Get a single label](https://developer.github.com/v3/issues/labels/#get-a-single-label)\n- [Create a label](https://developer.github.com/v3/issues/labels/#create-a-label)\n- [Update a label](https://developer.github.com/v3/issues/labels/#update-a-label)\n- [Delete a label](https://developer.github.com/v3/issues/labels/#delete-a-label)\n- [List labels on an issue](https://developer.github.com/v3/issues/labels/#list-labels-on-an-issue)\n- [Add labels to an issue](https://developer.github.com/v3/issues/labels/#add-labels-to-an-issue)\n- [Remove a label from an issue](https://developer.github.com/v3/issues/labels/#remove-a-label-from-an-issue)\n- [Replace all labels for an issue](https://developer.github.com/v3/issues/labels/#replace-all-labels-for-an-issue)\n- [Remove all labels from an issue](https://developer.github.com/v3/issues/labels/#remove-all-labels-from-an-issue)\n- [Get labels for every issue in a milestone](https://developer.github.com/v3/issues/labels/#get-labels-for-every-issue-in-a-milestone)\n\n#### Source Imports\n- [Start an import](https://developer.github.com/v3/migration/source_imports/#start-an-import)\n- [Get import progress](https://developer.github.com/v3/migration/source_imports/#get-import-progress)\n- [Update existing import](https://developer.github.com/v3/migration/source_imports/#update-existing-import)\n- [Get commit authors](https://developer.github.com/v3/migration/source_imports/#get-commit-authors)\n- [Map a commit author](https://developer.github.com/v3/migration/source_imports/#map-a-commit-author)\n- [Set Git LFS preference](https://developer.github.com/v3/migration/source_imports/#set-git-lfs-preference)\n- [Get large files](https://developer.github.com/v3/migration/source_imports/#get-large-files)\n- [Cancel an import](https://developer.github.com/v3/migration/source_imports/#cancel-an-import)\n\n#### Teams\n- [List teams](https://developer.github.com/v3/teams/#list-teams)\n- [Get team](https://developer.github.com/v3/teams/#get-team)\n- [Create team](https://developer.github.com/v3/teams/#create-team)\n- [Edit team](https://developer.github.com/v3/teams/#edit-team)\n- [Delete team](https://developer.github.com/v3/teams/#delete-team)\n- [List child teams](https://developer.github.com/v3/teams/#list-child-teams)\n- [List team repos](https://developer.github.com/v3/teams/#list-team-repos)\n- [Check if a team manages a repository](https://developer.github.com/v3/teams/#check-if-a-team-manages-a-repository)\n\n#### Markdown\n- [Render an arbitrary Markdown document](https://developer.github.com/v3/markdown/#render-an-arbitrary-markdown-document)\n- [Render a Markdown document in raw mode](https://developer.github.com/v3/markdown/#render-a-markdown-document-in-raw-mode)\n\n#### Meta\n- [Meta](https://developer.github.com/v3/meta/#meta)\n\n#### Review Requests\n- [List review requests](https://developer.github.com/v3/pulls/review_requests/#list-review-requests)\n- [Create a review request](https://developer.github.com/v3/pulls/review_requests/#create-a-review-request)\n- [Delete a review request](https://developer.github.com/v3/pulls/review_requests/#delete-a-review-request)\n\n#### Reviews\n- [List reviews on a pull request](https://developer.github.com/v3/pulls/reviews/#list-reviews-on-a-pull-request)\n- [Get a single review](https://developer.github.com/v3/pulls/reviews/#get-a-single-review)\n- [Delete a pending review](https://developer.github.com/v3/pulls/reviews/#delete-a-pending-review)\n- [Get comments for a single review](https://developer.github.com/v3/pulls/reviews/#get-comments-for-a-single-review)\n- [Create a pull request review](https://developer.github.com/v3/pulls/reviews/#create-a-pull-request-review)\n- [Submit a pull request review](https://developer.github.com/v3/pulls/reviews/#submit-a-pull-request-review)\n- [Dismiss a pull request review](https://developer.github.com/v3/pulls/reviews/#dismiss-a-pull-request-review)\n\n#### Review Comments\n- [List comments on a pull request](https://developer.github.com/v3/pulls/comments/#list-comments-on-a-pull-request)\n- [List comments in a repository](https://developer.github.com/v3/pulls/comments/#list-comments-in-a-repository)\n- [Get a single comment](https://developer.github.com/v3/pulls/comments/#get-a-single-comment)\n- [Create a comment](https://developer.github.com/v3/pulls/comments/#create-a-comment)\n- [Edit a comment](https://developer.github.com/v3/pulls/comments/#edit-a-comment)\n- [Delete a comment](https://developer.github.com/v3/pulls/comments/#delete-a-comment)\n\n#### GitHub Apps\n- [Get a single GitHub App](https://developer.github.com/v3/apps/#get-a-single-github-app)\n- [Get the authenticated GitHub App](https://developer.github.com/v3/apps/#get-the-authenticated-github-app)\n- [Find installations](https://developer.github.com/v3/apps/#find-installations)\n- [Get a single installation](https://developer.github.com/v3/apps/#get-a-single-installation)\n- [Create a new installation token](https://developer.github.com/v3/apps/#create-a-new-installation-token)\n\n#### Installations\n- [List repositories](https://developer.github.com/v3/apps/installations/#list-repositories)\n\n#### Repositories\n- [List user repositories](https://developer.github.com/v3/repos/#list-user-repositories)\n- [List organization repositories](https://developer.github.com/v3/repos/#list-organization-repositories)\n- [List all public repositories](https://developer.github.com/v3/repos/#list-all-public-repositories)\n- [Create](https://developer.github.com/v3/repos/#create)\n- [Get](https://developer.github.com/v3/repos/#get)\n- [Edit](https://developer.github.com/v3/repos/#edit)\n- [List all topics for a repository](https://developer.github.com/v3/repos/#list-all-topics-for-a-repository)\n- [Replace all topics for a repository](https://developer.github.com/v3/repos/#replace-all-topics-for-a-repository)\n- [List contributors](https://developer.github.com/v3/repos/#list-contributors)\n- [List languages](https://developer.github.com/v3/repos/#list-languages)\n- [List teams](https://developer.github.com/v3/repos/#list-teams)\n- [List tags](https://developer.github.com/v3/repos/#list-tags)\n- [Delete a repository](https://developer.github.com/v3/repos/#delete-a-repository)\n\n#### Git Commits\n- [Get a commit](https://developer.github.com/v3/git/commits/#get-a-commit)\n- [Create a commit](https://developer.github.com/v3/git/commits/#create-a-commit)\n\n#### Git Blobs\n- [Get a blob](https://developer.github.com/v3/git/blobs/#get-a-blob)\n- [Create a blob](https://developer.github.com/v3/git/blobs/#create-a-blob)\n\n#### Git Tags\n- [Get a tag](https://developer.github.com/v3/git/tags/#get-a-tag)\n- [Create a tag object](https://developer.github.com/v3/git/tags/#create-a-tag-object)\n\n#### Git Trees\n- [Get a tree](https://developer.github.com/v3/git/trees/#get-a-tree)\n- [Create a tree](https://developer.github.com/v3/git/trees/#create-a-tree)\n\n#### Git References\n- [Get a reference](https://developer.github.com/v3/git/refs/#get-a-reference)\n- [Get all references](https://developer.github.com/v3/git/refs/#get-all-references)\n- [Create a reference](https://developer.github.com/v3/git/refs/#create-a-reference)\n- [Update a reference](https://developer.github.com/v3/git/refs/#update-a-reference)\n- [Delete a reference](https://developer.github.com/v3/git/refs/#delete-a-reference)\n\n#### Gitignore\n- [Listing available templates](https://developer.github.com/v3/gitignore/#listing-available-templates)\n- [Get a single template](https://developer.github.com/v3/gitignore/#get-a-single-template)\n\n#### Projects\n- [List repository projects](https://developer.github.com/v3/projects/#list-repository-projects)\n- [List organization projects](https://developer.github.com/v3/projects/#list-organization-projects)\n- [Get a project](https://developer.github.com/v3/projects/#get-a-project)\n- [Create a repository project](https://developer.github.com/v3/projects/#create-a-repository-project)\n- [Create an organization project](https://developer.github.com/v3/projects/#create-an-organization-project)\n- [Update a project](https://developer.github.com/v3/projects/#update-a-project)\n- [Delete a project](https://developer.github.com/v3/projects/#delete-a-project)\n\n#### Issues\n- [List issues for a repository](https://developer.github.com/v3/issues/#list-issues-for-a-repository)\n- [Get a single issue](https://developer.github.com/v3/issues/#get-a-single-issue)\n- [Create an issue](https://developer.github.com/v3/issues/#create-an-issue)\n- [Edit an issue](https://developer.github.com/v3/issues/#edit-an-issue)\n- [Lock an issue](https://developer.github.com/v3/issues/#lock-an-issue)\n- [Unlock an issue](https://developer.github.com/v3/issues/#unlock-an-issue)\n\n#### Members\n- [Members list](https://developer.github.com/v3/orgs/members/#members-list)\n- [Check membership](https://developer.github.com/v3/orgs/members/#check-membership)\n- [Remove a member](https://developer.github.com/v3/orgs/members/#remove-a-member)\n- [Public members list](https://developer.github.com/v3/orgs/members/#public-members-list)\n- [Check public membership](https://developer.github.com/v3/orgs/members/#check-public-membership)\n- [Get organization membership](https://developer.github.com/v3/orgs/members/#get-organization-membership)\n- [Add or update organization membership](https://developer.github.com/v3/orgs/members/#add-or-update-organization-membership)\n- [Remove organization membership](https://developer.github.com/v3/orgs/members/#remove-organization-membership)\n- [List pending organization invitations](https://developer.github.com/v3/orgs/members/#list-pending-organization-invitations)\n\n#### Outside Collaborators\n- [List outside collaborators](https://developer.github.com/v3/orgs/outside_collaborators/#list-outside-collaborators)\n- [Remove outside collaborator](https://developer.github.com/v3/orgs/outside_collaborators/#remove-outside-collaborator)\n- [Convert member to outside collaborator](https://developer.github.com/v3/orgs/outside_collaborators/#convert-member-to-outside-collaborator)\n\n#### Organizations\n- [List all organizations](https://developer.github.com/v3/orgs/#list-all-organizations)\n- [List user organizations](https://developer.github.com/v3/orgs/#list-user-organizations)\n- [Get an organization](https://developer.github.com/v3/orgs/#get-an-organization)\n\n#### Project cards\n- [List project cards](https://developer.github.com/v3/projects/cards/#list-project-cards)\n- [Get a project card](https://developer.github.com/v3/projects/cards/#get-a-project-card)\n- [Create a project card](https://developer.github.com/v3/projects/cards/#create-a-project-card)\n- [Update a project card](https://developer.github.com/v3/projects/cards/#update-a-project-card)\n- [Delete a project card](https://developer.github.com/v3/projects/cards/#delete-a-project-card)\n- [Move a project card](https://developer.github.com/v3/projects/cards/#move-a-project-card)\n\n#### Project columns\n- [List project columns](https://developer.github.com/v3/projects/columns/#list-project-columns)\n- [Get a project column](https://developer.github.com/v3/projects/columns/#get-a-project-column)\n- [Create a project column](https://developer.github.com/v3/projects/columns/#create-a-project-column)\n- [Update a project column](https://developer.github.com/v3/projects/columns/#update-a-project-column)\n- [Delete a project column](https://developer.github.com/v3/projects/columns/#delete-a-project-column)\n- [Move a project column](https://developer.github.com/v3/projects/columns/#move-a-project-column)\n\n#### Commits\n- [List commits on a repository](https://developer.github.com/v3/repos/commits/#list-commits-on-a-repository)\n- [Get a single commit](https://developer.github.com/v3/repos/commits/#get-a-single-commit)\n- [Get the SHA-1 of a commit reference](https://developer.github.com/v3/repos/commits/#get-the-sha-1-of-a-commit-reference)\n- [Compare two commits](https://developer.github.com/v3/repos/commits/#compare-two-commits)\n\n#### Deployments\n- [List deployments](https://developer.github.com/v3/repos/deployments/#list-deployments)\n- [Get a single deployment](https://developer.github.com/v3/repos/deployments/#get-a-single-deployment)\n- [Create a deployment](https://developer.github.com/v3/repos/deployments/#create-a-deployment)\n- [List deployment statuses](https://developer.github.com/v3/repos/deployments/#list-deployment-statuses)\n- [Get a single deployment status](https://developer.github.com/v3/repos/deployments/#get-a-single-deployment-status)\n- [Create a deployment status](https://developer.github.com/v3/repos/deployments/#create-a-deployment-status)\n\n#### Merging\n- [Perform a merge](https://developer.github.com/v3/repos/merging/#perform-a-merge)\n\n#### Downloads\n- [List downloads for a repository](https://developer.github.com/v3/repos/downloads/#list-downloads-for-a-repository)\n\n#### Statistics\n- [Get contributors list with additions, deletions, and commit counts](https://developer.github.com/v3/repos/statistics/#get-contributors-list-with-additions-deletions-and-commit-counts)\n- [Get the last year of commit activity data](https://developer.github.com/v3/repos/statistics/#get-the-last-year-of-commit-activity-data)\n- [Get the number of additions and deletions per week](https://developer.github.com/v3/repos/statistics/#get-the-number-of-additions-and-deletions-per-week)\n- [Get the weekly commit count for the repository owner and everyone else](https://developer.github.com/v3/repos/statistics/#get-the-weekly-commit-count-for-the-repository-owner-and-everyone-else)\n- [Get the number of commits per hour in each day](https://developer.github.com/v3/repos/statistics/#get-the-number-of-commits-per-hour-in-each-day)\n\n#### Releases\n- [List releases for a repository](https://developer.github.com/v3/repos/releases/#list-releases-for-a-repository)\n- [Get a single release](https://developer.github.com/v3/repos/releases/#get-a-single-release)\n- [Get the latest release](https://developer.github.com/v3/repos/releases/#get-the-latest-release)\n- [Get a release by tag name](https://developer.github.com/v3/repos/releases/#get-a-release-by-tag-name)\n- [Create a release](https://developer.github.com/v3/repos/releases/#create-a-release)\n- [Edit a release](https://developer.github.com/v3/repos/releases/#edit-a-release)\n- [Delete a release](https://developer.github.com/v3/repos/releases/#delete-a-release)\n- [List assets for a release](https://developer.github.com/v3/repos/releases/#list-assets-for-a-release)\n- [Upload a release asset](https://developer.github.com/v3/repos/releases/#upload-a-release-asset)\n- [Get a single release asset](https://developer.github.com/v3/repos/releases/#get-a-single-release-asset)\n- [Edit a release asset](https://developer.github.com/v3/repos/releases/#edit-a-release-asset)\n- [Delete a release asset](https://developer.github.com/v3/repos/releases/#delete-a-release-asset)\n\n#### Contents\n- [Get the README](https://developer.github.com/v3/repos/contents/#get-the-readme)\n- [Get contents](https://developer.github.com/v3/repos/contents/#get-contents)\n- [Create a file](https://developer.github.com/v3/repos/contents/#create-a-file)\n- [Update a file](https://developer.github.com/v3/repos/contents/#update-a-file)\n- [Delete a file](https://developer.github.com/v3/repos/contents/#delete-a-file)\n- [Get archive link](https://developer.github.com/v3/repos/contents/#get-archive-link)\n\n#### Repository Invitations\n- [List invitations for a repository](https://developer.github.com/v3/repos/invitations/#list-invitations-for-a-repository)\n- [Delete a repository invitation](https://developer.github.com/v3/repos/invitations/#delete-a-repository-invitation)\n- [Update a repository invitation](https://developer.github.com/v3/repos/invitations/#update-a-repository-invitation)\n\n#### Deploy Keys\n- [List deploy keys](https://developer.github.com/v3/repos/keys/#list-deploy-keys)\n- [Get a deploy key](https://developer.github.com/v3/repos/keys/#get-a-deploy-key)\n- [Add a new deploy key](https://developer.github.com/v3/repos/keys/#add-a-new-deploy-key)\n- [Remove a deploy key](https://developer.github.com/v3/repos/keys/#remove-a-deploy-key)\n\n#### Branches\n- [List branches](https://developer.github.com/v3/repos/branches/#list-branches)\n- [Get branch](https://developer.github.com/v3/repos/branches/#get-branch)\n- [Get branch protection](https://developer.github.com/v3/repos/branches/#get-branch-protection)\n- [Update branch protection](https://developer.github.com/v3/repos/branches/#update-branch-protection)\n- [Remove branch protection](https://developer.github.com/v3/repos/branches/#remove-branch-protection)\n- [Get required status checks of protected branch](https://developer.github.com/v3/repos/branches/#get-required-status-checks-of-protected-branch)\n- [Update required status checks of protected branch](https://developer.github.com/v3/repos/branches/#update-required-status-checks-of-protected-branch)\n- [Remove required status checks of protected branch](https://developer.github.com/v3/repos/branches/#remove-required-status-checks-of-protected-branch)\n- [List required status checks contexts of protected branch](https://developer.github.com/v3/repos/branches/#list-required-status-checks-contexts-of-protected-branch)\n- [Replace required status checks contexts of protected branch](https://developer.github.com/v3/repos/branches/#replace-required-status-checks-contexts-of-protected-branch)\n- [Add required status checks contexts of protected branch](https://developer.github.com/v3/repos/branches/#add-required-status-checks-contexts-of-protected-branch)\n- [Remove required status checks contexts of protected branch](https://developer.github.com/v3/repos/branches/#remove-required-status-checks-contexts-of-protected-branch)\n- [Get pull request review enforcement of protected branch](https://developer.github.com/v3/repos/branches/#get-pull-request-review-enforcement-of-protected-branch)\n- [Update pull request review enforcement of protected branch](https://developer.github.com/v3/repos/branches/#update-pull-request-review-enforcement-of-protected-branch)\n- [Remove pull request review enforcement of protected branch](https://developer.github.com/v3/repos/branches/#remove-pull-request-review-enforcement-of-protected-branch)\n- [Get required signatures of protected branch](https://developer.github.com/v3/repos/branches/#get-required-signatures-of-protected-branch)\n- [Add required signatures of protected branch](https://developer.github.com/v3/repos/branches/#add-required-signatures-of-protected-branch)\n- [Remove required signatures of protected branch](https://developer.github.com/v3/repos/branches/#remove-required-signatures-of-protected-branch)\n- [Get admin enforcement of protected branch](https://developer.github.com/v3/repos/branches/#get-admin-enforcement-of-protected-branch)\n- [Add admin enforcement of protected branch](https://developer.github.com/v3/repos/branches/#add-admin-enforcement-of-protected-branch)\n- [Remove admin enforcement of protected branch](https://developer.github.com/v3/repos/branches/#remove-admin-enforcement-of-protected-branch)\n- [Get restrictions of protected branch](https://developer.github.com/v3/repos/branches/#get-restrictions-of-protected-branch)\n- [Remove restrictions of protected branch](https://developer.github.com/v3/repos/branches/#remove-restrictions-of-protected-branch)\n- [List team restrictions of protected branch](https://developer.github.com/v3/repos/branches/#list-team-restrictions-of-protected-branch)\n- [Replace team restrictions of protected branch](https://developer.github.com/v3/repos/branches/#replace-team-restrictions-of-protected-branch)\n- [Add team restrictions of protected branch](https://developer.github.com/v3/repos/branches/#add-team-restrictions-of-protected-branch)\n- [Remove team restrictions of protected branch](https://developer.github.com/v3/repos/branches/#remove-team-restrictions-of-protected-branch)\n- [List user restrictions of protected branch](https://developer.github.com/v3/repos/branches/#list-user-restrictions-of-protected-branch)\n- [Replace user restrictions of protected branch](https://developer.github.com/v3/repos/branches/#replace-user-restrictions-of-protected-branch)\n- [Add user restrictions of protected branch](https://developer.github.com/v3/repos/branches/#add-user-restrictions-of-protected-branch)\n- [Remove user restrictions of protected branch](https://developer.github.com/v3/repos/branches/#remove-user-restrictions-of-protected-branch)\n\n#### Forks\n- [List forks](https://developer.github.com/v3/repos/forks/#list-forks)\n- [Create a fork](https://developer.github.com/v3/repos/forks/#create-a-fork)\n\n#### Statuses\n- [Create a status](https://developer.github.com/v3/repos/statuses/#create-a-status)\n- [List statuses for a specific ref](https://developer.github.com/v3/repos/statuses/#list-statuses-for-a-specific-ref)\n- [Get the combined status for a specific ref](https://developer.github.com/v3/repos/statuses/#get-the-combined-status-for-a-specific-ref)\n\n#### Community Profile\n- [Retrieve community profile metrics](https://developer.github.com/v3/repos/community/#retrieve-community-profile-metrics)\n\n#### Traffic\n- [List referrers](https://developer.github.com/v3/repos/traffic/#list-referrers)\n- [List paths](https://developer.github.com/v3/repos/traffic/#list-paths)\n- [Views](https://developer.github.com/v3/repos/traffic/#views)\n- [Clones](https://developer.github.com/v3/repos/traffic/#clones)\n\n#### Collaborators\n- [List collaborators](https://developer.github.com/v3/repos/collaborators/#list-collaborators)\n- [Check if a user is a collaborator](https://developer.github.com/v3/repos/collaborators/#check-if-a-user-is-a-collaborator)\n- [Review a user's permission level](https://developer.github.com/v3/repos/collaborators/#review-a-users-permission-level)\n- [Add user as a collaborator](https://developer.github.com/v3/repos/collaborators/#add-user-as-a-collaborator)\n- [Remove user as a collaborator](https://developer.github.com/v3/repos/collaborators/#remove-user-as-a-collaborator)\n\n#### Pages\n- [Get information about a Pages site](https://developer.github.com/v3/repos/pages/#get-information-about-a-pages-site)\n- [Request a page build](https://developer.github.com/v3/repos/pages/#request-a-page-build)\n- [List Pages builds](https://developer.github.com/v3/repos/pages/#list-pages-builds)\n- [Get latest Pages build](https://developer.github.com/v3/repos/pages/#get-latest-pages-build)\n- [Get a specific Pages build](https://developer.github.com/v3/repos/pages/#get-a-specific-pages-build)\n\n#### Licenses\n- [List all licenses](https://developer.github.com/v3/licenses/#list-all-licenses)\n- [Get an individual license](https://developer.github.com/v3/licenses/#get-an-individual-license)\n- [Get the contents of a repository's license](https://developer.github.com/v3/licenses/#get-the-contents-of-a-repositorys-license)\n\n#### Search\n- [Search repositories](https://developer.github.com/v3/search/#search-repositories)\n- [Search commits](https://developer.github.com/v3/search/#search-commits)\n- [Search code](https://developer.github.com/v3/search/#search-code)\n- [Search issues](https://developer.github.com/v3/search/#search-issues)\n- [Search users](https://developer.github.com/v3/search/#search-users)\n- [Search topics](https://developer.github.com/v3/search/#search-topics)\n- [Search labels](https://developer.github.com/v3/search/#search-labels)\n\n#### Team Discussions\n- [List discussions](https://developer.github.com/v3/teams/discussions/#list-discussions)\n- [Get a single discussion](https://developer.github.com/v3/teams/discussions/#get-a-single-discussion)\n- [Create a discussion](https://developer.github.com/v3/teams/discussions/#create-a-discussion)\n- [Edit a discussion](https://developer.github.com/v3/teams/discussions/#edit-a-discussion)\n- [Delete a discussion](https://developer.github.com/v3/teams/discussions/#delete-a-discussion)\n\n#### Team Members\n- [List team members](https://developer.github.com/v3/teams/members/#list-team-members)\n- [Get team member](https://developer.github.com/v3/teams/members/#get-team-member)\n- [Add team member](https://developer.github.com/v3/teams/members/#add-team-member)\n- [Remove team member](https://developer.github.com/v3/teams/members/#remove-team-member)\n- [Get team membership](https://developer.github.com/v3/teams/members/#get-team-membership)\n- [Add or update team membership](https://developer.github.com/v3/teams/members/#add-or-update-team-membership)\n- [Remove team membership](https://developer.github.com/v3/teams/members/#remove-team-membership)\n- [List pending team invitations](https://developer.github.com/v3/teams/members/#list-pending-team-invitations)\n\n#### Team Discussion Comments\n- [List comments](https://developer.github.com/v3/teams/discussion_comments/#list-comments)\n- [Get a single comment](https://developer.github.com/v3/teams/discussion_comments/#get-a-single-comment)\n- [Create a comment](https://developer.github.com/v3/teams/discussion_comments/#create-a-comment)\n- [Edit a comment](https://developer.github.com/v3/teams/discussion_comments/#edit-a-comment)\n- [Delete a comment](https://developer.github.com/v3/teams/discussion_comments/#delete-a-comment)\n\n# [GitHub Marketplace](https://developer.github.com/v3/apps/marketplace/)\n\n**Note:** The The GitHub Marketplace API on GitHub is currently available for developers to preview. To access the API, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.valkyrie-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).\n\nFor more information about GitHub Marketplace, see \"[GitHub Marketplace](https://developer.github.com/apps/marketplace/).\"\n\n**Note:** This preview includes methods for testing with **stubbed data**. Stubbed data is fake data that's useful for [testing your GitHub Apps](https://developer.github.com/apps/marketplace/testing-apps-apis-and-webhooks/). Stubbed data is hard-coded and will not change based on actual subscriptions.\n\nTo test with stubbed data, use a stubbed endpoint in place of its production counterpart. This allows you to test whether API logic succeeds before listing GitHub Apps on GitHub Marketplace.\n\nBe sure to replace stubbed endpoints with production endpoints before deploying your GitHub App.\n\nEndpoints for ```/marketplace_listing/*``` and ```/user/marketplace_purchases``` are only accessible by OAuth Apps using ```client_id``` and ```secret``` basic authentication or by [GitHub Apps using a JWT](https://developer.github.com/apps/building-github-apps/authentication-options-for-github-apps/#authenticating-as-a-github-app).\n-\n\nFor API authentication for GitHub Marketplace listings associated with an OAuth App, see \"[Authorization options for OAuth Apps](https://developer.github.com/apps/building-oauth-apps/authorization-options-for-oauth-apps/).\"\n-\n\nFor API authentication for GitHub Marketplace listings associated with a GitHub App, see \"[Authentication options for GitHub Apps](https://developer.github.com/apps/building-github-apps/authentication-options-for-github-apps/).\"\n\n# [Installations](https://developer.github.com/v3/apps/installations/)\n\nFor information on how to authenticate as an installation, see \"[Authentication Options for GitHub Apps](https://developer.github.com/apps/building-github-apps/authentication-options-for-github-apps#authenticating-as-an-installation).\"\n\n**Note:** To access the API with your integration, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` Header for your requests.\n\n```\napplication/vnd.github.machine-man-preview+json\n```","x-swgg-descriptionLineList":["# [GitHub Apps](https://developer.github.com/v3/apps/)","","For information on how to authenticate as a GitHub App, see \"[Authentication Options for GitHub Apps](https://developer.github.com/apps/building-github-apps/authentication-options-for-github-apps#authenticating-as-a-github-app).\"","","**Note:** To access the API with your integration, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` Header for your requests.","","```","application/vnd.github.machine-man-preview+json","```","","# [GitHub App Permissions](https://developer.github.com/v3/apps/permissions/)","","**Note:** To access the API with your integration, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` Header for your requests.","","```","application/vnd.github.machine-man-preview+json","```","","GitHub Apps are created with a set of permissions. These define what resources the GitHub App can access via the API. For more information, see \"[Permissions for GitHub Apps](https://developer.github.com/apps/building-github-apps/permissions-for-github-apps/).\"","","# [GitHub Apps: Available Endpoints](https://developer.github.com/v3/apps/available-endpoints/)","","**Note:** To access the API with your integration, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` Header for your requests.","","```","application/vnd.github.machine-man-preview+json","```","","The following endpoints are available for use by GitHub Apps. For more information, see \"[GitHub Apps](https://developer.github.com/apps/building-github-apps/).\"","","#### Users","- [Get a single user](https://developer.github.com/v3/users/#get-a-single-user)","- [Get all users](https://developer.github.com/v3/users/#get-all-users)","","#### Miscellaneous","- [Emojis](https://developer.github.com/v3/misc/#emojis)","","#### Rate Limit","- [Get your current rate limit status](https://developer.github.com/v3/rate_limit/#get-your-current-rate-limit-status)","","#### Public Keys","- [List public keys for a user](https://developer.github.com/v3/users/keys/#list-public-keys-for-a-user)","","#### GPG Keys","- [List GPG keys for a user](https://developer.github.com/v3/users/gpg_keys/#list-gpg-keys-for-a-user)","","#### Followers","- [List followers of a user](https://developer.github.com/v3/users/followers/#list-followers-of-a-user)","- [List users followed by another user](https://developer.github.com/v3/users/followers/#list-users-followed-by-another-user)","- [Check if one user follows another](https://developer.github.com/v3/users/followers/#check-if-one-user-follows-another)","","#### Reactions","- [List reactions for a commit comment](https://developer.github.com/v3/reactions/#list-reactions-for-a-commit-comment)","- [List reactions for an issue](https://developer.github.com/v3/reactions/#list-reactions-for-an-issue)","- [List reactions for an issue comment](https://developer.github.com/v3/reactions/#list-reactions-for-an-issue-comment)","- [List reactions for a pull request review comment](https://developer.github.com/v3/reactions/#list-reactions-for-a-pull-request-review-comment)","- [List reactions for a team discussion](https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion)","- [List reactions for a team discussion comment](https://developer.github.com/v3/reactions/#list-reactions-for-a-team-discussion-comment)","","#### Codes of Conduct","- [List all codes of conduct](https://developer.github.com/v3/codes_of_conduct/#list-all-codes-of-conduct)","- [Get an individual code of conduct](https://developer.github.com/v3/codes_of_conduct/#get-an-individual-code-of-conduct)","- [Get a repository's code of conduct](https://developer.github.com/v3/codes_of_conduct/#get-a-repositorys-code-of-conduct)","- [Get the contents of a repository's code of conduct](https://developer.github.com/v3/codes_of_conduct/#get-the-contents-of-a-repositorys-code-of-conduct)","","#### Watching","- [List watchers](https://developer.github.com/v3/activity/watching/#list-watchers)","","#### Feeds","- [List Feeds](https://developer.github.com/v3/activity/feeds/#list-feeds)","","#### Starring","- [List Stargazers](https://developer.github.com/v3/activity/starring/#list-stargazers)","","#### Events","- [List public events](https://developer.github.com/v3/activity/events/#list-public-events)","- [List repository events](https://developer.github.com/v3/activity/events/#list-repository-events)","- [List public events for a network of repositories](https://developer.github.com/v3/activity/events/#list-public-events-for-a-network-of-repositories)","- [List public events for an organization](https://developer.github.com/v3/activity/events/#list-public-events-for-an-organization)","- [List events that a user has received](https://developer.github.com/v3/activity/events/#list-events-that-a-user-has-received)","- [List public events that a user has received](https://developer.github.com/v3/activity/events/#list-public-events-that-a-user-has-received)","- [List events performed by a user](https://developer.github.com/v3/activity/events/#list-events-performed-by-a-user)","- [List public events performed by a user](https://developer.github.com/v3/activity/events/#list-public-events-performed-by-a-user)","- [List events for an issue](https://developer.github.com/v3/issues/events/#list-events-for-an-issue)","- [List events for a repository](https://developer.github.com/v3/issues/events/#list-events-for-a-repository)","- [Get a single event](https://developer.github.com/v3/issues/events/#get-a-single-event)","","#### Overview","- [Root endpoint](https://developer.github.com/v3/#root-endpoint)","","#### Pull Requests","- [List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests)","- [Get a single pull request](https://developer.github.com/v3/pulls/#get-a-single-pull-request)","- [Create a pull request](https://developer.github.com/v3/pulls/#create-a-pull-request)","- [Update a pull request](https://developer.github.com/v3/pulls/#update-a-pull-request)","- [List commits on a pull request](https://developer.github.com/v3/pulls/#list-commits-on-a-pull-request)","- [List pull requests files](https://developer.github.com/v3/pulls/#list-pull-requests-files)","- [Get if a pull request has been merged](https://developer.github.com/v3/pulls/#get-if-a-pull-request-has-been-merged)","- [Merge a pull request (Merge Button)](https://developer.github.com/v3/pulls/#merge-a-pull-request-merge-button)","","#### Emojis","- [Emojis](https://developer.github.com/v3/emojis/#emojis)","","#### Milestones","- [List milestones for a repository](https://developer.github.com/v3/issues/milestones/#list-milestones-for-a-repository)","- [Get a single milestone](https://developer.github.com/v3/issues/milestones/#get-a-single-milestone)","- [Create a milestone](https://developer.github.com/v3/issues/milestones/#create-a-milestone)","- [Update a milestone](https://developer.github.com/v3/issues/milestones/#update-a-milestone)","- [Delete a milestone](https://developer.github.com/v3/issues/milestones/#delete-a-milestone)","","#### Assignees","- [List assignees](https://developer.github.com/v3/issues/assignees/#list-assignees)","- [Check assignee](https://developer.github.com/v3/issues/assignees/#check-assignee)","- [Add assignees to an issue](https://developer.github.com/v3/issues/assignees/#add-assignees-to-an-issue)","- [Remove assignees from an issue](https://developer.github.com/v3/issues/assignees/#remove-assignees-from-an-issue)","","#### Timeline","- [List events for an issue](https://developer.github.com/v3/issues/timeline/#list-events-for-an-issue)","","#### Comments","- [List comments on an issue](https://developer.github.com/v3/issues/comments/#list-comments-on-an-issue)","- [List comments in a repository](https://developer.github.com/v3/issues/comments/#list-comments-in-a-repository)","- [Get a single comment](https://developer.github.com/v3/issues/comments/#get-a-single-comment)","- [Create a comment](https://developer.github.com/v3/issues/comments/#create-a-comment)","- [Edit a comment](https://developer.github.com/v3/issues/comments/#edit-a-comment)","- [Delete a comment](https://developer.github.com/v3/issues/comments/#delete-a-comment)","- [List commit comments for a repository](https://developer.github.com/v3/repos/comments/#list-commit-comments-for-a-repository)","- [List comments for a single commit](https://developer.github.com/v3/repos/comments/#list-comments-for-a-single-commit)","- [Create a commit comment](https://developer.github.com/v3/repos/comments/#create-a-commit-comment)","- [Get a single commit comment](https://developer.github.com/v3/repos/comments/#get-a-single-commit-comment)","- [Update a commit comment](https://developer.github.com/v3/repos/comments/#update-a-commit-comment)","- [Delete a commit comment](https://developer.github.com/v3/repos/comments/#delete-a-commit-comment)","","#### Labels","- [List all labels for this repository](https://developer.github.com/v3/issues/labels/#list-all-labels-for-this-repository)","- [Get a single label](https://developer.github.com/v3/issues/labels/#get-a-single-label)","- [Create a label](https://developer.github.com/v3/issues/labels/#create-a-label)","- [Update a label](https://developer.github.com/v3/issues/labels/#update-a-label)","- [Delete a label](https://developer.github.com/v3/issues/labels/#delete-a-label)","- [List labels on an issue](https://developer.github.com/v3/issues/labels/#list-labels-on-an-issue)","- [Add labels to an issue](https://developer.github.com/v3/issues/labels/#add-labels-to-an-issue)","- [Remove a label from an issue](https://developer.github.com/v3/issues/labels/#remove-a-label-from-an-issue)","- [Replace all labels for an issue](https://developer.github.com/v3/issues/labels/#replace-all-labels-for-an-issue)","- [Remove all labels from an issue](https://developer.github.com/v3/issues/labels/#remove-all-labels-from-an-issue)","- [Get labels for every issue in a milestone](https://developer.github.com/v3/issues/labels/#get-labels-for-every-issue-in-a-milestone)","","#### Source Imports","- [Start an import](https://developer.github.com/v3/migration/source_imports/#start-an-import)","- [Get import progress](https://developer.github.com/v3/migration/source_imports/#get-import-progress)","- [Update existing import](https://developer.github.com/v3/migration/source_imports/#update-existing-import)","- [Get commit authors](https://developer.github.com/v3/migration/source_imports/#get-commit-authors)","- [Map a commit author](https://developer.github.com/v3/migration/source_imports/#map-a-commit-author)","- [Set Git LFS preference](https://developer.github.com/v3/migration/source_imports/#set-git-lfs-preference)","- [Get large files](https://developer.github.com/v3/migration/source_imports/#get-large-files)","- [Cancel an import](https://developer.github.com/v3/migration/source_imports/#cancel-an-import)","","#### Teams","- [List teams](https://developer.github.com/v3/teams/#list-teams)","- [Get team](https://developer.github.com/v3/teams/#get-team)","- [Create team](https://developer.github.com/v3/teams/#create-team)","- [Edit team](https://developer.github.com/v3/teams/#edit-team)","- [Delete team](https://developer.github.com/v3/teams/#delete-team)","- [List child teams](https://developer.github.com/v3/teams/#list-child-teams)","- [List team repos](https://developer.github.com/v3/teams/#list-team-repos)","- [Check if a team manages a repository](https://developer.github.com/v3/teams/#check-if-a-team-manages-a-repository)","","#### Markdown","- [Render an arbitrary Markdown document](https://developer.github.com/v3/markdown/#render-an-arbitrary-markdown-document)","- [Render a Markdown document in raw mode](https://developer.github.com/v3/markdown/#render-a-markdown-document-in-raw-mode)","","#### Meta","- [Meta](https://developer.github.com/v3/meta/#meta)","","#### Review Requests","- [List review requests](https://developer.github.com/v3/pulls/review_requests/#list-review-requests)","- [Create a review request](https://developer.github.com/v3/pulls/review_requests/#create-a-review-request)","- [Delete a review request](https://developer.github.com/v3/pulls/review_requests/#delete-a-review-request)","","#### Reviews","- [List reviews on a pull request](https://developer.github.com/v3/pulls/reviews/#list-reviews-on-a-pull-request)","- [Get a single review](https://developer.github.com/v3/pulls/reviews/#get-a-single-review)","- [Delete a pending review](https://developer.github.com/v3/pulls/reviews/#delete-a-pending-review)","- [Get comments for a single review](https://developer.github.com/v3/pulls/reviews/#get-comments-for-a-single-review)","- [Create a pull request review](https://developer.github.com/v3/pulls/reviews/#create-a-pull-request-review)","- [Submit a pull request review](https://developer.github.com/v3/pulls/reviews/#submit-a-pull-request-review)","- [Dismiss a pull request review](https://developer.github.com/v3/pulls/reviews/#dismiss-a-pull-request-review)","","#### Review Comments","- [List comments on a pull request](https://developer.github.com/v3/pulls/comments/#list-comments-on-a-pull-request)","- [List comments in a repository](https://developer.github.com/v3/pulls/comments/#list-comments-in-a-repository)","- [Get a single comment](https://developer.github.com/v3/pulls/comments/#get-a-single-comment)","- [Create a comment](https://developer.github.com/v3/pulls/comments/#create-a-comment)","- [Edit a comment](https://developer.github.com/v3/pulls/comments/#edit-a-comment)","- [Delete a comment](https://developer.github.com/v3/pulls/comments/#delete-a-comment)","","#### GitHub Apps","- [Get a single GitHub App](https://developer.github.com/v3/apps/#get-a-single-github-app)","- [Get the authenticated GitHub App](https://developer.github.com/v3/apps/#get-the-authenticated-github-app)","- [Find installations](https://developer.github.com/v3/apps/#find-installations)","- [Get a single installation](https://developer.github.com/v3/apps/#get-a-single-installation)","- [Create a new installation token](https://developer.github.com/v3/apps/#create-a-new-installation-token)","","#### Installations","- [List repositories](https://developer.github.com/v3/apps/installations/#list-repositories)","","#### Repositories","- [List user repositories](https://developer.github.com/v3/repos/#list-user-repositories)","- [List organization repositories](https://developer.github.com/v3/repos/#list-organization-repositories)","- [List all public repositories](https://developer.github.com/v3/repos/#list-all-public-repositories)","- [Create](https://developer.github.com/v3/repos/#create)","- [Get](https://developer.github.com/v3/repos/#get)","- [Edit](https://developer.github.com/v3/repos/#edit)","- [List all topics for a repository](https://developer.github.com/v3/repos/#list-all-topics-for-a-repository)","- [Replace all topics for a repository](https://developer.github.com/v3/repos/#replace-all-topics-for-a-repository)","- [List contributors](https://developer.github.com/v3/repos/#list-contributors)","- [List languages](https://developer.github.com/v3/repos/#list-languages)","- [List teams](https://developer.github.com/v3/repos/#list-teams)","- [List tags](https://developer.github.com/v3/repos/#list-tags)","- [Delete a repository](https://developer.github.com/v3/repos/#delete-a-repository)","","#### Git Commits","- [Get a commit](https://developer.github.com/v3/git/commits/#get-a-commit)","- [Create a commit](https://developer.github.com/v3/git/commits/#create-a-commit)","","#### Git Blobs","- [Get a blob](https://developer.github.com/v3/git/blobs/#get-a-blob)","- [Create a blob](https://developer.github.com/v3/git/blobs/#create-a-blob)","","#### Git Tags","- [Get a tag](https://developer.github.com/v3/git/tags/#get-a-tag)","- [Create a tag object](https://developer.github.com/v3/git/tags/#create-a-tag-object)","","#### Git Trees","- [Get a tree](https://developer.github.com/v3/git/trees/#get-a-tree)","- [Create a tree](https://developer.github.com/v3/git/trees/#create-a-tree)","","#### Git References","- [Get a reference](https://developer.github.com/v3/git/refs/#get-a-reference)","- [Get all references](https://developer.github.com/v3/git/refs/#get-all-references)","- [Create a reference](https://developer.github.com/v3/git/refs/#create-a-reference)","- [Update a reference](https://developer.github.com/v3/git/refs/#update-a-reference)","- [Delete a reference](https://developer.github.com/v3/git/refs/#delete-a-reference)","","#### Gitignore","- [Listing available templates](https://developer.github.com/v3/gitignore/#listing-available-templates)","- [Get a single template](https://developer.github.com/v3/gitignore/#get-a-single-template)","","#### Projects","- [List repository projects](https://developer.github.com/v3/projects/#list-repository-projects)","- [List organization projects](https://developer.github.com/v3/projects/#list-organization-projects)","- [Get a project](https://developer.github.com/v3/projects/#get-a-project)","- [Create a repository project](https://developer.github.com/v3/projects/#create-a-repository-project)","- [Create an organization project](https://developer.github.com/v3/projects/#create-an-organization-project)","- [Update a project](https://developer.github.com/v3/projects/#update-a-project)","- [Delete a project](https://developer.github.com/v3/projects/#delete-a-project)","","#### Issues","- [List issues for a repository](https://developer.github.com/v3/issues/#list-issues-for-a-repository)","- [Get a single issue](https://developer.github.com/v3/issues/#get-a-single-issue)","- [Create an issue](https://developer.github.com/v3/issues/#create-an-issue)","- [Edit an issue](https://developer.github.com/v3/issues/#edit-an-issue)","- [Lock an issue](https://developer.github.com/v3/issues/#lock-an-issue)","- [Unlock an issue](https://developer.github.com/v3/issues/#unlock-an-issue)","","#### Members","- [Members list](https://developer.github.com/v3/orgs/members/#members-list)","- [Check membership](https://developer.github.com/v3/orgs/members/#check-membership)","- [Remove a member](https://developer.github.com/v3/orgs/members/#remove-a-member)","- [Public members list](https://developer.github.com/v3/orgs/members/#public-members-list)","- [Check public membership](https://developer.github.com/v3/orgs/members/#check-public-membership)","- [Get organization membership](https://developer.github.com/v3/orgs/members/#get-organization-membership)","- [Add or update organization membership](https://developer.github.com/v3/orgs/members/#add-or-update-organization-membership)","- [Remove organization membership](https://developer.github.com/v3/orgs/members/#remove-organization-membership)","- [List pending organization invitations](https://developer.github.com/v3/orgs/members/#list-pending-organization-invitations)","","#### Outside Collaborators","- [List outside collaborators](https://developer.github.com/v3/orgs/outside_collaborators/#list-outside-collaborators)","- [Remove outside collaborator](https://developer.github.com/v3/orgs/outside_collaborators/#remove-outside-collaborator)","- [Convert member to outside collaborator](https://developer.github.com/v3/orgs/outside_collaborators/#convert-member-to-outside-collaborator)","","#### Organizations","- [List all organizations](https://developer.github.com/v3/orgs/#list-all-organizations)","- [List user organizations](https://developer.github.com/v3/orgs/#list-user-organizations)","- [Get an organization](https://developer.github.com/v3/orgs/#get-an-organization)","","#### Project cards","- [List project cards](https://developer.github.com/v3/projects/cards/#list-project-cards)","- [Get a project card](https://developer.github.com/v3/projects/cards/#get-a-project-card)","- [Create a project card](https://developer.github.com/v3/projects/cards/#create-a-project-card)","- [Update a project card](https://developer.github.com/v3/projects/cards/#update-a-project-card)","- [Delete a project card](https://developer.github.com/v3/projects/cards/#delete-a-project-card)","- [Move a project card](https://developer.github.com/v3/projects/cards/#move-a-project-card)","","#### Project columns","- [List project columns](https://developer.github.com/v3/projects/columns/#list-project-columns)","- [Get a project column](https://developer.github.com/v3/projects/columns/#get-a-project-column)","- [Create a project column](https://developer.github.com/v3/projects/columns/#create-a-project-column)","- [Update a project column](https://developer.github.com/v3/projects/columns/#update-a-project-column)","- [Delete a project column](https://developer.github.com/v3/projects/columns/#delete-a-project-column)","- [Move a project column](https://developer.github.com/v3/projects/columns/#move-a-project-column)","","#### Commits","- [List commits on a repository](https://developer.github.com/v3/repos/commits/#list-commits-on-a-repository)","- [Get a single commit](https://developer.github.com/v3/repos/commits/#get-a-single-commit)","- [Get the SHA-1 of a commit reference](https://developer.github.com/v3/repos/commits/#get-the-sha-1-of-a-commit-reference)","- [Compare two commits](https://developer.github.com/v3/repos/commits/#compare-two-commits)","","#### Deployments","- [List deployments](https://developer.github.com/v3/repos/deployments/#list-deployments)","- [Get a single deployment](https://developer.github.com/v3/repos/deployments/#get-a-single-deployment)","- [Create a deployment](https://developer.github.com/v3/repos/deployments/#create-a-deployment)","- [List deployment statuses](https://developer.github.com/v3/repos/deployments/#list-deployment-statuses)","- [Get a single deployment status](https://developer.github.com/v3/repos/deployments/#get-a-single-deployment-status)","- [Create a deployment status](https://developer.github.com/v3/repos/deployments/#create-a-deployment-status)","","#### Merging","- [Perform a merge](https://developer.github.com/v3/repos/merging/#perform-a-merge)","","#### Downloads","- [List downloads for a repository](https://developer.github.com/v3/repos/downloads/#list-downloads-for-a-repository)","","#### Statistics","- [Get contributors list with additions, deletions, and commit counts](https://developer.github.com/v3/repos/statistics/#get-contributors-list-with-additions-deletions-and-commit-counts)","- [Get the last year of commit activity data](https://developer.github.com/v3/repos/statistics/#get-the-last-year-of-commit-activity-data)","- [Get the number of additions and deletions per week](https://developer.github.com/v3/repos/statistics/#get-the-number-of-additions-and-deletions-per-week)","- [Get the weekly commit count for the repository owner and everyone else](https://developer.github.com/v3/repos/statistics/#get-the-weekly-commit-count-for-the-repository-owner-and-everyone-else)","- [Get the number of commits per hour in each day](https://developer.github.com/v3/repos/statistics/#get-the-number-of-commits-per-hour-in-each-day)","","#### Releases","- [List releases for a repository](https://developer.github.com/v3/repos/releases/#list-releases-for-a-repository)","- [Get a single release](https://developer.github.com/v3/repos/releases/#get-a-single-release)","- [Get the latest release](https://developer.github.com/v3/repos/releases/#get-the-latest-release)","- [Get a release by tag name](https://developer.github.com/v3/repos/releases/#get-a-release-by-tag-name)","- [Create a release](https://developer.github.com/v3/repos/releases/#create-a-release)","- [Edit a release](https://developer.github.com/v3/repos/releases/#edit-a-release)","- [Delete a release](https://developer.github.com/v3/repos/releases/#delete-a-release)","- [List assets for a release](https://developer.github.com/v3/repos/releases/#list-assets-for-a-release)","- [Upload a release asset](https://developer.github.com/v3/repos/releases/#upload-a-release-asset)","- [Get a single release asset](https://developer.github.com/v3/repos/releases/#get-a-single-release-asset)","- [Edit a release asset](https://developer.github.com/v3/repos/releases/#edit-a-release-asset)","- [Delete a release asset](https://developer.github.com/v3/repos/releases/#delete-a-release-asset)","","#### Contents","- [Get the README](https://developer.github.com/v3/repos/contents/#get-the-readme)","- [Get contents](https://developer.github.com/v3/repos/contents/#get-contents)","- [Create a file](https://developer.github.com/v3/repos/contents/#create-a-file)","- [Update a file](https://developer.github.com/v3/repos/contents/#update-a-file)","- [Delete a file](https://developer.github.com/v3/repos/contents/#delete-a-file)","- [Get archive link](https://developer.github.com/v3/repos/contents/#get-archive-link)","","#### Repository Invitations","- [List invitations for a repository](https://developer.github.com/v3/repos/invitations/#list-invitations-for-a-repository)","- [Delete a repository invitation](https://developer.github.com/v3/repos/invitations/#delete-a-repository-invitation)","- [Update a repository invitation](https://developer.github.com/v3/repos/invitations/#update-a-repository-invitation)","","#### Deploy Keys","- [List deploy keys](https://developer.github.com/v3/repos/keys/#list-deploy-keys)","- [Get a deploy key](https://developer.github.com/v3/repos/keys/#get-a-deploy-key)","- [Add a new deploy key](https://developer.github.com/v3/repos/keys/#add-a-new-deploy-key)","- [Remove a deploy key](https://developer.github.com/v3/repos/keys/#remove-a-deploy-key)","","#### Branches","- [List branches](https://developer.github.com/v3/repos/branches/#list-branches)","- [Get branch](https://developer.github.com/v3/repos/branches/#get-branch)","- [Get branch protection](https://developer.github.com/v3/repos/branches/#get-branch-protection)","- [Update branch protection](https://developer.github.com/v3/repos/branches/#update-branch-protection)","- [Remove branch protection](https://developer.github.com/v3/repos/branches/#remove-branch-protection)","- [Get required status checks of protected branch](https://developer.github.com/v3/repos/branches/#get-required-status-checks-of-protected-branch)","- [Update required status checks of protected branch](https://developer.github.com/v3/repos/branches/#update-required-status-checks-of-protected-branch)","- [Remove required status checks of protected branch](https://developer.github.com/v3/repos/branches/#remove-required-status-checks-of-protected-branch)","- [List required status checks contexts of protected branch](https://developer.github.com/v3/repos/branches/#list-required-status-checks-contexts-of-protected-branch)","- [Replace required status checks contexts of protected branch](https://developer.github.com/v3/repos/branches/#replace-required-status-checks-contexts-of-protected-branch)","- [Add required status checks contexts of protected branch](https://developer.github.com/v3/repos/branches/#add-required-status-checks-contexts-of-protected-branch)","- [Remove required status checks contexts of protected branch](https://developer.github.com/v3/repos/branches/#remove-required-status-checks-contexts-of-protected-branch)","- [Get pull request review enforcement of protected branch](https://developer.github.com/v3/repos/branches/#get-pull-request-review-enforcement-of-protected-branch)","- [Update pull request review enforcement of protected branch](https://developer.github.com/v3/repos/branches/#update-pull-request-review-enforcement-of-protected-branch)","- [Remove pull request review enforcement of protected branch](https://developer.github.com/v3/repos/branches/#remove-pull-request-review-enforcement-of-protected-branch)","- [Get required signatures of protected branch](https://developer.github.com/v3/repos/branches/#get-required-signatures-of-protected-branch)","- [Add required signatures of protected branch](https://developer.github.com/v3/repos/branches/#add-required-signatures-of-protected-branch)","- [Remove required signatures of protected branch](https://developer.github.com/v3/repos/branches/#remove-required-signatures-of-protected-branch)","- [Get admin enforcement of protected branch](https://developer.github.com/v3/repos/branches/#get-admin-enforcement-of-protected-branch)","- [Add admin enforcement of protected branch](https://developer.github.com/v3/repos/branches/#add-admin-enforcement-of-protected-branch)","- [Remove admin enforcement of protected branch](https://developer.github.com/v3/repos/branches/#remove-admin-enforcement-of-protected-branch)","- [Get restrictions of protected branch](https://developer.github.com/v3/repos/branches/#get-restrictions-of-protected-branch)","- [Remove restrictions of protected branch](https://developer.github.com/v3/repos/branches/#remove-restrictions-of-protected-branch)","- [List team restrictions of protected branch](https://developer.github.com/v3/repos/branches/#list-team-restrictions-of-protected-branch)","- [Replace team restrictions of protected branch](https://developer.github.com/v3/repos/branches/#replace-team-restrictions-of-protected-branch)","- [Add team restrictions of protected branch](https://developer.github.com/v3/repos/branches/#add-team-restrictions-of-protected-branch)","- [Remove team restrictions of protected branch](https://developer.github.com/v3/repos/branches/#remove-team-restrictions-of-protected-branch)","- [List user restrictions of protected branch](https://developer.github.com/v3/repos/branches/#list-user-restrictions-of-protected-branch)","- [Replace user restrictions of protected branch](https://developer.github.com/v3/repos/branches/#replace-user-restrictions-of-protected-branch)","- [Add user restrictions of protected branch](https://developer.github.com/v3/repos/branches/#add-user-restrictions-of-protected-branch)","- [Remove user restrictions of protected branch](https://developer.github.com/v3/repos/branches/#remove-user-restrictions-of-protected-branch)","","#### Forks","- [List forks](https://developer.github.com/v3/repos/forks/#list-forks)","- [Create a fork](https://developer.github.com/v3/repos/forks/#create-a-fork)","","#### Statuses","- [Create a status](https://developer.github.com/v3/repos/statuses/#create-a-status)","- [List statuses for a specific ref](https://developer.github.com/v3/repos/statuses/#list-statuses-for-a-specific-ref)","- [Get the combined status for a specific ref](https://developer.github.com/v3/repos/statuses/#get-the-combined-status-for-a-specific-ref)","","#### Community Profile","- [Retrieve community profile metrics](https://developer.github.com/v3/repos/community/#retrieve-community-profile-metrics)","","#### Traffic","- [List referrers](https://developer.github.com/v3/repos/traffic/#list-referrers)","- [List paths](https://developer.github.com/v3/repos/traffic/#list-paths)","- [Views](https://developer.github.com/v3/repos/traffic/#views)","- [Clones](https://developer.github.com/v3/repos/traffic/#clones)","","#### Collaborators","- [List collaborators](https://developer.github.com/v3/repos/collaborators/#list-collaborators)","- [Check if a user is a collaborator](https://developer.github.com/v3/repos/collaborators/#check-if-a-user-is-a-collaborator)","- [Review a user's permission level](https://developer.github.com/v3/repos/collaborators/#review-a-users-permission-level)","- [Add user as a collaborator](https://developer.github.com/v3/repos/collaborators/#add-user-as-a-collaborator)","- [Remove user as a collaborator](https://developer.github.com/v3/repos/collaborators/#remove-user-as-a-collaborator)","","#### Pages","- [Get information about a Pages site](https://developer.github.com/v3/repos/pages/#get-information-about-a-pages-site)","- [Request a page build](https://developer.github.com/v3/repos/pages/#request-a-page-build)","- [List Pages builds](https://developer.github.com/v3/repos/pages/#list-pages-builds)","- [Get latest Pages build](https://developer.github.com/v3/repos/pages/#get-latest-pages-build)","- [Get a specific Pages build](https://developer.github.com/v3/repos/pages/#get-a-specific-pages-build)","","#### Licenses","- [List all licenses](https://developer.github.com/v3/licenses/#list-all-licenses)","- [Get an individual license](https://developer.github.com/v3/licenses/#get-an-individual-license)","- [Get the contents of a repository's license](https://developer.github.com/v3/licenses/#get-the-contents-of-a-repositorys-license)","","#### Search","- [Search repositories](https://developer.github.com/v3/search/#search-repositories)","- [Search commits](https://developer.github.com/v3/search/#search-commits)","- [Search code](https://developer.github.com/v3/search/#search-code)","- [Search issues](https://developer.github.com/v3/search/#search-issues)","- [Search users](https://developer.github.com/v3/search/#search-users)","- [Search topics](https://developer.github.com/v3/search/#search-topics)","- [Search labels](https://developer.github.com/v3/search/#search-labels)","","#### Team Discussions","- [List discussions](https://developer.github.com/v3/teams/discussions/#list-discussions)","- [Get a single discussion](https://developer.github.com/v3/teams/discussions/#get-a-single-discussion)","- [Create a discussion](https://developer.github.com/v3/teams/discussions/#create-a-discussion)","- [Edit a discussion](https://developer.github.com/v3/teams/discussions/#edit-a-discussion)","- [Delete a discussion](https://developer.github.com/v3/teams/discussions/#delete-a-discussion)","","#### Team Members","- [List team members](https://developer.github.com/v3/teams/members/#list-team-members)","- [Get team member](https://developer.github.com/v3/teams/members/#get-team-member)","- [Add team member](https://developer.github.com/v3/teams/members/#add-team-member)","- [Remove team member](https://developer.github.com/v3/teams/members/#remove-team-member)","- [Get team membership](https://developer.github.com/v3/teams/members/#get-team-membership)","- [Add or update team membership](https://developer.github.com/v3/teams/members/#add-or-update-team-membership)","- [Remove team membership](https://developer.github.com/v3/teams/members/#remove-team-membership)","- [List pending team invitations](https://developer.github.com/v3/teams/members/#list-pending-team-invitations)","","#### Team Discussion Comments","- [List comments](https://developer.github.com/v3/teams/discussion_comments/#list-comments)","- [Get a single comment](https://developer.github.com/v3/teams/discussion_comments/#get-a-single-comment)","- [Create a comment](https://developer.github.com/v3/teams/discussion_comments/#create-a-comment)","- [Edit a comment](https://developer.github.com/v3/teams/discussion_comments/#edit-a-comment)","- [Delete a comment](https://developer.github.com/v3/teams/discussion_comments/#delete-a-comment)","","# [GitHub Marketplace](https://developer.github.com/v3/apps/marketplace/)","","**Note:** The The GitHub Marketplace API on GitHub is currently available for developers to preview. To access the API, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.valkyrie-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","","For more information about GitHub Marketplace, see \"[GitHub Marketplace](https://developer.github.com/apps/marketplace/).\"","","**Note:** This preview includes methods for testing with **stubbed data**. Stubbed data is fake data that's useful for [testing your GitHub Apps](https://developer.github.com/apps/marketplace/testing-apps-apis-and-webhooks/). Stubbed data is hard-coded and will not change based on actual subscriptions.","","To test with stubbed data, use a stubbed endpoint in place of its production counterpart. This allows you to test whether API logic succeeds before listing GitHub Apps on GitHub Marketplace.","","Be sure to replace stubbed endpoints with production endpoints before deploying your GitHub App.","","Endpoints for ```/marketplace_listing/*``` and ```/user/marketplace_purchases``` are only accessible by OAuth Apps using ```client_id``` and ```secret``` basic authentication or by [GitHub Apps using a JWT](https://developer.github.com/apps/building-github-apps/authentication-options-for-github-apps/#authenticating-as-a-github-app).","-","","For API authentication for GitHub Marketplace listings associated with an OAuth App, see \"[Authorization options for OAuth Apps](https://developer.github.com/apps/building-oauth-apps/authorization-options-for-oauth-apps/).\"","-","","For API authentication for GitHub Marketplace listings associated with a GitHub App, see \"[Authentication options for GitHub Apps](https://developer.github.com/apps/building-github-apps/authentication-options-for-github-apps/).\"","","# [Installations](https://developer.github.com/v3/apps/installations/)","","For information on how to authenticate as an installation, see \"[Authentication Options for GitHub Apps](https://developer.github.com/apps/building-github-apps/authentication-options-for-github-apps#authenticating-as-an-installation).\"","","**Note:** To access the API with your integration, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` Header for your requests.","","```","application/vnd.github.machine-man-preview+json","```"]},"github-gists":{"description":"# [Gists](https://developer.github.com/v3/gists/)\n\n**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.jean-grey-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).\n\nCustom media types\n\nThe following media types are supported when fetching gist contents. You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).\n```\napplication/vnd.github.VERSION.raw\napplication/vnd.github.VERSION.base64\n```\n\n# [Gist Comments](https://developer.github.com/v3/gists/comments/)\n\nGist Comments use [these custom media types](https://developer.github.com/v3/gists/comments/#custom-media-types). You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).\n\nCustom media types\n\nThese are the supported media types for gist comments. You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).\n```\napplication/vnd.github.VERSION.raw+json\napplication/vnd.github.VERSION.text+json\napplication/vnd.github.VERSION.html+json\napplication/vnd.github.VERSION.full+json\n```","x-swgg-descriptionLineList":["# [Gists](https://developer.github.com/v3/gists/)","","**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.jean-grey-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","","Custom media types","","The following media types are supported when fetching gist contents. You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).","```","application/vnd.github.VERSION.raw","application/vnd.github.VERSION.base64","```","","# [Gist Comments](https://developer.github.com/v3/gists/comments/)","","Gist Comments use [these custom media types](https://developer.github.com/v3/gists/comments/#custom-media-types). You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).","","Custom media types","","These are the supported media types for gist comments. You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).","```","application/vnd.github.VERSION.raw+json","application/vnd.github.VERSION.text+json","application/vnd.github.VERSION.html+json","application/vnd.github.VERSION.full+json","```"]},"github-git":{"description":"# [Git Data](https://developer.github.com/v3/git/)\n\nThe Git Database API gives you access to read and write raw Git objects to your Git database on GitHub and to list and update your references (branch heads and tags).\n\nThis basically allows you to reimplement a lot of Git functionality over our API - by creating raw objects directly into the database and updating branch references you could technically do just about anything that Git can do without having Git installed.\n\nGit DB API functions will return a ```409 Conflict``` if the git repository for a Repository is empty or unavailable.  This typically means it is being created still. Contact [GitHub support](https://github.com/contact) if this response status persists.\n\nFor more information on the Git object database, please read the [Git Internals](http://git-scm.com/book/en/v1/Git-Internals) chapter of the Pro Git book.\n\nAs an example, if you wanted to commit a change to a file in your repository, you would:\n- get the current commit object\n- retrieve the tree it points to\n- retrieve the content of the blob object that tree has for that particular file path\n- change the content somehow and post a new blob object with that new content, getting a blob SHA back\n- post a new tree object with that file path pointer replaced with your new blob SHA getting a tree SHA back\n- create a new commit object with the current commit SHA as the parent and the new tree SHA, getting a commit SHA back\n- update the reference of your branch to point to the new commit SHA\n\nIt might seem complex, but it's actually pretty simple when you understand the model and it opens up a ton of things you could potentially do with the API.\n\n# [Git Blobs](https://developer.github.com/v3/git/blobs/)\n\nA Git blob (binary large object) is the object type used to store the contents of each file in a repository. The file's SHA-1 hash is computed and stored in the blob object. These endpoints allow you to read and write [blob objects](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects) to your Git database on GitHub. See the [Git Database API](https://developer.github.com/v3/git) for more details. Blobs leverage [these custom media types](https://developer.github.com/v3/git/blobs/#custom-media-types). You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).\n- [Get a blob](https://developer.github.com/v3/git/blobs/#get-a-blob)\n- [Create a blob](https://developer.github.com/v3/git/blobs/#create-a-blob)\n- [Custom media types](https://developer.github.com/v3/git/blobs/#custom-media-types)\n\n**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.jean-grey-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).\n\nCustom media types\n\nThese are the supported media types for blobs. You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).\n```\napplication/json\napplication/vnd.github.VERSION.raw\n```\n\n# [Git Commits](https://developer.github.com/v3/git/commits/)\n\nA Git commit is a snapshot of the hierarchy ([Git tree](https://developer.github.com/v3/git/trees)) and the contents of the files ([Git blob](https://developer.github.com/v3/git/blobs)) in a Git repository. These endpoints allow you to read and write [commit objects](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects) to your Git database on GitHub. See the [Git Database API](https://developer.github.com/v3/git) for more details.\n- [Get a commit](https://developer.github.com/v3/git/commits/#get-a-commit)\n- [Create a commit](https://developer.github.com/v3/git/commits/#create-a-commit)\n- [Commit signature verification](https://developer.github.com/v3/git/commits/#commit-signature-verification)\n\n**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.jean-grey-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).\n\n# [Git Refs](https://developer.github.com/v3/git/refs/)\n\nA Git reference (```git ref```) is just a file that contains a Git commit SHA-1 hash. When referring to a Git commit, you can use the Git reference, which is an easy-to-remember name, rather than the hash. The Git reference can be rewritten to point to a new commit. A branch is just a Git reference that stores the new Git commit hash. These endpoints allow you to read and write [references](https://git-scm.com/book/en/v1/Git-Internals-Git-References) to your Git database on GitHub. See the [Git Database API](https://developer.github.com/v3/git) for more details.\n- [Get a reference](https://developer.github.com/v3/git/refs/#get-a-reference)\n- [Get all references](https://developer.github.com/v3/git/refs/#get-all-references)\n- [Create a reference](https://developer.github.com/v3/git/refs/#create-a-reference)\n- [Update a reference](https://developer.github.com/v3/git/refs/#update-a-reference)\n- [Delete a reference](https://developer.github.com/v3/git/refs/#delete-a-reference)\n\n**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.jean-grey-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).\n\n# [Git Tags](https://developer.github.com/v3/git/tags/)\n\nA Git tag is similar to a [Git reference](https://developer.github.com/v3/git/refs), but the Git commit that it points to never changes. Git tags are helpful when you want to point to specific releases. These endpoints allow you to read and write [tag objects](https://git-scm.com/book/en/v1/Git-Internals-Git-References#Tags) to your Git database on GitHub. See the [Git Database API](https://developer.github.com/v3/git) for more details. The Git tags API only supports [annotated tag objects](https://git-scm.com/book/en/v1/Git-Internals-Git-References#Tags), not lightweight tags.\n- [Get a tag](https://developer.github.com/v3/git/tags/#get-a-tag)\n- [Create a tag object](https://developer.github.com/v3/git/tags/#create-a-tag-object)\n- [Tag signature verification](https://developer.github.com/v3/git/tags/#tag-signature-verification)\n\n**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.jean-grey-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).\n\n# [Git Trees](https://developer.github.com/v3/git/trees/)\n\nA Git tree object creates the hierarchy between files in a Git repository. You can use the Git tree object to create the relationship between directories and the files they contain. These endpoints allow you to read and write [tree objects](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Tree-Objects) to your Git database on GitHub. See the [Git Database API](https://developer.github.com/v3/git) for more details.\n- [Get a tree](https://developer.github.com/v3/git/trees/#get-a-tree)\n- [Get a tree recursively](https://developer.github.com/v3/git/trees/#get-a-tree-recursively)\n- [Create a tree](https://developer.github.com/v3/git/trees/#create-a-tree)","x-swgg-descriptionLineList":["# [Git Data](https://developer.github.com/v3/git/)","","The Git Database API gives you access to read and write raw Git objects to your Git database on GitHub and to list and update your references (branch heads and tags).","","This basically allows you to reimplement a lot of Git functionality over our API - by creating raw objects directly into the database and updating branch references you could technically do just about anything that Git can do without having Git installed.","","Git DB API functions will return a ```409 Conflict``` if the git repository for a Repository is empty or unavailable.  This typically means it is being created still. Contact [GitHub support](https://github.com/contact) if this response status persists.","","For more information on the Git object database, please read the [Git Internals](http://git-scm.com/book/en/v1/Git-Internals) chapter of the Pro Git book.","","As an example, if you wanted to commit a change to a file in your repository, you would:","- get the current commit object","- retrieve the tree it points to","- retrieve the content of the blob object that tree has for that particular file path","- change the content somehow and post a new blob object with that new content, getting a blob SHA back","- post a new tree object with that file path pointer replaced with your new blob SHA getting a tree SHA back","- create a new commit object with the current commit SHA as the parent and the new tree SHA, getting a commit SHA back","- update the reference of your branch to point to the new commit SHA","","It might seem complex, but it's actually pretty simple when you understand the model and it opens up a ton of things you could potentially do with the API.","","# [Git Blobs](https://developer.github.com/v3/git/blobs/)","","A Git blob (binary large object) is the object type used to store the contents of each file in a repository. The file's SHA-1 hash is computed and stored in the blob object. These endpoints allow you to read and write [blob objects](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects) to your Git database on GitHub. See the [Git Database API](https://developer.github.com/v3/git) for more details. Blobs leverage [these custom media types](https://developer.github.com/v3/git/blobs/#custom-media-types). You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).","- [Get a blob](https://developer.github.com/v3/git/blobs/#get-a-blob)","- [Create a blob](https://developer.github.com/v3/git/blobs/#create-a-blob)","- [Custom media types](https://developer.github.com/v3/git/blobs/#custom-media-types)","","**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.jean-grey-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","","Custom media types","","These are the supported media types for blobs. You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).","```","application/json","application/vnd.github.VERSION.raw","```","","# [Git Commits](https://developer.github.com/v3/git/commits/)","","A Git commit is a snapshot of the hierarchy ([Git tree](https://developer.github.com/v3/git/trees)) and the contents of the files ([Git blob](https://developer.github.com/v3/git/blobs)) in a Git repository. These endpoints allow you to read and write [commit objects](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects) to your Git database on GitHub. See the [Git Database API](https://developer.github.com/v3/git) for more details.","- [Get a commit](https://developer.github.com/v3/git/commits/#get-a-commit)","- [Create a commit](https://developer.github.com/v3/git/commits/#create-a-commit)","- [Commit signature verification](https://developer.github.com/v3/git/commits/#commit-signature-verification)","","**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.jean-grey-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","","# [Git Refs](https://developer.github.com/v3/git/refs/)","","A Git reference (```git ref```) is just a file that contains a Git commit SHA-1 hash. When referring to a Git commit, you can use the Git reference, which is an easy-to-remember name, rather than the hash. The Git reference can be rewritten to point to a new commit. A branch is just a Git reference that stores the new Git commit hash. These endpoints allow you to read and write [references](https://git-scm.com/book/en/v1/Git-Internals-Git-References) to your Git database on GitHub. See the [Git Database API](https://developer.github.com/v3/git) for more details.","- [Get a reference](https://developer.github.com/v3/git/refs/#get-a-reference)","- [Get all references](https://developer.github.com/v3/git/refs/#get-all-references)","- [Create a reference](https://developer.github.com/v3/git/refs/#create-a-reference)","- [Update a reference](https://developer.github.com/v3/git/refs/#update-a-reference)","- [Delete a reference](https://developer.github.com/v3/git/refs/#delete-a-reference)","","**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.jean-grey-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","","# [Git Tags](https://developer.github.com/v3/git/tags/)","","A Git tag is similar to a [Git reference](https://developer.github.com/v3/git/refs), but the Git commit that it points to never changes. Git tags are helpful when you want to point to specific releases. These endpoints allow you to read and write [tag objects](https://git-scm.com/book/en/v1/Git-Internals-Git-References#Tags) to your Git database on GitHub. See the [Git Database API](https://developer.github.com/v3/git) for more details. The Git tags API only supports [annotated tag objects](https://git-scm.com/book/en/v1/Git-Internals-Git-References#Tags), not lightweight tags.","- [Get a tag](https://developer.github.com/v3/git/tags/#get-a-tag)","- [Create a tag object](https://developer.github.com/v3/git/tags/#create-a-tag-object)","- [Tag signature verification](https://developer.github.com/v3/git/tags/#tag-signature-verification)","","**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.jean-grey-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","","# [Git Trees](https://developer.github.com/v3/git/trees/)","","A Git tree object creates the hierarchy between files in a Git repository. You can use the Git tree object to create the relationship between directories and the files they contain. These endpoints allow you to read and write [tree objects](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Tree-Objects) to your Git database on GitHub. See the [Git Database API](https://developer.github.com/v3/git) for more details.","- [Get a tree](https://developer.github.com/v3/git/trees/#get-a-tree)","- [Get a tree recursively](https://developer.github.com/v3/git/trees/#get-a-tree-recursively)","- [Create a tree](https://developer.github.com/v3/git/trees/#create-a-tree)"]},"github-issues":{"description":"# [Issues](https://developer.github.com/v3/issues/)\n\nIssues use [these custom media types](https://developer.github.com/v3/issues/#custom-media-types). You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).\n\n**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.jean-grey-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).\n\nCustom media types\n\nThese are the supported media types for issues. You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).\n```\napplication/vnd.github.VERSION.raw+json\napplication/vnd.github.VERSION.text+json\napplication/vnd.github.VERSION.html+json\napplication/vnd.github.VERSION.full+json\n```\n\n# [Issue Assignees](https://developer.github.com/v3/issues/assignees/)\n\nno description\n\n# [Issue Comments](https://developer.github.com/v3/issues/comments/)\n\nThe Issue Comments API supports listing, viewing, editing, and creating comments on issues and pull requests.\n\nIssue Comments use [these custom media types](https://developer.github.com/v3/issues/comments/#custom-media-types). You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).\n\nCustom media types\n\nThese are the supported media types for issue comments. You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).\n```\napplication/vnd.github.VERSION.raw+json\napplication/vnd.github.VERSION.text+json\napplication/vnd.github.VERSION.html+json\napplication/vnd.github.VERSION.full+json\n```\n\n# [Issue Events](https://developer.github.com/v3/issues/events/)\n\nRecords various events that occur around an issue or pull request. This is useful both for display on issue/pull request information pages and also to determine who should be notified of comments.\n\n####  Attributes\n- id - The Integer ID of the event.\n- url - The API URL for fetching the event.\n- actor - The User object that generated the event.\n- commit_id - The String SHA of a commit that referenced this Issue\n- commit_url - The GitHub API link to a commit that referenced this Issue\n- event - Identifies the actual type of Event that occurred.\n- created_at - The timestamp indicating when the event occurred.\n- labels - The Labels object, including `name` and `color` attributes. Only provided for `labeled` and `unlabeled` events.\n- assignee - The User object which was assigned to (or unassigned from) this Issue. Only provided for 'assigned' and 'unassigned' events.\n- assigner - The User object that performed the assignment (or unassignment) for this Issue. Only provided for 'assigned' and 'unassigned' events.\n- review_requester - The User who requested a review. Only provided for 'review_requested' and 'review_request_removed' events.\n- requested_reviewers - The Users whose reviews were requested. Only provided for 'review_requested' and 'review_request_removed' events.\n- lock_reason - The reason an issue or pull request conversation was locked, if one was provided. Only provided for `locked` events.\n- dismissed_review - A `dismissed_review` object that includes the `state`, `review_id`, `dismissal_message`, and `dismissal_commit_id` (the ID of the commit that dismissed the review) if one exists. Possible `state` strings include `commented`, `approved`, or `changes_requested`. Only provided for `review_dismissed` events.\n- milestone - The Milestone object including a `title` attribute. Only provided for `milestoned` and   `demilestoned` events.\n- rename - An object containing rename details including `from` and `to` attributes. Only   provided for `renamed` events.\n\n####  Events\n- closed - The issue was closed by the actor. When the commit_id is present, it   identifies the commit that closed the issue using \"closes / fixes #NN\"   syntax.\n- reopened - The issue was reopened by the actor.\n- subscribed - The actor subscribed to receive notifications for an issue.\n- merged - The issue was merged by the actor. The `commit_id` attribute is the SHA1 of   the HEAD commit that was merged.\n- referenced - The issue was referenced from a commit message. The `commit_id` attribute is   the commit SHA1 of where that happened.\n- mentioned - The actor was @mentioned in an issue body.\n- assigned - The issue was assigned to the actor.\n- unassigned - The actor was unassigned from the issue.\n- labeled - A label was added to the issue.\n- unlabeled - A label was removed from the issue.\n- milestoned - The issue was added to a milestone.\n- demilestoned - The issue was removed from a milestone.\n- renamed - The issue title was changed.\n- locked - The issue was locked by the actor.\n- unlocked - The issue was unlocked by the actor.\n- head_ref_deleted - The pull request's branch was deleted.\n- head_ref_restored - The pull request's branch was restored.\n- review_dismissed - The actor dismissed a review from the pull request.\n- review_requested - The actor requested review from the subject on this pull request.\n- review_request_removed - The actor removed the review request for the subject on this pull request.\n- marked_as_duplicate - A user with write permissions marked an issue as a duplicate of another issue or a pull request as a duplicate of another pull request.\n- unmarked_as_duplicate - An issue that a user had previously marked as a duplicate of another issue is no longer considered a duplicate, or a pull request that a user had previously marked as a duplicate of another pull request is no longer considered a duplicate.\n- added_to_project - The issue was added to a project board.\n- moved_columns_in_project - The issue was moved between columns in a project board.\n- removed_from_project - The issue was removed from a project board.\n- converted_note_to_issue - The issue was created by converting a note in a project board to an issue.\n\n**Note**: The project-related events ```added_to_project```, ```moved_columns_in_project```, ```removed_from_project```, and ```converted_note_to_issue``` will not be included in the response if project boards have been [disabled](https://help.github.com/articles/disabling-project-boards-in-a-repository) in the repository.\n\n# [Issue Labels](https://developer.github.com/v3/issues/labels/)\n\n**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.jean-grey-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).\n\n# [Issue Milestones](https://developer.github.com/v3/issues/milestones/)\n\n**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.jean-grey-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).\n\n# [Issue Timeline](https://developer.github.com/v3/issues/timeline/)\n\nThe API to get issue timeline events is currently available for developers to preview.   During the preview period, the APIs may change without advance notice.   Please see the [blog post](https://developer.github.com/changes/2016-05-23-timeline-preview-api/) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.mockingbird-preview\n```\n\n####  Timeline\n- [List events for an issue](https://developer.github.com/v3/issues/timeline/#list-events-for-an-issue)\n\nRecords various events that occur around an issue or pull request. This is useful both for display on issue and pull request information pages, as well as to determine who should be notified of comments.\n\n####  Attributes\n- id - The Integer ID of the event.\n- url - The API URL for fetching the event.\n- actor - The User object that generated the event.\n- commit_id - The String SHA of a commit that referenced this Issue.\n- event - Identifies the actual type of Event that occurred.\n- created_at - The timestamp indicating when the event occurred.\n- label - The Label object including `name` and `color` attributes. Only provided for `labeled`   and `unlabeled` events.\n- assignee - The User object which was assigned to (or unassigned from) this Issue. Only provided for `assigned` and `unassigned` events.\n- dismissed_review - A `dismissed_review` object that includes the `state`, `review_id`, `dismissal_message`, and `dismissal_commit_id` (the ID of the commit that dismissed the review) if one exists. Possible `state` strings include `commented`, `approved`, or `changes_requested`. Only provided for `review_dismissed` events.\n- milestone - The Milestone object including a `title` attribute. Only provided for `milestoned` and   `demilestoned` events.\n- source - The `id`, `actor`, and `url` for the source of a reference from another issue. Only provided for `cross-referenced` events.\n- rename - An object containing rename details including `from` and `to` attributes. Only   provided for `renamed` events.\n\n####  Events\n- added_to_project - The issue was added to a project board.\n- assigned - The issue was assigned to the assignee.\n- closed - The issue was closed by the actor. When the commit_id is present, it   identifies the commit that closed the issue using \"closes / fixes #NN\"   syntax.\n- commented - A comment was added to the issue.\n- committed - A commit was added to the pull request's `HEAD` branch. Only provided for pull requests.\n- converted_note_to_issue - The issue was created by converting a note in a project board to an issue.\n- cross-referenced - The issue was referenced from another issue. The `source` attribute contains the `id`, `actor`, and `url` of the reference's source.\n- demilestoned - The issue was removed from a milestone.\n- head_ref_deleted - The pull request's branch was deleted.\n- head_ref_restored - The pull request's branch was restored.\n- labeled - A label was added to the issue.\n- locked - The issue was locked by the actor.\n- marked_as_duplicate - A user with write permissions marked an issue as a duplicate of another issue or a pull request as a duplicate of another pull request.\n- mentioned - The actor was @mentioned in an issue body.\n- merged - The issue was merged by the actor. The `commit_id` attribute is the SHA1 of   the HEAD commit that was merged.\n- milestoned - The issue was added to a milestone.\n- moved_columns_in_project - The issue was moved between columns in a project board.\n- referenced - The issue was referenced from a commit message. The `commit_id` attribute is   the commit SHA1 of where that happened.\n- removed_from_project - The issue was removed from a project board.\n- renamed - The issue title was changed.\n- reopened - The issue was reopened by the actor.\n- review_dismissed - The actor dismissed a review from the pull request.\n- review_requested - The actor requested a review from the subject on this pull request.\n- review_request_removed - The actor removed the review request for the subject on this pull request.\n- subscribed - The actor subscribed to receive notifications for an issue.\n- unassigned - The assignee was unassigned from the issue.\n- unlabeled - A label was removed from the issue.\n- unlocked - The issue was unlocked by the actor.\n- unmarked_as_duplicate - An issue that a user had previously marked as a duplicate of another issue is no longer considered a duplicate, or a pull request that a user had previously marked as a duplicate of another pull request is no longer considered a duplicate.\n- unsubscribed - The actor unsubscribed to stop receiving notifications for an issue.\n\n**Note**: The project-related events ```added_to_project```, ```moved_columns_in_project```, ```removed_from_project```, and ```converted_note_to_issue``` will not be included in the response if project boards have been [disabled](https://help.github.com/articles/disabling-project-boards-in-a-repository) in the repository.","x-swgg-descriptionLineList":["# [Issues](https://developer.github.com/v3/issues/)","","Issues use [these custom media types](https://developer.github.com/v3/issues/#custom-media-types). You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).","","**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.jean-grey-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","","Custom media types","","These are the supported media types for issues. You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).","```","application/vnd.github.VERSION.raw+json","application/vnd.github.VERSION.text+json","application/vnd.github.VERSION.html+json","application/vnd.github.VERSION.full+json","```","","# [Issue Assignees](https://developer.github.com/v3/issues/assignees/)","","no description","","# [Issue Comments](https://developer.github.com/v3/issues/comments/)","","The Issue Comments API supports listing, viewing, editing, and creating comments on issues and pull requests.","","Issue Comments use [these custom media types](https://developer.github.com/v3/issues/comments/#custom-media-types). You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).","","Custom media types","","These are the supported media types for issue comments. You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).","```","application/vnd.github.VERSION.raw+json","application/vnd.github.VERSION.text+json","application/vnd.github.VERSION.html+json","application/vnd.github.VERSION.full+json","```","","# [Issue Events](https://developer.github.com/v3/issues/events/)","","Records various events that occur around an issue or pull request. This is useful both for display on issue/pull request information pages and also to determine who should be notified of comments.","","####  Attributes","- id - The Integer ID of the event.","- url - The API URL for fetching the event.","- actor - The User object that generated the event.","- commit_id - The String SHA of a commit that referenced this Issue","- commit_url - The GitHub API link to a commit that referenced this Issue","- event - Identifies the actual type of Event that occurred.","- created_at - The timestamp indicating when the event occurred.","- labels - The Labels object, including `name` and `color` attributes. Only provided for `labeled` and `unlabeled` events.","- assignee - The User object which was assigned to (or unassigned from) this Issue. Only provided for 'assigned' and 'unassigned' events.","- assigner - The User object that performed the assignment (or unassignment) for this Issue. Only provided for 'assigned' and 'unassigned' events.","- review_requester - The User who requested a review. Only provided for 'review_requested' and 'review_request_removed' events.","- requested_reviewers - The Users whose reviews were requested. Only provided for 'review_requested' and 'review_request_removed' events.","- lock_reason - The reason an issue or pull request conversation was locked, if one was provided. Only provided for `locked` events.","- dismissed_review - A `dismissed_review` object that includes the `state`, `review_id`, `dismissal_message`, and `dismissal_commit_id` (the ID of the commit that dismissed the review) if one exists. Possible `state` strings include `commented`, `approved`, or `changes_requested`. Only provided for `review_dismissed` events.","- milestone - The Milestone object including a `title` attribute. Only provided for `milestoned` and   `demilestoned` events.","- rename - An object containing rename details including `from` and `to` attributes. Only   provided for `renamed` events.","","####  Events","- closed - The issue was closed by the actor. When the commit_id is present, it   identifies the commit that closed the issue using \"closes / fixes #NN\"   syntax.","- reopened - The issue was reopened by the actor.","- subscribed - The actor subscribed to receive notifications for an issue.","- merged - The issue was merged by the actor. The `commit_id` attribute is the SHA1 of   the HEAD commit that was merged.","- referenced - The issue was referenced from a commit message. The `commit_id` attribute is   the commit SHA1 of where that happened.","- mentioned - The actor was @mentioned in an issue body.","- assigned - The issue was assigned to the actor.","- unassigned - The actor was unassigned from the issue.","- labeled - A label was added to the issue.","- unlabeled - A label was removed from the issue.","- milestoned - The issue was added to a milestone.","- demilestoned - The issue was removed from a milestone.","- renamed - The issue title was changed.","- locked - The issue was locked by the actor.","- unlocked - The issue was unlocked by the actor.","- head_ref_deleted - The pull request's branch was deleted.","- head_ref_restored - The pull request's branch was restored.","- review_dismissed - The actor dismissed a review from the pull request.","- review_requested - The actor requested review from the subject on this pull request.","- review_request_removed - The actor removed the review request for the subject on this pull request.","- marked_as_duplicate - A user with write permissions marked an issue as a duplicate of another issue or a pull request as a duplicate of another pull request.","- unmarked_as_duplicate - An issue that a user had previously marked as a duplicate of another issue is no longer considered a duplicate, or a pull request that a user had previously marked as a duplicate of another pull request is no longer considered a duplicate.","- added_to_project - The issue was added to a project board.","- moved_columns_in_project - The issue was moved between columns in a project board.","- removed_from_project - The issue was removed from a project board.","- converted_note_to_issue - The issue was created by converting a note in a project board to an issue.","","**Note**: The project-related events ```added_to_project```, ```moved_columns_in_project```, ```removed_from_project```, and ```converted_note_to_issue``` will not be included in the response if project boards have been [disabled](https://help.github.com/articles/disabling-project-boards-in-a-repository) in the repository.","","# [Issue Labels](https://developer.github.com/v3/issues/labels/)","","**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.jean-grey-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","","# [Issue Milestones](https://developer.github.com/v3/issues/milestones/)","","**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.jean-grey-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","","# [Issue Timeline](https://developer.github.com/v3/issues/timeline/)","","The API to get issue timeline events is currently available for developers to preview.   During the preview period, the APIs may change without advance notice.   Please see the [blog post](https://developer.github.com/changes/2016-05-23-timeline-preview-api/) for full details.","","To access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.mockingbird-preview","```","","####  Timeline","- [List events for an issue](https://developer.github.com/v3/issues/timeline/#list-events-for-an-issue)","","Records various events that occur around an issue or pull request. This is useful both for display on issue and pull request information pages, as well as to determine who should be notified of comments.","","####  Attributes","- id - The Integer ID of the event.","- url - The API URL for fetching the event.","- actor - The User object that generated the event.","- commit_id - The String SHA of a commit that referenced this Issue.","- event - Identifies the actual type of Event that occurred.","- created_at - The timestamp indicating when the event occurred.","- label - The Label object including `name` and `color` attributes. Only provided for `labeled`   and `unlabeled` events.","- assignee - The User object which was assigned to (or unassigned from) this Issue. Only provided for `assigned` and `unassigned` events.","- dismissed_review - A `dismissed_review` object that includes the `state`, `review_id`, `dismissal_message`, and `dismissal_commit_id` (the ID of the commit that dismissed the review) if one exists. Possible `state` strings include `commented`, `approved`, or `changes_requested`. Only provided for `review_dismissed` events.","- milestone - The Milestone object including a `title` attribute. Only provided for `milestoned` and   `demilestoned` events.","- source - The `id`, `actor`, and `url` for the source of a reference from another issue. Only provided for `cross-referenced` events.","- rename - An object containing rename details including `from` and `to` attributes. Only   provided for `renamed` events.","","####  Events","- added_to_project - The issue was added to a project board.","- assigned - The issue was assigned to the assignee.","- closed - The issue was closed by the actor. When the commit_id is present, it   identifies the commit that closed the issue using \"closes / fixes #NN\"   syntax.","- commented - A comment was added to the issue.","- committed - A commit was added to the pull request's `HEAD` branch. Only provided for pull requests.","- converted_note_to_issue - The issue was created by converting a note in a project board to an issue.","- cross-referenced - The issue was referenced from another issue. The `source` attribute contains the `id`, `actor`, and `url` of the reference's source.","- demilestoned - The issue was removed from a milestone.","- head_ref_deleted - The pull request's branch was deleted.","- head_ref_restored - The pull request's branch was restored.","- labeled - A label was added to the issue.","- locked - The issue was locked by the actor.","- marked_as_duplicate - A user with write permissions marked an issue as a duplicate of another issue or a pull request as a duplicate of another pull request.","- mentioned - The actor was @mentioned in an issue body.","- merged - The issue was merged by the actor. The `commit_id` attribute is the SHA1 of   the HEAD commit that was merged.","- milestoned - The issue was added to a milestone.","- moved_columns_in_project - The issue was moved between columns in a project board.","- referenced - The issue was referenced from a commit message. The `commit_id` attribute is   the commit SHA1 of where that happened.","- removed_from_project - The issue was removed from a project board.","- renamed - The issue title was changed.","- reopened - The issue was reopened by the actor.","- review_dismissed - The actor dismissed a review from the pull request.","- review_requested - The actor requested a review from the subject on this pull request.","- review_request_removed - The actor removed the review request for the subject on this pull request.","- subscribed - The actor subscribed to receive notifications for an issue.","- unassigned - The assignee was unassigned from the issue.","- unlabeled - A label was removed from the issue.","- unlocked - The issue was unlocked by the actor.","- unmarked_as_duplicate - An issue that a user had previously marked as a duplicate of another issue is no longer considered a duplicate, or a pull request that a user had previously marked as a duplicate of another pull request is no longer considered a duplicate.","- unsubscribed - The actor unsubscribed to stop receiving notifications for an issue.","","**Note**: The project-related events ```added_to_project```, ```moved_columns_in_project```, ```removed_from_project```, and ```converted_note_to_issue``` will not be included in the response if project boards have been [disabled](https://help.github.com/articles/disabling-project-boards-in-a-repository) in the repository."]},"github-migration":{"description":"# [Migration](https://developer.github.com/v3/migration/)\n\nThese APIs help you move projects to or from GitHub.\n\n# [Migrations](https://developer.github.com/v3/migration/migrations/)\n\nThe Migrations API is only available to [authenticated](https://developer.github.com/v3/#authentication) organization [owners](https://help.github.com/articles/permission-levels-for-an-organization/).\n\nTo access the Migrations API, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.wyandotte-preview+json\n```\n\n# [Source Imports](https://developer.github.com/v3/migration/source_imports/)\n\nThe source import APIs are currently in public preview. During this period, the APIs may change in a backwards-incompatible way.  To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.barred-rock-preview\n```\n\nThe Source Import API lets you start an import from a Git, Subversion, Mercurial, or Team Foundation Server source repository. This is the same functionality as [the GitHub Importer](https://help.github.com/articles/importing-from-other-version-control-systems-to-github/).\n\nA typical source import would [start the import](https://developer.github.com/v3/migration/source_imports/#start-an-import) and then (optionally) [update the authors](https://developer.github.com/v3/migration/source_imports/#map-a-commit-author) and/or [set the preference](https://developer.github.com/v3/migration/source_imports/#set-git-lfs-preference) for using Git LFS if large files exist in the import. A more detailed example can be seen in this diagram:\n```\n+---------+                     +--------+                              +---------------------+\n| Tooling |                     | GitHub |                              | Original Repository |\n+---------+                     +--------+                              +---------------------+\n     |                              |                                              |\n     |  Start import                |                                              |\n     |-----------------------------&gt;|                                              |\n     |                              |                                              |\n     |                              |  Download source data                        |\n     |                              |---------------------------------------------&gt;|\n     |                              |                        Begin streaming data  |\n     |                              |&lt;---------------------------------------------|\n     |                              |                                              |\n     |  Get import progress         |                                              |\n     |-----------------------------&gt;|                                              |\n     |       \"status\": \"importing\"  |                                              |\n     |&lt;-----------------------------|                                              |\n     |                              |                                              |\n     |  Get commit authors          |                                              |\n     |-----------------------------&gt;|                                              |\n     |                              |                                              |\n     |  Map a commit author         |                                              |\n     |-----------------------------&gt;|                                              |\n     |                              |                                              |\n     |                              |                                              |\n     |                              |                       Finish streaming data  |\n     |                              |&lt;---------------------------------------------|\n     |                              |                                              |\n     |                              |  Rewrite commits with mapped authors         |\n     |                              |------+                                       |\n     |                              |      |                                       |\n     |                              |&lt;-----+                                       |\n     |                              |                                              |\n     |                              |  Update repository on GitHub                 |\n     |                              |------+                                       |\n     |                              |      |                                       |\n     |                              |&lt;-----+                                       |\n     |                              |                                              |\n     |  Map a commit author         |                                              |\n     |-----------------------------&gt;|                                              |\n     |                              |  Rewrite commits with mapped authors         |\n     |                              |------+                                       |\n     |                              |      |                                       |\n     |                              |&lt;-----+                                       |\n     |                              |                                              |\n     |                              |  Update repository on GitHub                 |\n     |                              |------+                                       |\n     |                              |      |                                       |\n     |                              |&lt;-----+                                       |\n     |                              |                                              |\n     |  Get large files             |                                              |\n     |-----------------------------&gt;|                                              |\n     |                              |                                              |\n     |  opt_in to Git LFS           |                                              |\n     |-----------------------------&gt;|                                              |\n     |                              |  Rewrite commits for large files             |\n     |                              |------+                                       |\n     |                              |      |                                       |\n     |                              |&lt;-----+                                       |\n     |                              |                                              |\n     |                              |  Update repository on GitHub                 |\n     |                              |------+                                       |\n     |                              |      |                                       |\n     |                              |&lt;-----+                                       |\n     |                              |                                              |\n     |  Get import progress         |                                              |\n     |-----------------------------&gt;|                                              |\n     |        \"status\": \"complete\"  |                                              |\n     |&lt;-----------------------------|                                              |\n     |                              |                                              |\n     |                              |                                              |\n```","x-swgg-descriptionLineList":["# [Migration](https://developer.github.com/v3/migration/)","","These APIs help you move projects to or from GitHub.","","# [Migrations](https://developer.github.com/v3/migration/migrations/)","","The Migrations API is only available to [authenticated](https://developer.github.com/v3/#authentication) organization [owners](https://help.github.com/articles/permission-levels-for-an-organization/).","","To access the Migrations API, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.wyandotte-preview+json","```","","# [Source Imports](https://developer.github.com/v3/migration/source_imports/)","","The source import APIs are currently in public preview. During this period, the APIs may change in a backwards-incompatible way.  To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.barred-rock-preview","```","","The Source Import API lets you start an import from a Git, Subversion, Mercurial, or Team Foundation Server source repository. This is the same functionality as [the GitHub Importer](https://help.github.com/articles/importing-from-other-version-control-systems-to-github/).","","A typical source import would [start the import](https://developer.github.com/v3/migration/source_imports/#start-an-import) and then (optionally) [update the authors](https://developer.github.com/v3/migration/source_imports/#map-a-commit-author) and/or [set the preference](https://developer.github.com/v3/migration/source_imports/#set-git-lfs-preference) for using Git LFS if large files exist in the import. A more detailed example can be seen in this diagram:","```","+---------+                     +--------+                              +---------------------+","| Tooling |                     | GitHub |                              | Original Repository |","+---------+                     +--------+                              +---------------------+","     |                              |                                              |","     |  Start import                |                                              |","     |-----------------------------&gt;|                                              |","     |                              |                                              |","     |                              |  Download source data                        |","     |                              |---------------------------------------------&gt;|","     |                              |                        Begin streaming data  |","     |                              |&lt;---------------------------------------------|","     |                              |                                              |","     |  Get import progress         |                                              |","     |-----------------------------&gt;|                                              |","     |       \"status\": \"importing\"  |                                              |","     |&lt;-----------------------------|                                              |","     |                              |                                              |","     |  Get commit authors          |                                              |","     |-----------------------------&gt;|                                              |","     |                              |                                              |","     |  Map a commit author         |                                              |","     |-----------------------------&gt;|                                              |","     |                              |                                              |","     |                              |                                              |","     |                              |                       Finish streaming data  |","     |                              |&lt;---------------------------------------------|","     |                              |                                              |","     |                              |  Rewrite commits with mapped authors         |","     |                              |------+                                       |","     |                              |      |                                       |","     |                              |&lt;-----+                                       |","     |                              |                                              |","     |                              |  Update repository on GitHub                 |","     |                              |------+                                       |","     |                              |      |                                       |","     |                              |&lt;-----+                                       |","     |                              |                                              |","     |  Map a commit author         |                                              |","     |-----------------------------&gt;|                                              |","     |                              |  Rewrite commits with mapped authors         |","     |                              |------+                                       |","     |                              |      |                                       |","     |                              |&lt;-----+                                       |","     |                              |                                              |","     |                              |  Update repository on GitHub                 |","     |                              |------+                                       |","     |                              |      |                                       |","     |                              |&lt;-----+                                       |","     |                              |                                              |","     |  Get large files             |                                              |","     |-----------------------------&gt;|                                              |","     |                              |                                              |","     |  opt_in to Git LFS           |                                              |","     |-----------------------------&gt;|                                              |","     |                              |  Rewrite commits for large files             |","     |                              |------+                                       |","     |                              |      |                                       |","     |                              |&lt;-----+                                       |","     |                              |                                              |","     |                              |  Update repository on GitHub                 |","     |                              |------+                                       |","     |                              |      |                                       |","     |                              |&lt;-----+                                       |","     |                              |                                              |","     |  Get import progress         |                                              |","     |-----------------------------&gt;|                                              |","     |        \"status\": \"complete\"  |                                              |","     |&lt;-----------------------------|                                              |","     |                              |                                              |","     |                              |                                              |","```"]},"github-misc":{"description":"# [Miscellaneous](https://developer.github.com/v3/misc/)\n\nThis is a miscellaneous set of APIs which provide access to top level GitHub resources and info.\n\n# [Codes of Conduct](https://developer.github.com/v3/codes_of_conduct/)\n\nThe Codes of Conduct API is currently available for developers to preview.   During the preview period, the API may change without advance notice.\n\nTo access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.scarlet-witch-preview+json\n```\n\n# [Emojis](https://developer.github.com/v3/emojis/)\n\nLists all the emojis available to use on GitHub.\n\n# [Gitignore](https://developer.github.com/v3/gitignore/)\n\nWhen you create a new GitHub repository via the API, you can specify a [.gitignore template](https://help.github.com/articles/ignoring-files) to apply to the repository upon creation. The .gitignore Templates API lists and fetches templates from the [GitHub .gitignore repository](https://github.com/github/gitignore).\n\n# [Licenses](https://developer.github.com/v3/licenses/)\n\nThe Licenses API returns metadata about popular open source licenses and information about a particular project's license file.\n\nThe Licenses API uses [the open source Ruby Gem Licensee](https://github.com/benbalter/licensee) to attempt to identify the project's license. Licensee matches the contents of a project's ```LICENSE``` file (if it exists) against a short list of known licenses. As a result, the API does not take into account the licenses of project dependencies or other means of documenting a project's license such as references to the license name in the documentation.\n\nIf a license is matched, the license key and name returned conforms to the [SPDX specification](https://spdx.org/).\n\n**Note:** These endpoints will also return a repository's license information:\n- [Get a repository](https://developer.github.com/v3/repos/#get)\n- [List user repositories](https://developer.github.com/v3/repos/#list-user-repositories)\n- [List organization repositories](https://developer.github.com/v3/repos/#list-organization-repositories)\n- [List forks](https://developer.github.com/v3/repos/forks/#list-forks)\n- [List repositories being watched](https://developer.github.com/v3/activity/watching/#list-repositories-being-watched)\n- [List team repos](https://developer.github.com/v3/teams/#list-team-repos)\n\nGitHub is a lot of things, but it’s not a law firm. As such, GitHub does not provide legal advice. Using the Licenses API or sending us an email about it does not constitute legal advice nor does it create an attorney-client relationship. If you have any questions about what you can and can't do with a particular license, you should consult with your own legal counsel before moving forward. In fact, you should always consult with your own lawyer before making any decisions that might have legal ramifications or that may impact your legal rights.\n\nGitHub created the License API to help users get information about open source licenses and the projects that use them. We hope it helps, but please keep in mind that we’re not lawyers (at least not most of us aren't) and that we make mistakes like everyone else. For that reason, GitHub provides the API on an “as-is” basis and makes no warranties regarding any information or licenses provided on or through it, and disclaims liability for damages resulting from using the API.\n\n# [Markdown](https://developer.github.com/v3/markdown/)\n\nno description\n\n# [Meta](https://developer.github.com/v3/meta/)\n\nThis endpoint provides information about GitHub.com, the service.\n\n# [Rate Limit](https://developer.github.com/v3/rate_limit/)\n\nThe overview documentation describes the [rate limit rules](https://developer.github.com/v3/#rate-limiting). You can check your current rate limit status at any time using the Rate Limit API described below.","x-swgg-descriptionLineList":["# [Miscellaneous](https://developer.github.com/v3/misc/)","","This is a miscellaneous set of APIs which provide access to top level GitHub resources and info.","","# [Codes of Conduct](https://developer.github.com/v3/codes_of_conduct/)","","The Codes of Conduct API is currently available for developers to preview.   During the preview period, the API may change without advance notice.","","To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.scarlet-witch-preview+json","```","","# [Emojis](https://developer.github.com/v3/emojis/)","","Lists all the emojis available to use on GitHub.","","# [Gitignore](https://developer.github.com/v3/gitignore/)","","When you create a new GitHub repository via the API, you can specify a [.gitignore template](https://help.github.com/articles/ignoring-files) to apply to the repository upon creation. The .gitignore Templates API lists and fetches templates from the [GitHub .gitignore repository](https://github.com/github/gitignore).","","# [Licenses](https://developer.github.com/v3/licenses/)","","The Licenses API returns metadata about popular open source licenses and information about a particular project's license file.","","The Licenses API uses [the open source Ruby Gem Licensee](https://github.com/benbalter/licensee) to attempt to identify the project's license. Licensee matches the contents of a project's ```LICENSE``` file (if it exists) against a short list of known licenses. As a result, the API does not take into account the licenses of project dependencies or other means of documenting a project's license such as references to the license name in the documentation.","","If a license is matched, the license key and name returned conforms to the [SPDX specification](https://spdx.org/).","","**Note:** These endpoints will also return a repository's license information:","- [Get a repository](https://developer.github.com/v3/repos/#get)","- [List user repositories](https://developer.github.com/v3/repos/#list-user-repositories)","- [List organization repositories](https://developer.github.com/v3/repos/#list-organization-repositories)","- [List forks](https://developer.github.com/v3/repos/forks/#list-forks)","- [List repositories being watched](https://developer.github.com/v3/activity/watching/#list-repositories-being-watched)","- [List team repos](https://developer.github.com/v3/teams/#list-team-repos)","","GitHub is a lot of things, but it’s not a law firm. As such, GitHub does not provide legal advice. Using the Licenses API or sending us an email about it does not constitute legal advice nor does it create an attorney-client relationship. If you have any questions about what you can and can't do with a particular license, you should consult with your own legal counsel before moving forward. In fact, you should always consult with your own lawyer before making any decisions that might have legal ramifications or that may impact your legal rights.","","GitHub created the License API to help users get information about open source licenses and the projects that use them. We hope it helps, but please keep in mind that we’re not lawyers (at least not most of us aren't) and that we make mistakes like everyone else. For that reason, GitHub provides the API on an “as-is” basis and makes no warranties regarding any information or licenses provided on or through it, and disclaims liability for damages resulting from using the API.","","# [Markdown](https://developer.github.com/v3/markdown/)","","no description","","# [Meta](https://developer.github.com/v3/meta/)","","This endpoint provides information about GitHub.com, the service.","","# [Rate Limit](https://developer.github.com/v3/rate_limit/)","","The overview documentation describes the [rate limit rules](https://developer.github.com/v3/#rate-limiting). You can check your current rate limit status at any time using the Rate Limit API described below."]},"github-orgs":{"description":"# [Organizations](https://developer.github.com/v3/orgs/)\n\n**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.jean-grey-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).\n\n# [Blocking Organization Users](https://developer.github.com/v3/orgs/blocking/)\n\n**Note:** The User Blocking API on GitHub is currently available for developers to preview. To access the API, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.giant-sentry-fist-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).\n\nThe token used to authenticate the call must have the ```admin:org``` scope in order to make any blocking calls for an organization. Otherwise, the response returns ```HTTP 404```.\n\n# [Organization Members](https://developer.github.com/v3/orgs/members/)\n\nno description\n\n# [Organization Outside Collaborators](https://developer.github.com/v3/orgs/outside_collaborators/)\n\nno description\n\n# [Organization Webhooks](https://developer.github.com/v3/orgs/hooks/)\n\nOrganization webhooks allow you to receive HTTP ```POST``` payloads whenever certain events happen within the organization. Subscribing to these events makes it possible to build integrations that react to actions on GitHub.com. For more information on actions you can subscribe to, check out our [Events documentation](https://developer.github.com/webhooks/#events).","x-swgg-descriptionLineList":["# [Organizations](https://developer.github.com/v3/orgs/)","","**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.jean-grey-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","","# [Blocking Organization Users](https://developer.github.com/v3/orgs/blocking/)","","**Note:** The User Blocking API on GitHub is currently available for developers to preview. To access the API, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.giant-sentry-fist-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","","The token used to authenticate the call must have the ```admin:org``` scope in order to make any blocking calls for an organization. Otherwise, the response returns ```HTTP 404```.","","# [Organization Members](https://developer.github.com/v3/orgs/members/)","","no description","","# [Organization Outside Collaborators](https://developer.github.com/v3/orgs/outside_collaborators/)","","no description","","# [Organization Webhooks](https://developer.github.com/v3/orgs/hooks/)","","Organization webhooks allow you to receive HTTP ```POST``` payloads whenever certain events happen within the organization. Subscribing to these events makes it possible to build integrations that react to actions on GitHub.com. For more information on actions you can subscribe to, check out our [Events documentation](https://developer.github.com/webhooks/#events)."]},"github-projects":{"description":"# [Projects](https://developer.github.com/v3/projects/)\n\nThe Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.inertia-preview+json\n```\n\n**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.jean-grey-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).\n\n# [Project cards](https://developer.github.com/v3/projects/cards/)\n\nThe Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.inertia-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).\n\n# [Project collaborators](https://developer.github.com/v3/projects/collaborators/)\n\nThis API allows you to interact with an organization's projects.\n\n# [Project columns](https://developer.github.com/v3/projects/columns/)\n\nThe Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.inertia-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","x-swgg-descriptionLineList":["# [Projects](https://developer.github.com/v3/projects/)","","The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.inertia-preview+json","```","","**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.jean-grey-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","","# [Project cards](https://developer.github.com/v3/projects/cards/)","","The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.inertia-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","","# [Project collaborators](https://developer.github.com/v3/projects/collaborators/)","","This API allows you to interact with an organization's projects.","","# [Project columns](https://developer.github.com/v3/projects/columns/)","","The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.inertia-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact)."]},"github-pulls":{"description":"# [Pull Requests](https://developer.github.com/v3/pulls/)\n\nThe Pull Request API allows you to list, view, edit, create, and even merge pull requests. Comments on pull requests can be managed via the [Issue Comments API](https://developer.github.com/v3/issues/comments/).\n\nPull Requests use [these custom media types](https://developer.github.com/v3/pulls/#custom-media-types). You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).\n\n**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.jean-grey-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).\n\nCustom media types\n\nThese are the supported media types for pull requests. You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).\n```\napplication/vnd.github.VERSION.raw+json\napplication/vnd.github.VERSION.text+json\napplication/vnd.github.VERSION.html+json\napplication/vnd.github.VERSION.full+json\napplication/vnd.github.VERSION.diff\napplication/vnd.github.VERSION.patch\n```\n\n# [Review Comments](https://developer.github.com/v3/pulls/comments/)\n\nPull Request review comments are comments on a portion of the unified diff.  These are separate from Commit Comments (which are applied directly to a commit, outside of the Pull Request view), and Issue Comments (which do not reference a portion of the unified diff).\n\nPull Request review comments use [these custom media types](https://developer.github.com/v3/pulls/comments/#custom-media-types). You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).\n\nCustom media types\n\nThese are the supported media types for pull request review comments. You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).\n```\napplication/vnd.github.VERSION.raw+json\napplication/vnd.github.VERSION.text+json\napplication/vnd.github.VERSION.html+json\napplication/vnd.github.VERSION.full+json\n```\n\n# [Review Requests](https://developer.github.com/v3/pulls/review_requests/)\n\nPull request authors and repository owners and collaborators can request a pull request review from anyone with write access to the repository. Each requested reviewer will receive a notification asking them to review the pull request.\n\n# [Reviews](https://developer.github.com/v3/pulls/reviews/)\n\nPull Request Reviews are groups of Pull Request Review Comments on the Pull Request, grouped together with a state and optional body comment.\n\n**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.jean-grey-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","x-swgg-descriptionLineList":["# [Pull Requests](https://developer.github.com/v3/pulls/)","","The Pull Request API allows you to list, view, edit, create, and even merge pull requests. Comments on pull requests can be managed via the [Issue Comments API](https://developer.github.com/v3/issues/comments/).","","Pull Requests use [these custom media types](https://developer.github.com/v3/pulls/#custom-media-types). You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).","","**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.jean-grey-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","","Custom media types","","These are the supported media types for pull requests. You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).","```","application/vnd.github.VERSION.raw+json","application/vnd.github.VERSION.text+json","application/vnd.github.VERSION.html+json","application/vnd.github.VERSION.full+json","application/vnd.github.VERSION.diff","application/vnd.github.VERSION.patch","```","","# [Review Comments](https://developer.github.com/v3/pulls/comments/)","","Pull Request review comments are comments on a portion of the unified diff.  These are separate from Commit Comments (which are applied directly to a commit, outside of the Pull Request view), and Issue Comments (which do not reference a portion of the unified diff).","","Pull Request review comments use [these custom media types](https://developer.github.com/v3/pulls/comments/#custom-media-types). You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).","","Custom media types","","These are the supported media types for pull request review comments. You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).","```","application/vnd.github.VERSION.raw+json","application/vnd.github.VERSION.text+json","application/vnd.github.VERSION.html+json","application/vnd.github.VERSION.full+json","```","","# [Review Requests](https://developer.github.com/v3/pulls/review_requests/)","","Pull request authors and repository owners and collaborators can request a pull request review from anyone with write access to the repository. Each requested reviewer will receive a notification asking them to review the pull request.","","# [Reviews](https://developer.github.com/v3/pulls/reviews/)","","Pull Request Reviews are groups of Pull Request Review Comments on the Pull Request, grouped together with a state and optional body comment.","","**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.jean-grey-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact)."]},"github-reactions":{"description":"# [Reactions](https://developer.github.com/v3/reactions/)\n\n**Note:** APIs for managing reactions are currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.squirrel-girl-preview+json\n```\n\n**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.jean-grey-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","x-swgg-descriptionLineList":["# [Reactions](https://developer.github.com/v3/reactions/)","","**Note:** APIs for managing reactions are currently available for developers to preview. See the [blog post](https://developer.github.com/changes/2016-05-12-reactions-api-preview) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.squirrel-girl-preview+json","```","","**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.jean-grey-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact)."]},"github-repos":{"description":"# [Repositories](https://developer.github.com/v3/repos/)\n\n**Note:** The ```topics``` property for repositories on GitHub is currently available for developers to preview. To view the ```topics``` property in calls that return repository results, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.mercy-preview+json\n```\n\n**Note:** The [Repository Transfer API](https://developer.github.com/changes/2017-11-09-repository-transfer-api-preview) is currently available for developers to preview. To access the API, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.nightshade-preview+json\n```\n\n**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.jean-grey-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).\n\n# [Branches](https://developer.github.com/v3/repos/branches/)\n\nno description\n\n# [Collaborators](https://developer.github.com/v3/repos/collaborators/)\n\nno description\n\n# [Comments](https://developer.github.com/v3/repos/comments/)\n\nCustom media types\n\nThese are the supported media types for commit comments. You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).\n```\napplication/vnd.github-commitcomment.raw+json\napplication/vnd.github-commitcomment.text+json\napplication/vnd.github-commitcomment.html+json\napplication/vnd.github-commitcomment.full+json\n```\n\n# [Commits](https://developer.github.com/v3/repos/commits/)\n\nThe Repo Commits API supports listing, viewing, and comparing commits in a repository.\n\n# [Community](https://developer.github.com/v3/repos/community/)\n\nWe're currently offering a preview of the Community Profile API (also known as community health).\n\nTo access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.black-panther-preview+json\n```\n\n# [Contents](https://developer.github.com/v3/repos/contents/)\n\nThese API methods let you retrieve the contents of files within a repository as Base64 encoded content. See [media types](https://developer.github.com/v3/repos/contents/#custom-media-types) for requesting the raw format or rendered HTML (when supported).\n\nCustom media types\n\n[READMEs](https://developer.github.com/v3/repos/contents/#get-the-readme), [files](https://developer.github.com/v3/repos/contents/#get-contents), and [symlinks](https://developer.github.com/v3/repos/contents/#get-contents) support the following custom media types:\n```\napplication/vnd.github.VERSION.raw\napplication/vnd.github.VERSION.html\n```\n\n# [Deploy Keys](https://developer.github.com/v3/repos/keys/)\n\nno description\n\n# [Deployments](https://developer.github.com/v3/repos/deployments/)\n\nDeployments are a request for a specific ref (branch, SHA, tag) to be deployed. GitHub then dispatches deployment events that external services can listen for and act on. This enables developers and organizations to build loosely-coupled tooling around deployments, without having to worry about implementation details of delivering different types of applications (e.g., web, native).\n\nDeployment statuses allow external services to mark deployments with an ```error```, ```failure```, ```pending```, or ```success``` state, which can then be consumed by any system listening for ```deployment_status``` events.\n\nDeployment statuses can also include an optional ```description``` and ```target_url```, and we highly recommend providing them as they make deployment statuses much more useful. The ```target_url``` would be the full URL to the deployment output, and the ```description``` would be the high level summary of what happened with the deployment.\n\nDeployments and deployment statuses both have associated [repository events](https://developer.github.com/v3/activity/events/types/#deploymentevent) when they're created. This allows webhooks and 3rd party integrations to respond to deployment requests as well as update the status of a deployment as progress is made.\n\nBelow is a simple sequence diagram for how these interactions would work.\n```\n+---------+             +--------+            +-----------+        +-------------+\n| Tooling |             | GitHub |            | 3rd Party |        | Your Server |\n+---------+             +--------+            +-----------+        +-------------+\n     |                      |                       |                     |\n     |  Create Deployment   |                       |                     |\n     |---------------------&gt;|                       |                     |\n     |                      |                       |                     |\n     |  Deployment Created  |                       |                     |\n     |&lt;---------------------|                       |                     |\n     |                      |                       |                     |\n     |                      |   Deployment Event    |                     |\n     |                      |----------------------&gt;|                     |\n     |                      |                       |     SSH+Deploys     |\n     |                      |                       |--------------------&gt;|\n     |                      |                       |                     |\n     |                      |   Deployment Status   |                     |\n     |                      |&lt;----------------------|                     |\n     |                      |                       |                     |\n     |                      |                       |   Deploy Completed  |\n     |                      |                       |&lt;--------------------|\n     |                      |                       |                     |\n     |                      |   Deployment Status   |                     |\n     |                      |&lt;----------------------|                     |\n     |                      |                       |                     |\n```\n\n\nKeep in mind that GitHub is never actually accessing your servers. It's up to your 3rd party integration to interact with deployment events.  This allows for [GitHub integrations](https://github.com/integrations) as well as running your own systems depending on your use case. Multiple systems can listen for deployment events, and it's up to each of those systems to decide whether or not they're responsible for pushing the code out to your servers, building native code, etc.\n\nNote that the ```repo_deployment``` [OAuth scope](https://developer.github.com/apps/building-integrations/setting-up-and-registering-oauth-apps/about-scopes-for-oauth-apps/) grants targeted access to deployments and deployment statuses **without** granting access to repository code, while the ```repo``` scope grants permission to code as well.\n\n**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.jean-grey-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).\n\n# [Downloads](https://developer.github.com/v3/repos/downloads/)\n\nThe Downloads API (described below) was [deprecated on December 11, 2012](https://github.com/blog/1302-goodbye-uploads). It will be removed at a future date.\n\nWe recommend using [Releases](https://developer.github.com/v3/repos/releases/) instead.\n\nThe downloads API is for package downloads only. If you want to get source tarballs you should use [this](https://developer.github.com/v3/repos/contents/#get-archive-link) instead.\n\n# [Forks](https://developer.github.com/v3/repos/forks/)\n\nno description\n\n# [Merging](https://developer.github.com/v3/repos/merging/)\n\nThe Repo Merging API supports merging branches in a repository. This accomplishes essentially the same thing as merging one branch into another in a local repository and then pushing to GitHub. The benefit is that the merge is done on the server side and a local repository is not needed. This makes it more appropriate for automation and other tools where maintaining local repositories would be cumbersome and inefficient.\n\nThe authenticated user will be the author of any merges done through this endpoint.\n\n# [Pages](https://developer.github.com/v3/repos/pages/)\n\nThe GitHub Pages API retrieves information about your GitHub Pages configuration, and the statuses of your builds. Information about the site and the builds can only be accessed by authenticated owners, even though the websites are public.\n\nIn JSON responses, ```status``` can be one of:\n-  ```null```, which means the site has yet to be built\n-  ```queued```, which means the build has been requested but not yet begun\n-  ```building```, which means the build is in progress\n-  ```built```, which means the site has been built\n-  ```errored```, which indicates an error occurred during the build\n\n# [Releases](https://developer.github.com/v3/repos/releases/)\n\n**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.jean-grey-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).\n\n# [Repository Invitations](https://developer.github.com/v3/repos/invitations/)\n\nThe Repository Invitations API allows users or external services to invite other users to collaborate on a repo. The invited users (or external services on behalf of invited users) can choose to accept or decline the invitations.\n\nNote that the ```repo:invite``` [OAuth scope](https://developer.github.com/apps/building-integrations/setting-up-and-registering-oauth-apps/about-scopes-for-oauth-apps/) grants targeted access to invitations **without** also granting access to repository code, while the ```repo``` scope grants permission to code as well as invitations.\n\n# [Repository Webhooks](https://developer.github.com/v3/repos/hooks/)\n\nThe Repository Webhooks API allows repository admins to manage the post-receive hooks for a repository.  Webhooks can be managed using the JSON HTTP API, or the [PubSubHubbub API](https://developer.github.com/v3/repos/hooks/#pubsubhubbub).\n\nIf you would like to set up a single webhook to receive events from all of your organization's repositories, check out our [API documentation for Organization Webhooks](https://developer.github.com/v3/orgs/hooks/).\n\n# [Statistics](https://developer.github.com/v3/repos/statistics/)\n\nThe Repository Statistics API allows you to fetch the data that GitHub uses for visualizing different types of repository activity.\n\n####  A word about caching\n\nComputing repository statistics is an expensive operation, so we try to return cached data whenever possible.  If the data hasn't been cached when you query a repository's statistics, you'll receive a ```202``` response; a background job is also fired to start compiling these statistics. Give the job a few moments to complete, and then submit the request again. If the job has completed, that request will receive a ```200``` response with the statistics in the response body.\n\nRepository statistics are cached by the SHA of the repository's default branch, which is usually master; pushing to the default branch resets the statistics cache.\n\n####  Statistics exclude some types of commits\n\nThe statistics exposed by the API match the statistics shown by [different repository graphs](https://help.github.com/articles/about-repository-graphs/).\n\nTo summarize:\n- All statistics exclude merge commits.\n- Contributor statistics also exclude empty commits.\n\n# [Statuses](https://developer.github.com/v3/repos/statuses/)\n\n**Note:** The [Statuses API](https://developer.github.com/v3/repos/statuses) now returns the ```avatar_url``` for each status object in a response. To receive ```avatar_url``` in the API response, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.howard-the-duck-preview+json\n```\n\n**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.jean-grey-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).\n\nThe status API allows external services to mark commits with an ```error```, ```failure```, ```pending```, or ```success``` state, which is then reflected in pull requests involving those commits.\n\nStatuses can also include an optional ```description``` and ```target_url```, and we highly recommend providing them as they make statuses much more useful in the GitHub UI.\n\nAs an example, one common use is for continuous integration services to mark commits as passing or failing builds using status.  The ```target_url``` would be the full URL to the build output, and the ```description``` would be the high level summary of what happened with the build.\n\nStatuses can include a ```context``` to indicate what service is providing that status. For example, you may have your continuous integration service push statuses with a context of ```ci```, and a security audit tool push statuses with a context of ```security```.  You can then use the [combined status endpoint](https://developer.github.com/v3/repos/statuses/#get-the-combined-status-for-a-specific-ref) to retrieve the whole status for a commit.\n\nNote that the ```repo:status``` [OAuth scope](https://developer.github.com/apps/building-integrations/setting-up-and-registering-oauth-apps/about-scopes-for-oauth-apps/) grants targeted access to statuses **without** also granting access to repository code, while the ```repo``` scope grants permission to code as well as statuses.\n\n# [Traffic](https://developer.github.com/v3/repos/traffic/)\n\nFor repositories that you have push access to, the traffic API provides access to the information provided in the [graphs section](https://help.github.com/articles/about-repository-graphs/#traffic).","x-swgg-descriptionLineList":["# [Repositories](https://developer.github.com/v3/repos/)","","**Note:** The ```topics``` property for repositories on GitHub is currently available for developers to preview. To view the ```topics``` property in calls that return repository results, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.mercy-preview+json","```","","**Note:** The [Repository Transfer API](https://developer.github.com/changes/2017-11-09-repository-transfer-api-preview) is currently available for developers to preview. To access the API, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.nightshade-preview+json","```","","**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.jean-grey-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","","# [Branches](https://developer.github.com/v3/repos/branches/)","","no description","","# [Collaborators](https://developer.github.com/v3/repos/collaborators/)","","no description","","# [Comments](https://developer.github.com/v3/repos/comments/)","","Custom media types","","These are the supported media types for commit comments. You can read more about the use of media types in the API [here](https://developer.github.com/v3/media/).","```","application/vnd.github-commitcomment.raw+json","application/vnd.github-commitcomment.text+json","application/vnd.github-commitcomment.html+json","application/vnd.github-commitcomment.full+json","```","","# [Commits](https://developer.github.com/v3/repos/commits/)","","The Repo Commits API supports listing, viewing, and comparing commits in a repository.","","# [Community](https://developer.github.com/v3/repos/community/)","","We're currently offering a preview of the Community Profile API (also known as community health).","","To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.black-panther-preview+json","```","","# [Contents](https://developer.github.com/v3/repos/contents/)","","These API methods let you retrieve the contents of files within a repository as Base64 encoded content. See [media types](https://developer.github.com/v3/repos/contents/#custom-media-types) for requesting the raw format or rendered HTML (when supported).","","Custom media types","","[READMEs](https://developer.github.com/v3/repos/contents/#get-the-readme), [files](https://developer.github.com/v3/repos/contents/#get-contents), and [symlinks](https://developer.github.com/v3/repos/contents/#get-contents) support the following custom media types:","```","application/vnd.github.VERSION.raw","application/vnd.github.VERSION.html","```","","# [Deploy Keys](https://developer.github.com/v3/repos/keys/)","","no description","","# [Deployments](https://developer.github.com/v3/repos/deployments/)","","Deployments are a request for a specific ref (branch, SHA, tag) to be deployed. GitHub then dispatches deployment events that external services can listen for and act on. This enables developers and organizations to build loosely-coupled tooling around deployments, without having to worry about implementation details of delivering different types of applications (e.g., web, native).","","Deployment statuses allow external services to mark deployments with an ```error```, ```failure```, ```pending```, or ```success``` state, which can then be consumed by any system listening for ```deployment_status``` events.","","Deployment statuses can also include an optional ```description``` and ```target_url```, and we highly recommend providing them as they make deployment statuses much more useful. The ```target_url``` would be the full URL to the deployment output, and the ```description``` would be the high level summary of what happened with the deployment.","","Deployments and deployment statuses both have associated [repository events](https://developer.github.com/v3/activity/events/types/#deploymentevent) when they're created. This allows webhooks and 3rd party integrations to respond to deployment requests as well as update the status of a deployment as progress is made.","","Below is a simple sequence diagram for how these interactions would work.","```","+---------+             +--------+            +-----------+        +-------------+","| Tooling |             | GitHub |            | 3rd Party |        | Your Server |","+---------+             +--------+            +-----------+        +-------------+","     |                      |                       |                     |","     |  Create Deployment   |                       |                     |","     |---------------------&gt;|                       |                     |","     |                      |                       |                     |","     |  Deployment Created  |                       |                     |","     |&lt;---------------------|                       |                     |","     |                      |                       |                     |","     |                      |   Deployment Event    |                     |","     |                      |----------------------&gt;|                     |","     |                      |                       |     SSH+Deploys     |","     |                      |                       |--------------------&gt;|","     |                      |                       |                     |","     |                      |   Deployment Status   |                     |","     |                      |&lt;----------------------|                     |","     |                      |                       |                     |","     |                      |                       |   Deploy Completed  |","     |                      |                       |&lt;--------------------|","     |                      |                       |                     |","     |                      |   Deployment Status   |                     |","     |                      |&lt;----------------------|                     |","     |                      |                       |                     |","```","","","Keep in mind that GitHub is never actually accessing your servers. It's up to your 3rd party integration to interact with deployment events.  This allows for [GitHub integrations](https://github.com/integrations) as well as running your own systems depending on your use case. Multiple systems can listen for deployment events, and it's up to each of those systems to decide whether or not they're responsible for pushing the code out to your servers, building native code, etc.","","Note that the ```repo_deployment``` [OAuth scope](https://developer.github.com/apps/building-integrations/setting-up-and-registering-oauth-apps/about-scopes-for-oauth-apps/) grants targeted access to deployments and deployment statuses **without** granting access to repository code, while the ```repo``` scope grants permission to code as well.","","**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.jean-grey-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","","# [Downloads](https://developer.github.com/v3/repos/downloads/)","","The Downloads API (described below) was [deprecated on December 11, 2012](https://github.com/blog/1302-goodbye-uploads). It will be removed at a future date.","","We recommend using [Releases](https://developer.github.com/v3/repos/releases/) instead.","","The downloads API is for package downloads only. If you want to get source tarballs you should use [this](https://developer.github.com/v3/repos/contents/#get-archive-link) instead.","","# [Forks](https://developer.github.com/v3/repos/forks/)","","no description","","# [Merging](https://developer.github.com/v3/repos/merging/)","","The Repo Merging API supports merging branches in a repository. This accomplishes essentially the same thing as merging one branch into another in a local repository and then pushing to GitHub. The benefit is that the merge is done on the server side and a local repository is not needed. This makes it more appropriate for automation and other tools where maintaining local repositories would be cumbersome and inefficient.","","The authenticated user will be the author of any merges done through this endpoint.","","# [Pages](https://developer.github.com/v3/repos/pages/)","","The GitHub Pages API retrieves information about your GitHub Pages configuration, and the statuses of your builds. Information about the site and the builds can only be accessed by authenticated owners, even though the websites are public.","","In JSON responses, ```status``` can be one of:","-  ```null```, which means the site has yet to be built","-  ```queued```, which means the build has been requested but not yet begun","-  ```building```, which means the build is in progress","-  ```built```, which means the site has been built","-  ```errored```, which indicates an error occurred during the build","","# [Releases](https://developer.github.com/v3/repos/releases/)","","**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.jean-grey-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","","# [Repository Invitations](https://developer.github.com/v3/repos/invitations/)","","The Repository Invitations API allows users or external services to invite other users to collaborate on a repo. The invited users (or external services on behalf of invited users) can choose to accept or decline the invitations.","","Note that the ```repo:invite``` [OAuth scope](https://developer.github.com/apps/building-integrations/setting-up-and-registering-oauth-apps/about-scopes-for-oauth-apps/) grants targeted access to invitations **without** also granting access to repository code, while the ```repo``` scope grants permission to code as well as invitations.","","# [Repository Webhooks](https://developer.github.com/v3/repos/hooks/)","","The Repository Webhooks API allows repository admins to manage the post-receive hooks for a repository.  Webhooks can be managed using the JSON HTTP API, or the [PubSubHubbub API](https://developer.github.com/v3/repos/hooks/#pubsubhubbub).","","If you would like to set up a single webhook to receive events from all of your organization's repositories, check out our [API documentation for Organization Webhooks](https://developer.github.com/v3/orgs/hooks/).","","# [Statistics](https://developer.github.com/v3/repos/statistics/)","","The Repository Statistics API allows you to fetch the data that GitHub uses for visualizing different types of repository activity.","","####  A word about caching","","Computing repository statistics is an expensive operation, so we try to return cached data whenever possible.  If the data hasn't been cached when you query a repository's statistics, you'll receive a ```202``` response; a background job is also fired to start compiling these statistics. Give the job a few moments to complete, and then submit the request again. If the job has completed, that request will receive a ```200``` response with the statistics in the response body.","","Repository statistics are cached by the SHA of the repository's default branch, which is usually master; pushing to the default branch resets the statistics cache.","","####  Statistics exclude some types of commits","","The statistics exposed by the API match the statistics shown by [different repository graphs](https://help.github.com/articles/about-repository-graphs/).","","To summarize:","- All statistics exclude merge commits.","- Contributor statistics also exclude empty commits.","","# [Statuses](https://developer.github.com/v3/repos/statuses/)","","**Note:** The [Statuses API](https://developer.github.com/v3/repos/statuses) now returns the ```avatar_url``` for each status object in a response. To receive ```avatar_url``` in the API response, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.howard-the-duck-preview+json","```","","**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.jean-grey-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","","The status API allows external services to mark commits with an ```error```, ```failure```, ```pending```, or ```success``` state, which is then reflected in pull requests involving those commits.","","Statuses can also include an optional ```description``` and ```target_url```, and we highly recommend providing them as they make statuses much more useful in the GitHub UI.","","As an example, one common use is for continuous integration services to mark commits as passing or failing builds using status.  The ```target_url``` would be the full URL to the build output, and the ```description``` would be the high level summary of what happened with the build.","","Statuses can include a ```context``` to indicate what service is providing that status. For example, you may have your continuous integration service push statuses with a context of ```ci```, and a security audit tool push statuses with a context of ```security```.  You can then use the [combined status endpoint](https://developer.github.com/v3/repos/statuses/#get-the-combined-status-for-a-specific-ref) to retrieve the whole status for a commit.","","Note that the ```repo:status``` [OAuth scope](https://developer.github.com/apps/building-integrations/setting-up-and-registering-oauth-apps/about-scopes-for-oauth-apps/) grants targeted access to statuses **without** also granting access to repository code, while the ```repo``` scope grants permission to code as well as statuses.","","# [Traffic](https://developer.github.com/v3/repos/traffic/)","","For repositories that you have push access to, the traffic API provides access to the information provided in the [graphs section](https://help.github.com/articles/about-repository-graphs/#traffic)."]},"github-scim":{"description":"# [SCIM](https://developer.github.com/v3/scim/)\n\nno description","x-swgg-descriptionLineList":["# [SCIM](https://developer.github.com/v3/scim/)","","no description"]},"github-search":{"description":"# [Search](https://developer.github.com/v3/search/)\n\n**Note:** The ```topics``` property for repositories on GitHub is currently available for developers to preview. To view the ```topics``` property in calls that return repository results, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.mercy-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).\n\n####  About the search API\n\nThe Search API is optimized to help you find the specific item you're looking for (e.g., a specific user, a specific file in a repository, etc.). Think of it the way you think of performing a search on Google. It's designed to help you find the one result you're looking for (or maybe the few results you're looking for). Just like searching on Google, you sometimes want to see a few pages of search results so that you can find the item that best meets your needs. To satisfy that need, the GitHub Search API provides **up to 1,000 results for each search**.\n\n####  Ranking search results\n\nUnless another sort option is provided as a query parameter, results are sorted by best match, as indicated by the ```score``` field for each item returned. This is a computed value representing the relevance of an item relative to the other items in the result set. Multiple factors are combined to boost the most relevant item to the top of the result list.\n\n####  Rate limit\n\nThe Search API has a custom rate limit. For requests using [Basic Authentication](https://developer.github.com/v3/#authentication), [OAuth](https://developer.github.com/v3/#authentication), or [client ID and secret](https://developer.github.com/v3/#increasing-the-unauthenticated-rate-limit-for-oauth-applications), you can make up to 30 requests per minute. For unauthenticated requests, the rate limit allows you to make up to 10 requests per minute.\n\nSee the [rate limit documentation](https://developer.github.com/v3/#rate-limiting) for details on determining your current rate limit status.\n\n####  Timeouts and incomplete results\n\nTo keep the Search API fast for everyone, we limit how long any individual query can run. For queries that [exceed the time limit](https://developer.github.com/changes/2014-04-07-understanding-search-results-and-potential-timeouts/), the API returns the matches that were already found prior to the timeout, and the response has the ```incomplete_results``` property set to ```true```.\n\nReaching a timeout does not necessarily mean that search results are incomplete. More results might have been found, but also might not.\n\n# [Legacy Search](https://developer.github.com/v3/search/legacy/)\n\nThis is a listing of the Legacy Search API features from API v2 that have been ported to API v3. There should be no changes, other than the new URL and JSON output format.\n\n####  Legacy Search API is Deprecated\n\nThe Legacy Search API (described below) is deprecated. We recommend using the [v3 Search API](https://developer.github.com/v3/search/) instead. It contains new endpoints and much more functionality.","x-swgg-descriptionLineList":["# [Search](https://developer.github.com/v3/search/)","","**Note:** The ```topics``` property for repositories on GitHub is currently available for developers to preview. To view the ```topics``` property in calls that return repository results, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.mercy-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","","####  About the search API","","The Search API is optimized to help you find the specific item you're looking for (e.g., a specific user, a specific file in a repository, etc.). Think of it the way you think of performing a search on Google. It's designed to help you find the one result you're looking for (or maybe the few results you're looking for). Just like searching on Google, you sometimes want to see a few pages of search results so that you can find the item that best meets your needs. To satisfy that need, the GitHub Search API provides **up to 1,000 results for each search**.","","####  Ranking search results","","Unless another sort option is provided as a query parameter, results are sorted by best match, as indicated by the ```score``` field for each item returned. This is a computed value representing the relevance of an item relative to the other items in the result set. Multiple factors are combined to boost the most relevant item to the top of the result list.","","####  Rate limit","","The Search API has a custom rate limit. For requests using [Basic Authentication](https://developer.github.com/v3/#authentication), [OAuth](https://developer.github.com/v3/#authentication), or [client ID and secret](https://developer.github.com/v3/#increasing-the-unauthenticated-rate-limit-for-oauth-applications), you can make up to 30 requests per minute. For unauthenticated requests, the rate limit allows you to make up to 10 requests per minute.","","See the [rate limit documentation](https://developer.github.com/v3/#rate-limiting) for details on determining your current rate limit status.","","####  Timeouts and incomplete results","","To keep the Search API fast for everyone, we limit how long any individual query can run. For queries that [exceed the time limit](https://developer.github.com/changes/2014-04-07-understanding-search-results-and-potential-timeouts/), the API returns the matches that were already found prior to the timeout, and the response has the ```incomplete_results``` property set to ```true```.","","Reaching a timeout does not necessarily mean that search results are incomplete. More results might have been found, but also might not.","","# [Legacy Search](https://developer.github.com/v3/search/legacy/)","","This is a listing of the Legacy Search API features from API v2 that have been ported to API v3. There should be no changes, other than the new URL and JSON output format.","","####  Legacy Search API is Deprecated","","The Legacy Search API (described below) is deprecated. We recommend using the [v3 Search API](https://developer.github.com/v3/search/) instead. It contains new endpoints and much more functionality."]},"github-teams":{"description":"# [Organization Teams](https://developer.github.com/v3/teams/)\n\nThis API is only available to authenticated members of the team's [organization](https://developer.github.com/v3/orgs). OAuth access tokens require the ```read:org``` [scope](https://developer.github.com/apps/building-integrations/setting-up-and-registering-oauth-apps/about-scopes-for-oauth-apps/).\n\nThe Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.inertia-preview+json\n```\n\n**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.jean-grey-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).\n\n# [Team Discussion Comments](https://developer.github.com/v3/teams/discussion_comments/)\n\nThe team discussion comments API allows you to get, create, edit, and delete discussion comments on a [team discussion](https://developer.github.com/v3/teams/discussions) post. Any member of the team's [organization](https://developer.github.com/v3/orgs) can create and read comments on a public discussion. For more details, see \"[About team discussions](https://help.github.com/articles/about-team-discussions/).\" This API is only available to authenticated members of the team's organization.\n\n# [Team Discussions](https://developer.github.com/v3/teams/discussions/)\n\nThe team discussions API allows you to get, create, edit, and delete discussion posts on a team's page. You can use team discussions to have conversations that are not specific to a repository or project. Any member of the team's [organization](https://developer.github.com/v3/orgs) can create and read public discussion posts. For more details, see \"[About team discussions](https://help.github.com/articles/about-team-discussions/).\" To learn more about commenting on a discussion post, see the [team discussion comments API](https://developer.github.com/v3/teams/discussion_comments). This API is only available to authenticated members of the team's organization.\n\n# [Team Members](https://developer.github.com/v3/teams/members/)\n\nThis API is only available to authenticated members of the team's organization. OAuth access tokens require the ```read:org``` [scope](https://developer.github.com/apps/building-integrations/setting-up-and-registering-oauth-apps/about-scopes-for-oauth-apps/).\n\n**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.jean-grey-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","x-swgg-descriptionLineList":["# [Organization Teams](https://developer.github.com/v3/teams/)","","This API is only available to authenticated members of the team's [organization](https://developer.github.com/v3/orgs). OAuth access tokens require the ```read:org``` [scope](https://developer.github.com/apps/building-integrations/setting-up-and-registering-oauth-apps/about-scopes-for-oauth-apps/).","","The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2016-10-27-changes-to-projects-api) for full details. To access the API during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.inertia-preview+json","```","","**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.jean-grey-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","","# [Team Discussion Comments](https://developer.github.com/v3/teams/discussion_comments/)","","The team discussion comments API allows you to get, create, edit, and delete discussion comments on a [team discussion](https://developer.github.com/v3/teams/discussions) post. Any member of the team's [organization](https://developer.github.com/v3/orgs) can create and read comments on a public discussion. For more details, see \"[About team discussions](https://help.github.com/articles/about-team-discussions/).\" This API is only available to authenticated members of the team's organization.","","# [Team Discussions](https://developer.github.com/v3/teams/discussions/)","","The team discussions API allows you to get, create, edit, and delete discussion posts on a team's page. You can use team discussions to have conversations that are not specific to a repository or project. Any member of the team's [organization](https://developer.github.com/v3/orgs) can create and read public discussion posts. For more details, see \"[About team discussions](https://help.github.com/articles/about-team-discussions/).\" To learn more about commenting on a discussion post, see the [team discussion comments API](https://developer.github.com/v3/teams/discussion_comments). This API is only available to authenticated members of the team's organization.","","# [Team Members](https://developer.github.com/v3/teams/members/)","","This API is only available to authenticated members of the team's organization. OAuth access tokens require the ```read:org``` [scope](https://developer.github.com/apps/building-integrations/setting-up-and-registering-oauth-apps/about-scopes-for-oauth-apps/).","","**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.jean-grey-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact)."]},"github-users":{"description":"# [Users](https://developer.github.com/v3/users/)\n\nMany of the resources on the users API provide a shortcut for getting information about the currently authenticated user. If a request URL does not include a ```:username``` parameter then the response will be for the logged in user (and you must pass [authentication information](https://developer.github.com/v3/#authentication) with your request). Additional private information, such as whether a user has two-factor authentication enabled, is included when authenticated through basic auth or OAuth with the ```user``` scope.\n\n**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.jean-grey-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).\n\n# [Block Another User](https://developer.github.com/v3/users/blocking/)\n\n**Note:** The User Blocking API on GitHub is currently available for developers to preview. To access the API, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:\n```\napplication/vnd.github.giant-sentry-fist-preview+json\n```\n\n**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).\n\n# [User Emails](https://developer.github.com/v3/users/emails/)\n\nManagement of email addresses via the API requires that you authenticate through basic auth or OAuth with the ```user:email``` scope.\n\n# [User Followers](https://developer.github.com/v3/users/followers/)\n\nno description\n\n# [User GPG Keys](https://developer.github.com/v3/users/gpg_keys/)\n\nThe data returned in the ```public_key``` response field is not a GPG formatted key. When a user uploads a GPG key, it is parsed and the cryptographic public key is extracted and stored. This cryptographic key is what is returned by the APIs on this page. This key is not suitable to be used directly by programs like GPG.\n\n# [User Public Keys](https://developer.github.com/v3/users/keys/)\n\nno description","x-swgg-descriptionLineList":["# [Users](https://developer.github.com/v3/users/)","","Many of the resources on the users API provide a shortcut for getting information about the currently authenticated user. If a request URL does not include a ```:username``` parameter then the response will be for the logged in user (and you must pass [authentication information](https://developer.github.com/v3/#authentication) with your request). Additional private information, such as whether a user has two-factor authentication enabled, is included when authenticated through basic auth or OAuth with the ```user``` scope.","","**Note:** To help with migrating from our REST API v3 to GraphQL API v4, we're introducing a preview period to include the [GraphQL ```node_id```](https://developer.github.com/v3/#graphql-global-relay-ids) in the response for many REST API v3 resources. See the [blog post](https://developer.github.com/changes/2017-12-19-graphql-node-id) for full details. To access ```node_id``` during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.jean-grey-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","","# [Block Another User](https://developer.github.com/v3/users/blocking/)","","**Note:** The User Blocking API on GitHub is currently available for developers to preview. To access the API, you must provide a custom [media type](https://developer.github.com/v3/media) in the ```Accept``` header:","```","application/vnd.github.giant-sentry-fist-preview+json","```","","**Warning:** The API may change without advance notice during the preview period. Preview features are not supported for production use. If you experience any issues, contact [GitHub support](https://github.com/contact).","","# [User Emails](https://developer.github.com/v3/users/emails/)","","Management of email addresses via the API requires that you authenticate through basic auth or OAuth with the ```user:email``` scope.","","# [User Followers](https://developer.github.com/v3/users/followers/)","","no description","","# [User GPG Keys](https://developer.github.com/v3/users/gpg_keys/)","","The data returned in the ```public_key``` response field is not a GPG formatted key. When a user uploads a GPG key, it is parsed and the cryptographic public key is extracted and stored. This cryptographic key is what is returned by the APIs on this page. This key is not suitable to be used directly by programs like GPG.","","# [User Public Keys](https://developer.github.com/v3/users/keys/)","","no description"]}}}